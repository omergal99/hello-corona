{"version":3,"sources":["cmps/helpers/mapHelpers/SvgDefsFilterShadow.js","cmps/helpers/FilterInput.js","cmps/helpers/countryDetails/CountryDetailsTitle.js","cmps/helpers/countryDetails/CountryDetailsList.js","cmps/helpers/countryDetails/index.js","cmps/worldDashboard/mapUtils/GCircles.js","cmps/worldDashboard/mapUtils/GPaths.js","cmps/worldDashboard/mapUtils/MapTooltip.js","cmps/worldDashboard/mapUtils/SvgCountriesMap.js","cmps/worldDashboard/mapUtils/MapOptions.js","cmps/helpers/graphs/GraphColumnsPreview.js","cmps/helpers/graphs/GraphColumns.js","cmps/worldDashboard/WorldDashboardMap.js","cmps/worldDashboard/WorldDashboardListItem.js","cmps/worldDashboard/WorldDashboardList.js","cmps/worldDashboard/WorldDashboardWorldData.js","cmps/helpers/svg-icons/ReplaceSVG.js","cmps/helpers/graphs/GraphRows.js","cmps/worldDashboard/WorldDashboardDetails.js","pages/WorldDashboard.js"],"names":["SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","type","slope","x","y","width","floodColor","floodOpacity","in2","operator","FilterInput","list","filterKeys","placeholder","onFilter","useState","filterValue","setFilterValue","className","value","onChange","ev","target","toLowerCase","filteredList","filter","item","some","key","includes","CountryDetailsTitle","country","sounds","isWorld","name","countryIcon","autoPlay","loop","muted","playsInline","loading","src","UtilsService","getSrc","alt","title","getImgSrc","alpha2","useEffect","isCountryVoice","msg","SpeechSynthesisUtterance","text","speechSynthesis","speak","continent","CountryDetailsList","categoriesToAddIcon","CASES","DEATHS","RECOVERED","ACTIVE","CRITICAL","TESTS","coronaDetails","getCoronaDataKeys","map","category","isWishIcon","numberWithCommas","dividBy","POPULATION","percent","style","color","colorHEX","svgIcon","toFixed","Number","populationDetails","populationData","getDataKeyByKey","CountryDetails","settingsStore","useSelector","state","GCircles","circlesDataKey","countries","dynamicRatio","args","countriesCircles","calcRadius","radius","shortNum","numberToShortString","dataKey","fill","cx","centerPoint","cy","r","fontSize","strokeWidth","initStroke","GPaths","selectedCountry","minMapZoom","didDrag","pathClassName","currPathName","isDragging","initZoom","isAutoFocus","isTooltipShow","onSetViewBox","onSetDynamicRatio","onSetMapView","onSelectCountry","selectedCountryRef","useRef","current","bBox","getBBox","abs","Math","max","bBoxX","bBoxY","zoom","countriesPaths","isSelected","classSelected","isSelecting","d","onClick","ref","undefined","countriesPathsLabels","countriesLabels","MapTooltip","tooltip","SvgCountriesMap","settings","isCirclesShow","baseMap","svgRef","maxMapZoom","ratioUpdateZoom","minTopSvg","minLeftSvg","initFontSize","viewBox","setViewBox","mapView","setMapView","setDynamicRatio","setDidDrag","setIsDragging","pointerDiff","setPointerDiff","setTooltip","setCurrPathName","handleWheel","useCallback","path","baseVal","svgClassName","updateZoom","copy","deltaY","window","addEventListener","passive","removeEventListener","stopDrag","setTimeout","onScroll","console","log","onWheel","onMouseDown","clientX","clientY","getAttribute","onMouseMove","ratioBySvgHeight","clientHeight","movementX","movementY","top","nativeEvent","offsetY","left","offsetX","onMouseUp","onMouseLeave","MapOptions","isGraphShow","onToggleIsCirclesShow","onToggleIsAutoFocus","onSetCirclesDataKey","onToggleIsTooltipShow","onToggleIsGraphShow","circlesDataButtons","getDataKeysByKeys","circle","isActive","Button","textCondition","isBoolean","GraphColumnsPreview","arr","maxHeight","graphRatio","graphDataType","idx","length","backgroundColor","line","diff","colWidth","calcSlant","sqrt","angle","atan","PI","slant","calcLine","transform","date","GraphColumns","graphRef","setGraphRatio","graphType","setGraphType","graphDataTypes","graphTypesButtons","historyObj","history","timeline","historyArr","Object","keys","clientWidth","WorldDashboardMap","countriesStore","selectedCountryIndex","worldData","mapOptionsFunction","WorldDashboardListItem","categoryView","commasNum","numericCode","RANK","todayCases","VirusSVG","WorldDashboardList","filteredCountries","setFilteredCountries","isFiltered","setIsFiltered","isScroll","setIsScroll","scrollTop","scrollHeight","WorldDashboardWorldData","VirusLogoSVG","role","GraphRows","rowsAmount","setRowsAmount","DataKeys","graphBy","setGraphBy","graphDataKey","top10","sort","b","a","slice","ReplaceSVG","fontWeight","WorldDashboardDetails","WorldDashboard","dispatch","useDispatch","useHistory","params","useParams","isSelectedCountry","find","actions","selectCountry","push","WORLD_DASHBOARD","isSameCountry","alpha2ToPush","toggleIsCirclesShow","toggleIsAutoFocus","setCirclesDataKey","toggleIsTooltipShow","toggleIsGraphShow","worldMap"],"mappings":"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","file":"static/js/3.64aaaead.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <filter id=\"dropshadow\" height=\"130%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n          <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n          <feComponentTransfer>\r\n            <feFuncA type=\"linear\" slope=\"0.5\" />\r\n          </feComponentTransfer>\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <defs>\r\n        <filter id=\"dropshadow-color\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\r\n          <feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offsetBlur\" />\r\n          <feFlood floodColor=\"var(--color2-border)\" floodOpacity=\"0.6\" result=\"offsetColor\" />\r\n          <feComposite in=\"offsetColor\" in2=\"offsetBlur\" operator=\"in\" result=\"offsetBlur\" />\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState } from 'react';\r\n\r\nfunction FilterInput({ list = [], filterKeys = [], placeholder = 'Search',\r\n  onFilter }) {\r\n\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const updateFilterValue = ev => {\r\n    setFilterValue(ev.target.value);\r\n    const value = ev.target.value.toLowerCase();\r\n    if (!value) onFilter(list);\r\n    else {\r\n      const filteredList = list.filter(item => filterKeys.some(key => item[key].toLowerCase().includes(value)));\r\n      onFilter(filteredList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input className=\"filter-input\" type=\"text\" placeholder={placeholder}\r\n      value={filterValue} onChange={updateFilterValue} />\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React, { useEffect } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction CountryDetailsTitle({ country, sounds }) {\r\n\r\n  const isWorld = country.name === 'World';\r\n\r\n  const countryIcon = (() => {\r\n    return isWorld\r\n      // ? <img className=\"country-flag\" src={UtilsService.getSrc(`earth.gif`)} alt=\"Earth\" />\r\n      ? <video className=\"country-earth\" autoPlay loop muted playsInline loading=\"lazy\">\r\n        <source src={UtilsService.getSrc(`earth.mp4`)} type=\"video/mp4\" />\r\n      </video>\r\n      : <img className=\"country-flag\" alt=\"Flag\" title={country.name}\r\n        src={UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`)} />\r\n  })()\r\n\r\n  useEffect(() => {\r\n    if (sounds.isCountryVoice && !isWorld) {\r\n      const msg = new SpeechSynthesisUtterance();\r\n      msg.text = country.name;\r\n      // const voices = window.speechSynthesis.getVoices();\r\n      // msg.voice = voices[10];\r\n      // msg.voiceURI = \"native\";\r\n      // msg.volume = 1;\r\n      // msg.rate = 1;\r\n      // msg.pitch = 0.8;\r\n      // msg.lang = 'en-US';\r\n      speechSynthesis.speak(msg);\r\n    }\r\n  }, [country, sounds, isWorld])\r\n\r\n  return (\r\n    <div className=\"country-details-title\">\r\n      <div className={`wrap-country-icon ${isWorld ? 'earth' : 'flag'}`}>\r\n        {countryIcon}\r\n      </div>\r\n      <div className=\"wrap-country-title\">\r\n        <h2>{country.name}</h2>\r\n        <span className=\"continent\">{country.continent}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsTitle;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport {\r\n  POPULATION, CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS,\r\n  getCoronaDataKeys, getDataKeyByKey\r\n} from '../../../constants/DataKeys';\r\n\r\nfunction CountryDetailsList({ country }) {\r\n\r\n  const categoriesToAddIcon = [CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS];\r\n  const coronaDetails = getCoronaDataKeys().map(category => {\r\n    const isWishIcon = categoriesToAddIcon.some(key => key === category.key);\r\n    const value = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const dividBy = category.key === CASES ? POPULATION : category.dividBy;\r\n    const percent = country[category.key] / country[dividBy] * 100;\r\n    return <li className=\"country-details-item\" key={category.key} style={{ color: category.colorHEX }}>\r\n      <span className=\"title\">\r\n        {category.title}:&nbsp;\r\n        {isWishIcon && <div className=\"wrap-icon-svg\">{category.svgIcon}</div>}\r\n      </span>\r\n      <span className=\"value\" title={value}>{value}</span>\r\n      {dividBy && !!country[category.key] &&\r\n        <span className=\"percent\" title={percent.toFixed(2)}>\r\n          {Number(percent.toFixed(0)) !== 0 ? percent.toFixed(0) : percent.toFixed(2)}\r\n          %\r\n        </span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  const populationDetails = (() => {\r\n    const populationData = getDataKeyByKey(POPULATION);\r\n    const value = UtilsService.numberWithCommas(country[populationData.key]);\r\n    return <li className=\"country-details-item\">\r\n      <span className=\"title\">{populationData.title}:&nbsp;</span>\r\n      <span className=\"value population\" title={value}>{value}</span>\r\n    </li>\r\n  })()\r\n\r\n  return (\r\n    <ul className=\"country-details-list\">\r\n      {populationDetails}\r\n      {coronaDetails}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport CountryDetailsTitle from './CountryDetailsTitle';\r\nimport CountryDetailsList from './CountryDetailsList';\r\n\r\nfunction CountryDetails({ country }) {\r\n\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n  const sounds = settingsStore ? settingsStore.sounds : { sounds: false };\r\n  return (\r\n    <div className=\"country-details flex-col\">\r\n      <CountryDetailsTitle country={country} sounds={sounds} />\r\n      <CountryDetailsList country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport { CASES, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nfunction GCircles({ circlesDataKey = CASES, countries, dynamicRatio, args }) {\r\n\r\n  const countriesCircles = countries.map(country => {\r\n    const calcRadius = (country[circlesDataKey] / 1000).toFixed();\r\n    // const radius = calcRadius > 15 ? 18 : calcRadius > 5 ? 14 : calcRadius > 1 ? 10 : 0;\r\n    const radius = calcRadius > 100 ? 18 : calcRadius > 50 ? 14 : calcRadius > 10 ? 11 :  calcRadius > 2 ? 8 : 0;\r\n    if (!radius) return '';\r\n    const shortNum = UtilsService.numberToShortString(country[circlesDataKey]);\r\n    const dataKey = getDataKeyByKey(circlesDataKey);\r\n    // const fill = `${dataKey.colorHEX}1a`;\r\n    const fill = `${dataKey.colorHEX}26`;\r\n    return <g key={country.id}>\r\n      <circle className=\"country-circle-data\" name={country.name} style={{ fill }}\r\n        // style={{ cx: country.centerPoint.x, cy: country.centerPoint.y, r: radius * dynamicRatio }}\r\n        cx={country.centerPoint.x} cy={country.centerPoint.y} r={radius * dynamicRatio}\r\n      />\r\n      <text className=\"circle-text\" x={country.centerPoint.x} y={country.centerPoint.y}\r\n        dy={`${radius * dynamicRatio / 3}px`} fontSize={`${radius * 0.85 * dynamicRatio}px`}>\r\n        {shortNum}\r\n      </text>\r\n    </g>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-circles\" style={{ strokeWidth: args.initStroke * dynamicRatio }}>\r\n      {countriesCircles}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GCircles;","import React, { useEffect, useRef } from \"react\";\r\nimport countriesLabels from \"../../../services/data/countriesLabels.json\";\r\n\r\nfunction GPaths({ countries, selectedCountry, dynamicRatio, args, minMapZoom, didDrag,\r\n  pathClassName, currPathName, isDragging, initZoom, isAutoFocus, isTooltipShow,\r\n  onSetViewBox, onSetDynamicRatio, onSetMapView, onSelectCountry }) {\r\n\r\n  const selectedCountryRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!selectedCountryRef.current || !isAutoFocus) return;\r\n    const bBox = selectedCountryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    const x = bBoxX - minMapZoom / 2, y = bBoxY - minMapZoom / 2, zoom = max + minMapZoom;\r\n    onSetViewBox(`${x} ${y} ${zoom} ${zoom}`);\r\n    onSetDynamicRatio(zoom / initZoom);\r\n    onSetMapView({ zoom, x, y });\r\n  }, [selectedCountry, onSetViewBox, onSetDynamicRatio, onSetMapView, initZoom, minMapZoom, isAutoFocus])\r\n\r\n  const countriesPaths = countries.map(country => {\r\n    const isSelected = country.name === selectedCountry.name;\r\n    const classSelected = isSelected ? 'selected' : '';\r\n    const isSelecting = isDragging && !didDrag && currPathName === country.name ? 'selecting' : '';\r\n    return <path className={`${pathClassName} ${classSelected} ${isSelecting}`} key={country.id}\r\n      alpha2={country.alpha2} name={country.name} d={country.d}\r\n      onClick={() => !didDrag && onSelectCountry(country)}\r\n      ref={isSelected ? selectedCountryRef : undefined}>\r\n      {!isTooltipShow && <title>{country.name}</title>}\r\n    </path>\r\n  })\r\n\r\n  const countriesPathsLabels = countriesLabels.map(country => {\r\n    return <path className=\"country-path-label\" d={country.d} key={country.id}></path>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-paths\" style={{ strokeWidth: args.initStroke * dynamicRatio, filter: 'url(#dropshadow)' }}>\r\n      {countriesPaths}\r\n      {countriesPathsLabels}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GPaths;","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nfunction MapTooltip({ tooltip }) {\r\n\r\n  return (\r\n    <div className=\"map-tooltip\" style={tooltip.style}>\r\n      <img className=\"tooltip-img\" alt=\"Flag\"\r\n        src={UtilsService.getImgSrc(`flags/${tooltip.alpha2.toLowerCase()}.png`)} />\r\n      <span className=\"tooltip-title\">{tooltip.name}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapTooltip;","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\n\r\nimport SvgDefsFilterShadow from '../../helpers/mapHelpers/SvgDefsFilterShadow';\r\nimport GCircles from './GCircles';\r\nimport GPaths from './GPaths';\r\nimport MapTooltip from './MapTooltip';\r\n\r\nfunction SvgCountriesMap({ countries, selectedCountry,\r\n  settings: { isCirclesShow, circlesDataKey, isAutoFocus, isTooltipShow },\r\n  onSelectCountry}) {\r\n\r\n  const initZoom = 554;\r\n  const baseMap = { width: 954, height: 514 };\r\n\r\n  const svgRef = useRef(initZoom);\r\n\r\n  const args = {\r\n    minMapZoom: 30, maxMapZoom: 1100, ratioUpdateZoom: 0.15,\r\n    minTopSvg: (baseMap.height - initZoom) / 2, minLeftSvg: (baseMap.width - initZoom) / 2,\r\n    initFontSize: initZoom / 30, initStroke: initZoom / 1000\r\n  };\r\n\r\n  const [viewBox, setViewBox] = useState(`${args.minLeftSvg} ${args.minTopSvg} ${initZoom} ${initZoom}`);\r\n  const [mapView, setMapView] = useState({ zoom: initZoom, x: args.minLeftSvg, y: args.minTopSvg });\r\n  const [dynamicRatio, setDynamicRatio] = useState(1);\r\n\r\n  const [didDrag, setDidDrag] = useState(false);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [pointerDiff, setPointerDiff] = useState({ x: 1, y: 1 });\r\n  const [tooltip, setTooltip] = useState(null);\r\n\r\n  const [currPathName, setCurrPathName] = useState(null);\r\n\r\n  const handleWheel = useCallback(ev => {\r\n    const isMouseOnSvgMap = ev.path && ev.path.some(path => path.className && path.className.baseVal\r\n      && path.className.baseVal.includes(svgClassName));\r\n    if (!isMouseOnSvgMap) return;\r\n    const updateZoom = mapView.zoom * args.ratioUpdateZoom;\r\n    const copy = mapView;\r\n    if (ev.deltaY > 0) {\r\n      if (mapView.zoom + updateZoom + args.minMapZoom < args.maxMapZoom) {\r\n        copy.zoom = copy.zoom + updateZoom;\r\n        copy.x = copy.x - updateZoom / 2;\r\n        copy.y = copy.y - updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    } else {\r\n      if (mapView.zoom - updateZoom - args.minMapZoom > 0) {\r\n        copy.zoom = copy.zoom - updateZoom;\r\n        copy.x = copy.x + updateZoom / 2;\r\n        copy.y = copy.y + updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    }\r\n    setDynamicRatio(mapView.zoom / initZoom);\r\n    setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n  }, [mapView, args]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n    return () => window.removeEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n  }, [handleWheel])\r\n\r\n  const startDrag = ev => {\r\n    setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n    setIsDragging(true);\r\n    setCurrPathName(ev.target.getAttribute('name'));\r\n  }\r\n  const handleMouseMove = ev => {\r\n    if (isDragging) {\r\n      const ratioBySvgHeight = initZoom / svgRef.current.clientHeight;\r\n      const x = mapView.x - (ev.clientX - pointerDiff.x) * dynamicRatio * ratioBySvgHeight;\r\n      const y = mapView.y - (ev.clientY - pointerDiff.y) * dynamicRatio * ratioBySvgHeight;\r\n      setMapView({ ...mapView, x, y });\r\n      setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n      setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n      (ev.movementX !== 0 || ev.movementY !== 0) && setDidDrag(true);\r\n    }\r\n    if (isTooltipShow) {\r\n      if (ev.target.getAttribute('class').includes(pathClassName)) {\r\n        setTooltip({\r\n          name: ev.target.getAttribute('name'),\r\n          alpha2: ev.target.getAttribute('alpha2'),\r\n          style: { top: ev.nativeEvent.offsetY - 50, left: ev.nativeEvent.offsetX + 25 }\r\n        });\r\n      } else {\r\n        setTooltip(null);\r\n      }\r\n    }\r\n  }\r\n  const stopDrag = () => {\r\n    setIsDragging(false);\r\n    setTimeout(() => setDidDrag(false), 0);\r\n  }\r\n  const handleMouseLeave = () => {\r\n    stopDrag();\r\n    setTooltip(null);\r\n  }\r\n\r\n  const handleScroll = ev => {\r\n    console.log(ev);\r\n  }\r\n\r\n  const pathClassName = 'country-path';\r\n  const svgClassName = 'svg-map';\r\n\r\n  return (\r\n    <>\r\n      <svg className={svgClassName} viewBox={viewBox} ref={svgRef}\r\n        onScroll={handleScroll} onWheel={handleWheel}\r\n        onMouseDown={startDrag} onMouseMove={handleMouseMove} onMouseUp={stopDrag} onMouseLeave={handleMouseLeave}>\r\n        <SvgDefsFilterShadow />\r\n        <GPaths countries={countries} selectedCountry={selectedCountry} dynamicRatio={dynamicRatio} args={args}\r\n          currPathName={currPathName} isDragging={isDragging} pathClassName={pathClassName} didDrag={didDrag}\r\n          initZoom={initZoom} minMapZoom={args.minMapZoom} isAutoFocus={isAutoFocus} isTooltipShow={isTooltipShow}\r\n          onSetViewBox={setViewBox} onSetDynamicRatio={setDynamicRatio} onSetMapView={setMapView}\r\n          onSelectCountry={onSelectCountry} />\r\n        {isCirclesShow &&\r\n          <GCircles circlesDataKey={circlesDataKey} countries={countries} dynamicRatio={dynamicRatio} args={args} />\r\n        }\r\n      </svg>\r\n\r\n      {isTooltipShow && tooltip &&\r\n        <MapTooltip tooltip={tooltip} />\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgCountriesMap;","import React from \"react\";\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, TESTS, getDataKeysByKeys } from '../../../constants/DataKeys';\r\n\r\nfunction MapOptions({ settings: { isCirclesShow, isAutoFocus, circlesDataKey, isTooltipShow, isGraphShow },\r\n  onToggleIsCirclesShow, onToggleIsAutoFocus, onSetCirclesDataKey, onToggleIsTooltipShow, onToggleIsGraphShow }) {\r\n\r\n  const circleClicked = key => {\r\n    if (circlesDataKey !== key) onSetCirclesDataKey(key);\r\n  }\r\n\r\n  const circlesData = getDataKeysByKeys([CASES, DEATHS, RECOVERED, TESTS]);\r\n\r\n  const circlesDataButtons = circlesData.map(circle => {\r\n    const isActive = circlesDataKey === circle.key;\r\n    return <Button key={circle.key} text={circle.title} type={`${circle.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }}\r\n      onClick={() => circleClicked(circle.key)} />\r\n  })\r\n\r\n  return (\r\n    <div className=\"map-options\">\r\n\r\n      <div className=\"main-options\">\r\n        <Button text=\"Circles\" textCondition={isCirclesShow} isBoolean={true}\r\n          onClick={onToggleIsCirclesShow} />\r\n        <Button text=\"Auto Focus\" textCondition={isAutoFocus} isBoolean={true}\r\n          onClick={onToggleIsAutoFocus} />\r\n        <Button text=\"Tooltip\" textCondition={isTooltipShow} isBoolean={true}\r\n          onClick={onToggleIsTooltipShow} />\r\n        <Button text=\"Graph\" textCondition={isGraphShow} isBoolean={true}\r\n          onClick={onToggleIsGraphShow} />\r\n      </div>\r\n\r\n      {isCirclesShow &&\r\n        <div className=\"circles-options\">\r\n          {circlesDataButtons}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapOptions;","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction GraphColumnsPreview({ arr, maxHeight, graphRatio, graphDataType }) {\r\n\r\n  const calcLine = (item, idx) => {\r\n    const diff = (arr[idx + 1].value - item.value) / maxHeight * 100;\r\n    const colWidth = 1 / arr.length * 100 * graphRatio;\r\n    const calcSlant = Math.sqrt(diff * diff + colWidth * colWidth);\r\n    const tanAngle = Math.atan(diff / colWidth) * 180 / Math.PI;\r\n    return { angle: tanAngle, slant: calcSlant };\r\n  }\r\n\r\n  const list = arr.map((item, idx) => {\r\n    const width = 1 / arr.length * 100 + '%';\r\n    const height = item.value / maxHeight * 100 + '%';\r\n    const backgroundColor = graphDataType.colorHEX;\r\n    const line = arr[idx + 1] ? calcLine(item, idx) : 0;\r\n    const style = {\r\n      top: `-${line.slant * 2}px`,\r\n      transform: `rotate(${line.angle * -1}deg)`\r\n    }\r\n    return <li className=\"column\" key={item.date} style={{ width }}>\r\n      <div className=\"column-percent\" style={{ height, backgroundColor }}>\r\n        <div className=\"wrap-value\">\r\n          <span className=\"value\">{UtilsService.numberWithCommas(item.value)}</span>\r\n        </div>\r\n        {arr[idx + 1] && <span className=\"line\" style={style}></span>}\r\n      </div>\r\n    </li>\r\n  })\r\n\r\n  return (\r\n    <ul className=\"columns\">\r\n      {list}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default GraphColumnsPreview;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nimport GraphColumnsPreview from './GraphColumnsPreview';\r\n\r\nfunction GraphColumns({ selectedCountry }) {\r\n\r\n  const graphRef = useRef();\r\n  const [graphRatio, setGraphRatio] = useState();\r\n  const [graphType, setGraphType] = useState(CASES);\r\n\r\n  const typeClicked = key => {\r\n    if (graphType !== key) setGraphType(key);\r\n  }\r\n\r\n  const graphDataTypes = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n  const graphDataType = graphType === CASES\r\n    ? { ...getDataKeyByKey(graphType), color: 'teal', colorHEX: '#008080' }\r\n    : getDataKeyByKey(graphType);\r\n\r\n  const graphTypesButtons = graphDataTypes.map(type => {\r\n    const isActive = graphType === type.key;\r\n    return <Button key={type.key} text={type.title} type={`${type.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }} onClick={() => typeClicked(type.key)} />\r\n  })\r\n\r\n  const historyObj = selectedCountry.history ? selectedCountry.history.timeline[graphType] : {};\r\n  const historyArr = Object.keys(historyObj).map(key => ({ date: key, value: historyObj[key] }));\r\n\r\n  const maxHeight = historyArr.length ? historyArr[historyArr.length - 1].value * 1.05 : 0;\r\n\r\n  useEffect(() => {\r\n    if (graphRef.current && !graphRatio) {\r\n      setGraphRatio(graphRef.current.clientWidth / graphRef.current.clientHeight);\r\n    }\r\n  }, [graphRef, graphRatio])\r\n\r\n  return (\r\n    <div className=\"graph-columns\" ref={graphRef}>\r\n      <div className=\"graph-options\">\r\n        <div className=\"graph-text\">\r\n          <p>\r\n            <span className=\"text\">{`From ${historyArr[0].date} To ${historyArr[historyArr.length - 1].date}`}</span>\r\n          </p>\r\n        </div>\r\n        <div className=\"buttons-options flex-center\">\r\n          {graphTypesButtons}\r\n        </div>\r\n      </div>\r\n      \r\n      {graphRef && graphRef.current &&\r\n        <GraphColumnsPreview arr={historyArr} maxHeight={maxHeight} graphRatio={graphRatio}\r\n          graphDataType={graphDataType} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphColumns;\r\n// export default React.memo(GraphColumns);\r\n\r\n","import React from \"react\";\r\n\r\nimport SvgCountriesMap from './mapUtils/SvgCountriesMap';\r\nimport MapOptions from './mapUtils/MapOptions';\r\nimport GraphColumns from '../helpers/graphs/GraphColumns';\r\n\r\nfunction WorldDashboardMap({ settings, countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry, mapOptionsFunction }) {\r\n\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countries[selectedCountryIndex] : worldData;\r\n\r\n  const { isGraphShow } = settings;\r\n  return (\r\n    <div className=\"world-dashboard-map\">\r\n      <SvgCountriesMap countries={countries} settings={settings} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      <MapOptions settings={settings} {...mapOptionsFunction} />\r\n      {isGraphShow && selectedCountry.history &&\r\n        <div className=\"wrap-graph-columns\">\r\n          <GraphColumns selectedCountry={selectedCountry} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardMap;","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport VirusSVG from '../helpers/svg-icons/VirusSVG';\r\nimport { CASES, DEATHS, RECOVERED, CRITICAL, RANK, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardListItem({ country, selectedCountry, onSelectCountry }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  const src = UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`);\r\n\r\n  const caterogies = getDataKeysByKeys([CASES, DEATHS, RECOVERED, CRITICAL]);\r\n\r\n  const categoryView = caterogies.map(category => {\r\n    const shortNum = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const commasNum = UtilsService.numberWithCommas(country[category.key]);\r\n    return <div className=\"category flex-col\" key={category.key}\r\n      title={`${commasNum} ${category.title}`}>\r\n      <span className=\"title\">{category.title}</span>\r\n      <span className=\"value\">{shortNum}</span>\r\n    </div>\r\n  })\r\n\r\n  return (\r\n    <li className={`country ${isSelected}`} onClick={() => onSelectCountry(country)}>\r\n      <span className=\"numeric-code\" title=\"Numeric Code\">N-C {country.numericCode}</span>\r\n\r\n      <div className=\"top-section\">\r\n        <div className=\"wrap-country-flag\">\r\n          <img className=\"country-flag\" src={src} alt=\"Flag\" title={country.name} />\r\n        </div>\r\n        <div className=\"wrap-country-status\">\r\n          <h3 className=\"country-name\">{country.name}</h3>\r\n          <div className=\"status-details\">\r\n            <span className=\"rank\" title={`Rank ${country[RANK] + 1}`}>\r\n              <span className=\"rank-icon\">❱❱</span>\r\n              {country[RANK] + 1}\r\n            </span>\r\n            <div className=\"cases\" title={`Today Cases ${UtilsService.numberWithCommas(country.todayCases)}`}>\r\n              <div className=\"wrap-icon-svg\"><VirusSVG /></div>\r\n              <span className=\"cases-value\">+{UtilsService.numberWithCommas(country.todayCases)}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-section\">\r\n        {categoryView}\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardListItem;\r\n","import React, { useState } from 'react';\r\nimport FilterInput from '../helpers/FilterInput';\r\nimport WorldDashboardListItem from './WorldDashboardListItem';\r\n\r\nfunction WorldDashboardList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const [filteredCountries, setFilteredCountries] = useState(countries.filter((item, idx) => idx < 40));\r\n  const [isFiltered, setIsFiltered] = useState(false);\r\n  const [isScroll, setIsScroll] = useState(false);\r\n\r\n  const list = filteredCountries.map((country, idx) => {\r\n    return (isScroll || isFiltered || idx < 10)\r\n      ? <WorldDashboardListItem key={country.id} country={country} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      : <li key={idx} style={{ height: '6.5rem' }}></li>\r\n  })\r\n\r\n  const handleScroll = ev => {\r\n    setIsScroll(true);\r\n    if (isFiltered) return;\r\n    const scrollEnd = ev.target.scrollTop + 100 >= ev.target.scrollHeight - ev.target.clientHeight;\r\n    if (scrollEnd) setFilteredCountries(countries);\r\n  }\r\n\r\n  const filterCountries = filteredList => {\r\n    setFilteredCountries(filteredList);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"world-dashboard-list flex-col\">\r\n      <div className=\"custom-filter-input\">\r\n        <FilterInput list={countries} filterKeys={['name']} placeholder=\"Search Country\"\r\n          onFilter={filterCountries} />\r\n      </div>\r\n      <ul className=\"countries\" onScroll={handleScroll}>\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardList;\r\n","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardWorldData({ worldData, onSelectCountry }) {\r\n\r\n  const data = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n\r\n  const list = data.map(category => (\r\n    <li className=\"world-detail flex-col\" key={category.key} onClick={() => onSelectCountry()}>\r\n      <span className=\"pseudo-border\"></span>\r\n      <p>{category.title}</p>\r\n      <p>{UtilsService.numberWithCommas(worldData[category.key])}</p>\r\n\r\n      {category.dividBy &&\r\n        <span className=\"wrap-precent\">\r\n          <span className=\"precent\">\r\n            {(worldData[category.key] / worldData[category.dividBy] * 100).toFixed()}%\r\n          </span>\r\n        </span>\r\n      }\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <div className=\"world-dashboard-world-details\">\r\n      <h2 className=\"title\">World</h2>\r\n      <ul className=\"world-details\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardWorldData;\r\n","import React from 'react';\r\n\r\nfunction VirusLogoSVG() {\r\n  return (\r\n    <svg role=\"img\" viewBox=\"0 0 50 50\">\r\n      <path fill=\"currentColor\" d=\"M 25 3 C 12.867715 3 3 12.867715 3 25 C 3 29.006019 4.0814389 32.738815 5.9296875 35.96875 L 3.5839844 35.251953 A 2.0002 2.0002 0 1 0 2.4160156 39.076172 L 12.138672 42.046875 L 13.490234 32.035156 A 2.0002 2.0002 0 0 0 11.550781 29.740234 A 2.0002 2.0002 0 0 0 9.5273438 31.5 L 9.2304688 33.699219 C 7.8172419 31.125736 7 28.181418 7 25 C 7 15.026285 15.026285 7 25 7 L 27 7 L 27 3 L 25 3 z M 31.720703 3.9511719 L 30.160156 7.640625 L 32.009766 8.4199219 L 32.009766 8.4101562 C 33.849766 9.1891562 32.010609 8.4104063 33.849609 9.1914062 L 35.410156 5.5117188 L 31.720703 3.9511719 z M 37.861328 7.953125 L 36.509766 17.964844 A 2.0002 2.0002 0 1 0 40.472656 18.5 L 40.769531 16.300781 C 42.182758 18.874264 43 21.818582 43 25 C 43 34.973715 34.973715 43 25 43 L 23 43 L 23 47 L 25 47 C 37.132285 47 47 37.132285 47 25 C 47 20.993981 45.918561 17.261185 44.070312 14.03125 L 46.416016 14.748047 A 2.0002 2.0002 0 1 0 47.583984 10.923828 L 37.861328 7.953125 z M 16.150391 40.810547 L 14.589844 44.490234 L 16.429688 45.269531 C 18.279688 46.049531 16.43025 45.269828 18.28125 46.048828 L 19.830078 42.359375 L 17.990234 41.580078 L 17.990234 41.589844 L 16.150391 40.810547 z\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default VirusLogoSVG;\r\n","import React, { useState } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport * as DataKeys from '../../../constants/DataKeys';\r\nimport ReplaceSVG from '../svg-icons/ReplaceSVG';\r\nimport Button from '../../elements/Button';\r\n\r\nfunction GraphRows({ countries, onSelectCountry }) {\r\n\r\n  const [rowsAmount, setRowsAmount] = useState(10);\r\n  const [graphBy, setGraphBy] = useState(DataKeys.TODAY_DEATHS);\r\n  const graphDataKey = DataKeys.getDataKeyByKey(graphBy);\r\n\r\n  const top10 = [...countries].sort((b, a) => (a[graphBy] > b[graphBy]) ? 1 : ((b[graphBy] > a[graphBy]) ? -1 : 0))\r\n    .slice(0, rowsAmount);\r\n  // .filter((item, idx) => idx < rowsAmount);\r\n\r\n  const list = top10.map(country => {\r\n    const width = country[graphBy] / top10[0][graphBy] * 100 + '%';\r\n    const backgroundColor = graphDataKey.colorHEX + '80';\r\n    return <li className=\"row\" key={country.alpha2} style={{ width, backgroundColor }}>\r\n      <span className=\"name\" onClick={() => onSelectCountry(country)}>{country.name}</span>\r\n      <span className=\"amount\">&nbsp;{UtilsService.numberWithCommas(country[graphBy])}</span>\r\n    </li>\r\n  })\r\n\r\n  const toggleGraph = () => {\r\n    if (graphBy === DataKeys.TODAY_DEATHS) setGraphBy(DataKeys.DEATHS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.DEATHS_PER_ONE_MILLION) setGraphBy(DataKeys.DEATHS);\r\n    if (graphBy === DataKeys.DEATHS) setGraphBy(DataKeys.TODAY_CASES);\r\n    if (graphBy === DataKeys.TODAY_CASES) setGraphBy(DataKeys.CASES_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.CASES_PER_ONE_MILLION) setGraphBy(DataKeys.CASES);\r\n    if (graphBy === DataKeys.CASES) setGraphBy(DataKeys.TESTS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.TESTS_PER_ONE_MILLION) setGraphBy(DataKeys.CRITICAL);\r\n    if (graphBy === DataKeys.CRITICAL) setGraphBy(DataKeys.RECOVERED);\r\n    if (graphBy === DataKeys.RECOVERED) setGraphBy(DataKeys.ACTIVE);\r\n    if (graphBy === DataKeys.ACTIVE) setGraphBy(DataKeys.TODAY_DEATHS);\r\n  }\r\n\r\n  const diff = 5;\r\n  return (\r\n    <div className=\"graph-rows\">\r\n      <div className=\"wrap-title\" onClick={toggleGraph}>\r\n        <div className=\"wrap-icon-svg\"><ReplaceSVG /></div>\r\n        <h3 className=\"title\">{graphDataKey.title}</h3>\r\n        <div className=\"wrap-icon-svg\" style={{ color: graphDataKey.color }}>{graphDataKey.svgIcon}</div>\r\n      </div>\r\n      <ul className=\"rows\">\r\n        {list}\r\n        <li className=\"flex-evenly\">\r\n          {rowsAmount > diff &&\r\n            <Button text={`− ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount - diff)} />\r\n          }\r\n          {rowsAmount < diff * 10 &&\r\n            <Button text={`+ ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount + diff)} />\r\n          }\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphRows;\r\n","import React from 'react';\r\nimport GraphRows from '../helpers/graphs/GraphRows';\r\nimport CountryDetails from '../helpers/countryDetails';\r\n\r\nfunction WorldDashboardDetails({ countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : worldData;\r\n\r\n  return (\r\n    <div className=\"world-dashboard-details flex-col\">\r\n      <CountryDetails country={selectedCountry}/>\r\n      <GraphRows countries={countries} onSelectCountry={onSelectCountry} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardDetails;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport { WORLD_DASHBOARD } from '../constants/RouterPaths';\r\n\r\nimport WorldDashboardMap from '../cmps/worldDashboard/WorldDashboardMap';\r\nimport WorldDashboardList from '../cmps/worldDashboard/WorldDashboardList';\r\nimport WorldDashboardWorldData from '../cmps/worldDashboard/WorldDashboardWorldData';\r\nimport WorldDashboardDetails from '../cmps/worldDashboard/WorldDashboardDetails';\r\n\r\nfunction WorldDashboard() {\r\n\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!countriesStore) return;\r\n    const { countries, selectedCountryIndex } = countriesStore;\r\n    const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n    const isParamsInUrlWithCountry = params.alpha2 && !isSelectedCountry;\r\n    if (isParamsInUrlWithCountry) {\r\n      const country = countries.find(country => country.alpha2 === params.alpha2);\r\n      dispatch(actions.selectCountry(country));\r\n    }\r\n    const isUrlCmpUnmount = !params.alpha2 && isSelectedCountry;\r\n    if (isUrlCmpUnmount) {\r\n      history.push(`/${WORLD_DASHBOARD}/${countries[selectedCountryIndex].alpha2}`);\r\n    }\r\n  }, [dispatch, countriesStore, params, history]);\r\n\r\n  // TODO: clean code!\r\n  const selectCountry = (country = null) => {\r\n    if (!country && !isSelectedCountry) return;\r\n    const isSameCountry = country && country.alpha2 === selectedCountry.alpha2;\r\n    const alpha2ToPush = country && !isSameCountry ? country.alpha2 : '';\r\n    history.push(`/${WORLD_DASHBOARD}/${alpha2ToPush}`);\r\n    dispatch(actions.selectCountry(country ? country : {}));\r\n  }\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n  const selectedCountry = isSelectedCountry\r\n    ? countriesStore.countries[selectedCountryIndex]\r\n    : countriesStore ? countriesStore.worldData : {};\r\n\r\n  const mapOptionsFunction = {\r\n    onToggleIsCirclesShow: () => dispatch(actions.toggleIsCirclesShow()),\r\n    onToggleIsAutoFocus: () => dispatch(actions.toggleIsAutoFocus()),\r\n    onSetCirclesDataKey: dataKey => dispatch(actions.setCirclesDataKey(dataKey)),\r\n    onToggleIsTooltipShow: () => dispatch(actions.toggleIsTooltipShow()),\r\n    onToggleIsGraphShow: () => dispatch(actions.toggleIsGraphShow()),\r\n  }\r\n\r\n  return (\r\n    <>{countriesStore && settingsStore && <>\r\n      <div className=\"world-dashboard\">\r\n        <div className=\"wrap-worldData-and-list flex-col overflow-hidden\">\r\n          <WorldDashboardWorldData worldData={countriesStore.worldData} onSelectCountry={selectCountry} />\r\n          <WorldDashboardList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        </div>\r\n        <WorldDashboardMap countriesStore={countriesStore} settings={settingsStore.worldMap}\r\n          onSelectCountry={selectCountry} mapOptionsFunction={mapOptionsFunction} />\r\n        <WorldDashboardDetails countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default WorldDashboard;\r\n"],"sourceRoot":""}