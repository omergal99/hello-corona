{"version":3,"sources":["cmps/helpers/mapHelpers/SvgDefsFilterShadow.js","cmps/helpers/FilterInput.js","cmps/helpers/countryDetails/CountryDetailsTitle.js","cmps/helpers/countryDetails/CountryDetailsList.js","cmps/helpers/countryDetails/index.js","cmps/countryView/CountryViewListItem.js","cmps/countryView/CountryViewList.js","cmps/countryView/CountryViewPresentation.js","cmps/countryView/CountryViewDetails.js","cmps/countryView/CountryViewBottom.js","pages/CountryView.js"],"names":["SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","type","slope","x","y","width","floodColor","floodOpacity","in2","operator","FilterInput","list","filterKeys","placeholder","onFilter","useState","filterValue","setFilterValue","className","value","onChange","ev","target","toLowerCase","filteredList","filter","item","some","key","includes","CountryDetailsTitle","country","isWorld","name","countryIcon","autoPlay","loop","muted","playsInline","loading","src","UtilsService","getSrc","alt","title","getImgSrc","alpha2","continent","CountryDetailsList","categoriesToAddIcon","CASES","DEATHS","RECOVERED","ACTIVE","CRITICAL","TESTS","coronaDetails","getCoronaDataKeys","map","category","isWishIcon","numberWithCommas","dividBy","POPULATION","percent","style","color","svgIcon","toFixed","Number","populationDetails","populationData","getDataKeyByKey","CountryDetails","CountryViewListItem","selectedCountry","onSelectCountry","isSelected","onClick","CountryViewList","countriesStore","countries","selectedCountryIndex","filteredCountries","setFilteredCountries","CountryViewPresentation","countryRef","useRef","initStroke","dynamicRatio","setDynamicRatio","viewBox","setViewBox","useEffect","bBox","current","getBBox","abs","Math","max","bBoxX","bBoxY","d","ref","strokeWidth","CountryViewDetails","worldData","CountryViewBottom","r","CountryView","useSelector","state","dispatch","useDispatch","history","useHistory","params","useParams","isSelectedCountry","find","actions","selectCountry","push","COUNTRY_VIEW","alpha2ToPush"],"mappings":"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","file":"static/js/4.91e6432e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <filter id=\"dropshadow\" height=\"130%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n          <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n          <feComponentTransfer>\r\n            <feFuncA type=\"linear\" slope=\"0.5\" />\r\n          </feComponentTransfer>\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <defs>\r\n        <filter id=\"dropshadow-color\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\r\n          <feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offsetBlur\" />\r\n          <feFlood floodColor=\"var(--color2-border)\" floodOpacity=\"0.6\" result=\"offsetColor\" />\r\n          <feComposite in=\"offsetColor\" in2=\"offsetBlur\" operator=\"in\" result=\"offsetBlur\" />\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState } from 'react';\r\n\r\nfunction FilterInput({ list = [], filterKeys = [], placeholder = 'Search',\r\n  onFilter }) {\r\n\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const updateFilterValue = ev => {\r\n    setFilterValue(ev.target.value);\r\n    const value = ev.target.value.toLowerCase();\r\n    if (!value) onFilter(list);\r\n    else {\r\n      const filteredList = list.filter(item => filterKeys.some(key => item[key].toLowerCase().includes(value)));\r\n      onFilter(filteredList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input className=\"filter-input\" type=\"text\" placeholder={placeholder}\r\n      value={filterValue} onChange={updateFilterValue} />\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction CountryDetailsTitle({ country }) {\r\n\r\n  const isWorld = country.name === 'World';\r\n\r\n  const countryIcon = (() => {\r\n    return isWorld\r\n      // ? <img className=\"country-flag\" src={UtilsService.getSrc(`earth.gif`)} alt=\"Earth\" />\r\n      ? <video className=\"country-earth\" autoPlay loop muted playsInline loading=\"lazy\">\r\n        <source src={UtilsService.getSrc(`earth.mp4`)} type=\"video/mp4\" />\r\n      </video>\r\n      : <img className=\"country-flag\" alt=\"Flag\" title={country.name}\r\n        src={UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`)} />\r\n  })()\r\n\r\n  return (\r\n    <div className=\"country-details-title\">\r\n      <div className={`wrap-country-icon ${isWorld ? 'earth' : 'flag'}`}>\r\n        {countryIcon}\r\n      </div>\r\n      <div className=\"wrap-country-title\">\r\n        <h2>{country.name}</h2>\r\n        <span className=\"continent\">{country.continent}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsTitle;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport {\r\n  POPULATION, CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS,\r\n  getCoronaDataKeys, getDataKeyByKey\r\n} from '../../../constants/DataKeys';\r\n\r\nfunction CountryDetailsList({ country }) {\r\n\r\n  const categoriesToAddIcon = [CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS];\r\n  const coronaDetails = getCoronaDataKeys().map(category => {\r\n    const isWishIcon = categoriesToAddIcon.some(key => key === category.key);\r\n    const value = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const dividBy = category.key === CASES ? POPULATION : category.dividBy;\r\n    const percent = country[category.key] / country[dividBy] * 100;\r\n    return <li className=\"country-details-item\" key={category.key} style={{ color: category.color }}>\r\n      <span className=\"title\">\r\n        {category.title}:&nbsp;\r\n        {isWishIcon && <div className=\"wrap-icon-svg\">{category.svgIcon}</div>}\r\n      </span>\r\n      <span className=\"value\" title={value}>{value}</span>\r\n      {dividBy && !!country[category.key] &&\r\n        <span className=\"percent\" title={percent.toFixed(2)}>\r\n          {Number(percent.toFixed(0)) !== 0 ? percent.toFixed(0) : percent.toFixed(2)}\r\n          %\r\n        </span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  const populationDetails = (() => {\r\n    const populationData = getDataKeyByKey(POPULATION);\r\n    const value = UtilsService.numberWithCommas(country[populationData.key]);\r\n    return <li className=\"country-details-item\">\r\n      <span className=\"title\">{populationData.title}:&nbsp;</span>\r\n      <span className=\"value population\" title={value}>{value}</span>\r\n    </li>\r\n  })()\r\n\r\n  return (\r\n    <ul className=\"country-details-list\">\r\n      {populationDetails}\r\n      {coronaDetails}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsList;\r\n","import React from 'react';\r\n\r\nimport CountryDetailsTitle from './CountryDetailsTitle';\r\nimport CountryDetailsList from './CountryDetailsList';\r\n\r\nfunction CountryDetails({ country }) {\r\n\r\n  return (\r\n    <div className=\"country-details flex-col\">\r\n      <CountryDetailsTitle country={country} />\r\n      <CountryDetailsList country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport { CASES, DEATHS, RECOVERED } from '../../constants/DataKeys';\r\nfunction CountryViewListItem({ country, selectedCountry,\r\n  onSelectCountry }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  return (\r\n    <li className=\"wrap-country\">\r\n      <div className={`country ${isSelected}`} onClick={() => onSelectCountry(country)}>\r\n        <div>\r\n          <span>{country.name}</span>\r\n        </div>\r\n        <div>\r\n          <span>Cases: </span>\r\n          <span>{UtilsService.numberWithCommas(country[CASES])}</span>\r\n        </div>\r\n        <div>\r\n          <span>Deaths: </span>\r\n          <span>{UtilsService.numberWithCommas(country[DEATHS])}</span>\r\n        </div>\r\n        <div>\r\n          <span>Recovered: </span>\r\n          <span>{UtilsService.numberWithCommas(country[RECOVERED])}</span>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default CountryViewListItem;\r\n","import React, { useState } from 'react';\r\n\r\nimport CountryViewListItem from './CountryViewListItem';\r\nimport FilterInput from '../helpers/FilterInput';\r\n\r\nfunction CountryViewList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const [filteredCountries, setFilteredCountries] = useState(countries);\r\n\r\n  const list = filteredCountries.map(country => (\r\n    <CountryViewListItem key={country.name} country={country} selectedCountry={selectedCountry}\r\n      onSelectCountry={onSelectCountry} />\r\n  ))\r\n\r\n  return (\r\n    <div className=\"country-view-list flex-col\">\r\n      <div className=\"custom-filter-input\">\r\n        <FilterInput list={countries} filterKeys={['name']} placeholder=\"Search Country\"\r\n          onFilter={setFilteredCountries} />\r\n      </div>\r\n      <ul className=\"countries\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewList;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport SvgDefsFilterShadow from '../helpers/mapHelpers/SvgDefsFilterShadow';\r\n\r\nfunction CountryViewPresentation({ selectedCountry }) {\r\n\r\n  const countryRef = useRef();\r\n\r\n  const initStroke = 200;\r\n  const [dynamicRatio, setDynamicRatio] = useState(initStroke / initStroke);\r\n  const [viewBox, setViewBox] = useState(`0 0 100 100`);\r\n\r\n  useEffect(() => {\r\n    const bBox = countryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    setViewBox(`${bBoxX - 2} ${bBoxY - 2} ${max + 4} ${max + 4}`);\r\n    setDynamicRatio(max / initStroke);\r\n  }, [selectedCountry])\r\n\r\n  return (\r\n    <div className=\"country-view-presentation\" key={selectedCountry.name}>\r\n      <svg className='svg-country-presentation' viewBox={viewBox}\r\n        style={{ filter: 'url(#dropshadow-color)' }}>\r\n        <SvgDefsFilterShadow />\r\n        <path className=\"country-path\" d={selectedCountry.d} ref={countryRef}\r\n          style={{ strokeWidth: `${dynamicRatio}px` }}>\r\n        </path>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewPresentation;\r\n","import React from 'react';\r\nimport CountryDetails from '../helpers/countryDetails';\r\n\r\nfunction CountryViewDetails({ selectedCountry, worldData }) {\r\n\r\n  const country = selectedCountry.alpha2 ? selectedCountry : worldData;\r\n  return (\r\n    <div className=\"country-view-details flex-col\">\r\n      <CountryDetails country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewDetails;\r\n","import React from 'react';\r\n\r\nfunction CountryViewBottom() {\r\n\r\n  return (\r\n    <div className=\"country-view-bottom\">\r\n      <div className=\"wrap-loader-svg\">\r\n        <div className=\"lighter-1 lighter\"></div>\r\n        <div className=\"lighter-2 lighter\"></div>\r\n        <svg className=\"loader-svg\" viewBox=\"0 0 100 100\">\r\n          <g className=\"g-loader\">\r\n            <circle className=\"light-source\" r=\"15%\"/>\r\n            <circle className=\"spiner-1 spiner\" r=\"20%\" />\r\n            <circle className=\"spiner-2 spiner\" r=\"30%\" />\r\n            <circle className=\"spiner-3 spiner\" r=\"40%\" />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewBottom;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport { COUNTRY_VIEW } from '../constants/RouterPaths';\r\n\r\nimport CountryViewList from '../cmps/countryView/CountryViewList';\r\nimport CountryViewPresentation from '../cmps/countryView/CountryViewPresentation';\r\nimport CountryViewDetails from '../cmps/countryView/CountryViewDetails';\r\nimport CountryViewBottom from '../cmps/countryView/CountryViewBottom';\r\n\r\nfunction CountryView() {\r\n\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!countriesStore || !params) return;\r\n    const { countries, selectedCountryIndex } = countriesStore;\r\n    const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n    if (params.alpha2 && !isSelectedCountry) {\r\n      const country = countries.find(country => country.alpha2 === params.alpha2);\r\n      dispatch(actions.selectCountry(country));\r\n    }\r\n    if (!params.alpha2 && isSelectedCountry) {\r\n      history.push(`/${COUNTRY_VIEW}/${countries[selectedCountryIndex].alpha2}`);\r\n    }\r\n  }, [dispatch, countriesStore, params, history]);\r\n\r\n  const selectCountry = country => {\r\n    const alpha2ToPush = country.alpha2 === selectedCountry.alpha2 ? '' : country.alpha2;\r\n    history.push(`/${COUNTRY_VIEW}/${alpha2ToPush}`);\r\n    dispatch(actions.selectCountry(country));\r\n  }\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countriesStore.countries[selectedCountryIndex] : {};\r\n  return (\r\n    <>{countriesStore && <>\r\n      <div className=\"country-view\">\r\n        <CountryViewList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        <CountryViewPresentation selectedCountry={selectedCountry} />\r\n        <CountryViewDetails selectedCountry={selectedCountry} worldData={countriesStore.worldData} />\r\n        <CountryViewBottom />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default CountryView;\r\n"],"sourceRoot":""}