{"version":3,"sources":["cmps/elements/Button.js","cmps/helpers/mapHelpers/SvgDefsFilterShadow.js","cmps/helpers/FilterInput.js","cmps/helpers/countryDetails/CountryDetailsTitle.js","cmps/helpers/countryDetails/CountryDetailsList.js","cmps/helpers/countryDetails/index.js","cmps/worldDashboard/mapUtils/GCircles.js","cmps/worldDashboard/mapUtils/GPaths.js","cmps/worldDashboard/mapUtils/MapTooltip.js","cmps/worldDashboard/mapUtils/SvgCountriesMap.js","cmps/worldDashboard/mapUtils/MapOptions.js","cmps/helpers/graphs/GraphColumnsPreview.js","cmps/helpers/graphs/GraphColumns.js","cmps/worldDashboard/WorldDashboardMap.js","cmps/worldDashboard/WorldDashboardListItem.js","cmps/worldDashboard/WorldDashboardList.js","cmps/worldDashboard/WorldDashboardWorldData.js","cmps/helpers/svg-icons/ReplaceSVG.js","cmps/helpers/graphs/GraphRows.js","cmps/worldDashboard/WorldDashboardDetails.js","pages/WorldDashboard.js"],"names":["Button","type","style","isBoolean","text","toggleText","textCondition","onClick","textIn","className","SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","slope","x","y","width","floodColor","floodOpacity","in2","operator","FilterInput","list","filterKeys","placeholder","onFilter","useState","filterValue","setFilterValue","value","onChange","ev","target","toLowerCase","filteredList","filter","item","some","key","includes","CountryDetailsTitle","country","isWorld","name","countryIcon","autoPlay","loop","muted","playsInline","loading","src","UtilsService","getSrc","alt","title","getImgSrc","alpha2","continent","CountryDetailsList","categoriesToAddIcon","CASES","DEATHS","RECOVERED","ACTIVE","CRITICAL","TESTS","coronaDetails","getCoronaDataKeys","map","category","isWishIcon","numberWithCommas","dividBy","POPULATION","percent","color","svgIcon","toFixed","Number","populationDetails","populationData","getDataKeyByKey","CountryDetails","GCircles","circlesDataKey","countries","dynamicRatio","args","countriesCircles","calcRadius","radius","shortNum","numberToShortString","dataKey","fill","colorHEX","cx","centerPoint","cy","r","fontSize","strokeWidth","initStroke","GPaths","selectedCountry","minMapZoom","didDrag","pathClassName","currPathName","isDragging","initZoom","isAutoFocus","isTooltipShow","onSetViewBox","onSetDynamicRatio","onSetMapView","onSelectCountry","selectedCountryRef","useRef","useEffect","current","bBox","getBBox","abs","Math","max","bBoxX","bBoxY","zoom","countriesPaths","isSelected","classSelected","isSelecting","d","ref","undefined","countriesPathsLabels","countriesLabels","MapTooltip","tooltip","SvgCountriesMap","settings","isCirclesShow","baseMap","svgRef","maxMapZoom","ratioUpdateZoom","minTopSvg","minLeftSvg","initFontSize","viewBox","setViewBox","mapView","setMapView","setDynamicRatio","setDidDrag","setIsDragging","pointerDiff","setPointerDiff","setTooltip","setCurrPathName","handleWheel","useCallback","path","baseVal","svgClassName","updateZoom","copy","deltaY","window","addEventListener","passive","removeEventListener","stopDrag","setTimeout","onScroll","console","log","onWheel","onMouseDown","clientX","clientY","getAttribute","onMouseMove","ratioBySvgHeight","clientHeight","movementX","movementY","top","nativeEvent","offsetY","left","offsetX","onMouseUp","onMouseLeave","MapOptions","onToggleIsCirclesShow","onToggleIsAutoFocus","onSetCirclesDataKey","onToggleIsTooltipShow","circlesDataButtons","getDataKeysByKeys","circle","isActive","GraphColumnsPreview","arr","maxHeight","graphRatio","graphDataType","idx","length","backgroundColor","line","diff","colWidth","calcSlant","sqrt","angle","atan","PI","slant","calcLine","transform","date","GraphColumns","graphRef","setGraphRatio","graphType","setGraphType","graphDataTypes","graphTypesButtons","historyObj","history","timeline","historyArr","Object","keys","clientWidth","WorldDashboardMap","countriesStore","selectedCountryIndex","worldData","WorldDashboardListItem","categoryView","commasNum","numericCode","todayCases","VirusSVG","WorldDashboardList","c","filteredCountries","setFilteredCountries","isFiltered","setIsFiltered","scrollTop","scrollHeight","WorldDashboardWorldData","VirusLogoSVG","role","GraphRows","rowsAmount","setRowsAmount","DataKeys","graphBy","setGraphBy","graphDataKey","top10","sort","b","a","slice","ReplaceSVG","fontWeight","WorldDashboardDetails","WorldDashboard","useSelector","state","settingsStore","dispatch","useDispatch","useHistory","params","useParams","isSelectedCountry","find","actions","selectCountry","push","WORLD_DASHBOARD","isSameCountry","alpha2ToPush","worldMap","toggleIsCirclesShow","toggleIsAutoFocus","setCirclesDataKey","toggleIsTooltipShow"],"mappings":"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","file":"static/js/3.0728cc7c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Button({ type = 'normal', style, isBoolean = false,\r\n  text = '1', toggleText = '2', textCondition = true,\r\n  onClick }) {\r\n\r\n  const textIn = isBoolean ? text : textCondition ? text : toggleText;\r\n  return (\r\n    <button className={`custom-buttom ${type}`} style={style}\r\n      onClick={onClick}>\r\n      {isBoolean && <span className={`toggle-light ${textCondition ? 'on' : 'off'}`}></span>}\r\n      <span>{textIn}</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <filter id=\"dropshadow\" height=\"130%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n          <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n          <feComponentTransfer>\r\n            <feFuncA type=\"linear\" slope=\"0.5\" />\r\n          </feComponentTransfer>\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <defs>\r\n        <filter id=\"dropshadow-color\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\r\n          <feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offsetBlur\" />\r\n          <feFlood floodColor=\"var(--color2-border)\" floodOpacity=\"0.6\" result=\"offsetColor\" />\r\n          <feComposite in=\"offsetColor\" in2=\"offsetBlur\" operator=\"in\" result=\"offsetBlur\" />\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState } from 'react';\r\n\r\nfunction FilterInput({ list = [], filterKeys = [], placeholder = 'Search',\r\n  onFilter }) {\r\n\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const updateFilterValue = ev => {\r\n    setFilterValue(ev.target.value);\r\n    const value = ev.target.value.toLowerCase();\r\n    if (!value) onFilter(list);\r\n    else {\r\n      const filteredList = list.filter(item => filterKeys.some(key => item[key].toLowerCase().includes(value)));\r\n      onFilter(filteredList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input className=\"filter-input\" type=\"text\" placeholder={placeholder}\r\n      value={filterValue} onChange={updateFilterValue} />\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction CountryDetailsTitle({ country }) {\r\n\r\n  const isWorld = country.name === 'World';\r\n\r\n  const countryIcon = (() => {\r\n    return isWorld\r\n      // ? <img className=\"country-flag\" src={UtilsService.getSrc(`earth.gif`)} alt=\"Earth\" />\r\n      ? <video className=\"country-earth\" autoPlay loop muted playsInline loading=\"lazy\">\r\n        <source src={UtilsService.getSrc(`earth.mp4`)} type=\"video/mp4\" />\r\n      </video>\r\n      : <img className=\"country-flag\" alt=\"Flag\" title={country.name}\r\n        src={UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`)} />\r\n  })()\r\n\r\n  return (\r\n    <div className=\"country-details-title\">\r\n      <div className={`wrap-country-icon ${isWorld ? 'earth' : 'flag'}`}>\r\n        {countryIcon}\r\n      </div>\r\n      <div className=\"wrap-country-title\">\r\n        <h2>{country.name}</h2>\r\n        <span className=\"continent\">{country.continent}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsTitle;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport {\r\n  POPULATION, CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS,\r\n  getCoronaDataKeys, getDataKeyByKey\r\n} from '../../../constants/DataKeys';\r\n\r\nfunction CountryDetailsList({ country }) {\r\n\r\n  const categoriesToAddIcon = [CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS];\r\n  const coronaDetails = getCoronaDataKeys().map(category => {\r\n    const isWishIcon = categoriesToAddIcon.some(key => key === category.key);\r\n    const value = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const dividBy = category.key === CASES ? POPULATION : category.dividBy;\r\n    const percent = country[category.key] / country[dividBy] * 100;\r\n    return <li className=\"country-details-item\" key={category.key} style={{ color: category.color }}>\r\n      <span className=\"title\">\r\n        {category.title}:&nbsp;\r\n        {isWishIcon && <div className=\"wrap-icon-svg\">{category.svgIcon}</div>}\r\n      </span>\r\n      <span className=\"value\" title={value}>{value}</span>\r\n      {dividBy && !!country[category.key] &&\r\n        <span className=\"percent\" title={percent.toFixed(2)}>\r\n          {Number(percent.toFixed(0)) !== 0 ? percent.toFixed(0) : percent.toFixed(2)}\r\n          %\r\n        </span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  const populationDetails = (() => {\r\n    const populationData = getDataKeyByKey(POPULATION);\r\n    const value = UtilsService.numberWithCommas(country[populationData.key]);\r\n    return <li className=\"country-details-item\">\r\n      <span className=\"title\">{populationData.title}:&nbsp;</span>\r\n      <span className=\"value population\" title={value}>{value}</span>\r\n    </li>\r\n  })()\r\n\r\n  return (\r\n    <ul className=\"country-details-list\">\r\n      {populationDetails}\r\n      {coronaDetails}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsList;\r\n","import React from 'react';\r\n\r\nimport CountryDetailsTitle from './CountryDetailsTitle';\r\nimport CountryDetailsList from './CountryDetailsList';\r\n\r\nfunction CountryDetails({ country }) {\r\n\r\n  return (\r\n    <div className=\"country-details flex-col\">\r\n      <CountryDetailsTitle country={country} />\r\n      <CountryDetailsList country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport { CASES, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nfunction GCircles({ circlesDataKey = CASES, countries, dynamicRatio, args }) {\r\n\r\n  const countriesCircles = countries.map(country => {\r\n    const calcRadius = (country[circlesDataKey] / 1000).toFixed();\r\n    const radius = calcRadius > 15 ? 18 : calcRadius > 5 ? 14 : calcRadius > 1 ? 10 : 0;\r\n    if (!radius) return '';\r\n    const shortNum = UtilsService.numberToShortString(country[circlesDataKey]);\r\n    const dataKey = getDataKeyByKey(circlesDataKey);\r\n    const fill = `${dataKey.colorHEX}1a`;\r\n    return <g key={country.id}>\r\n      <circle className=\"country-circle-data\" name={country.name} style={{ fill }}\r\n        // style={{ cx: country.centerPoint.x, cy: country.centerPoint.y, r: radius * dynamicRatio }}\r\n        cx={country.centerPoint.x} cy={country.centerPoint.y} r={radius * dynamicRatio}\r\n      />\r\n      <text className=\"circle-text\" x={country.centerPoint.x} y={country.centerPoint.y}\r\n        dy={`${radius * dynamicRatio / 3}px`} fontSize={`${radius * 0.85 * dynamicRatio}px`}>\r\n        {shortNum}\r\n      </text>\r\n    </g>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-circles\" style={{ strokeWidth: args.initStroke * dynamicRatio }}>\r\n      {countriesCircles}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GCircles;","import React, { useEffect, useRef } from \"react\";\r\nimport countriesLabels from \"../../../services/data/countriesLabels.json\";\r\n\r\nfunction GPaths({ countries, selectedCountry, dynamicRatio, args, minMapZoom, didDrag,\r\n  pathClassName, currPathName, isDragging, initZoom, isAutoFocus, isTooltipShow,\r\n  onSetViewBox, onSetDynamicRatio, onSetMapView, onSelectCountry }) {\r\n\r\n  const selectedCountryRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!selectedCountryRef.current || !isAutoFocus) return;\r\n    const bBox = selectedCountryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    const x = bBoxX - minMapZoom / 2, y = bBoxY - minMapZoom / 2, zoom = max + minMapZoom;\r\n    onSetViewBox(`${x} ${y} ${zoom} ${zoom}`);\r\n    onSetDynamicRatio(zoom / initZoom);\r\n    onSetMapView({ zoom, x, y });\r\n  }, [selectedCountry, onSetViewBox, onSetDynamicRatio, onSetMapView, initZoom, minMapZoom, isAutoFocus])\r\n\r\n  const countriesPaths = countries.map(country => {\r\n    const isSelected = country.name === selectedCountry.name;\r\n    const classSelected = isSelected ? 'selected' : '';\r\n    const isSelecting = isDragging && !didDrag && currPathName === country.name ? 'selecting' : '';\r\n    return <path className={`${pathClassName} ${classSelected} ${isSelecting}`} key={country.id}\r\n      alpha2={country.alpha2} name={country.name} d={country.d}\r\n      onClick={() => !didDrag && onSelectCountry(country)}\r\n      ref={isSelected ? selectedCountryRef : undefined}>\r\n      {!isTooltipShow && <title>{country.name}</title>}\r\n    </path>\r\n  })\r\n\r\n  const countriesPathsLabels = countriesLabels.map(country => {\r\n    return <path className=\"country-path-label\" d={country.d} key={country.id}></path>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-paths\" style={{ strokeWidth: args.initStroke * dynamicRatio, filter: 'url(#dropshadow)' }}>\r\n      {countriesPaths}\r\n      {countriesPathsLabels}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GPaths;","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nfunction MapTooltip({ tooltip }) {\r\n\r\n  return (\r\n    <div className=\"map-tooltip\" style={tooltip.style}>\r\n      <img className=\"tooltip-img\" alt=\"Flag\"\r\n        src={UtilsService.getImgSrc(`flags/${tooltip.alpha2.toLowerCase()}.png`)} />\r\n      <span className=\"tooltip-title\">{tooltip.name}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapTooltip;","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\n\r\nimport SvgDefsFilterShadow from '../../helpers/mapHelpers/SvgDefsFilterShadow';\r\nimport GCircles from './GCircles';\r\nimport GPaths from './GPaths';\r\nimport MapTooltip from './MapTooltip';\r\n\r\nfunction SvgCountriesMap({ countries, selectedCountry,\r\n  settings: { isCirclesShow, circlesDataKey, isAutoFocus, isTooltipShow },\r\n  onSelectCountry}) {\r\n\r\n  const initZoom = 554;\r\n  const baseMap = { width: 954, height: 514 };\r\n\r\n  const svgRef = useRef(initZoom);\r\n\r\n  const args = {\r\n    minMapZoom: 30, maxMapZoom: 1100, ratioUpdateZoom: 0.15,\r\n    minTopSvg: (baseMap.height - initZoom) / 2, minLeftSvg: (baseMap.width - initZoom) / 2,\r\n    initFontSize: initZoom / 30, initStroke: initZoom / 1000\r\n  };\r\n\r\n  const [viewBox, setViewBox] = useState(`${args.minLeftSvg} ${args.minTopSvg} ${initZoom} ${initZoom}`);\r\n  const [mapView, setMapView] = useState({ zoom: initZoom, x: args.minLeftSvg, y: args.minTopSvg });\r\n  const [dynamicRatio, setDynamicRatio] = useState(1);\r\n\r\n  const [didDrag, setDidDrag] = useState(false);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [pointerDiff, setPointerDiff] = useState({ x: 1, y: 1 });\r\n  const [tooltip, setTooltip] = useState(null);\r\n\r\n  const [currPathName, setCurrPathName] = useState(null);\r\n\r\n  const handleWheel = useCallback(ev => {\r\n    const isMouseOnSvgMap = ev.path && ev.path.some(path => path.className && path.className.baseVal\r\n      && path.className.baseVal.includes(svgClassName));\r\n    if (!isMouseOnSvgMap) return;\r\n    const updateZoom = mapView.zoom * args.ratioUpdateZoom;\r\n    const copy = mapView;\r\n    if (ev.deltaY > 0) {\r\n      if (mapView.zoom + updateZoom + args.minMapZoom < args.maxMapZoom) {\r\n        copy.zoom = copy.zoom + updateZoom;\r\n        copy.x = copy.x - updateZoom / 2;\r\n        copy.y = copy.y - updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    } else {\r\n      if (mapView.zoom - updateZoom - args.minMapZoom > 0) {\r\n        copy.zoom = copy.zoom - updateZoom;\r\n        copy.x = copy.x + updateZoom / 2;\r\n        copy.y = copy.y + updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    }\r\n    setDynamicRatio(mapView.zoom / initZoom);\r\n    setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n  }, [mapView, args]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n    return () => window.removeEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n  }, [handleWheel])\r\n\r\n  const startDrag = ev => {\r\n    setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n    setIsDragging(true);\r\n    setCurrPathName(ev.target.getAttribute('name'));\r\n  }\r\n  const handleMouseMove = ev => {\r\n    if (isDragging) {\r\n      const ratioBySvgHeight = initZoom / svgRef.current.clientHeight;\r\n      const x = mapView.x - (ev.clientX - pointerDiff.x) * dynamicRatio * ratioBySvgHeight;\r\n      const y = mapView.y - (ev.clientY - pointerDiff.y) * dynamicRatio * ratioBySvgHeight;\r\n      setMapView({ ...mapView, x, y });\r\n      setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n      setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n      (ev.movementX !== 0 || ev.movementY !== 0) && setDidDrag(true);\r\n    }\r\n    if (isTooltipShow) {\r\n      if (ev.target.getAttribute('class').includes(pathClassName)) {\r\n        setTooltip({\r\n          name: ev.target.getAttribute('name'),\r\n          alpha2: ev.target.getAttribute('alpha2'),\r\n          style: { top: ev.nativeEvent.offsetY - 50, left: ev.nativeEvent.offsetX + 25 }\r\n        });\r\n      } else {\r\n        setTooltip(null);\r\n      }\r\n    }\r\n  }\r\n  const stopDrag = () => {\r\n    setIsDragging(false);\r\n    setTimeout(() => setDidDrag(false), 0);\r\n  }\r\n  const handleMouseLeave = () => {\r\n    stopDrag();\r\n    setTooltip(null);\r\n  }\r\n\r\n  const handleScroll = ev => {\r\n    console.log(ev);\r\n  }\r\n\r\n  const pathClassName = 'country-path';\r\n  const svgClassName = 'svg-map';\r\n\r\n  return (\r\n    <>\r\n      <svg className={svgClassName} viewBox={viewBox} ref={svgRef}\r\n        onScroll={handleScroll} onWheel={handleWheel}\r\n        onMouseDown={startDrag} onMouseMove={handleMouseMove} onMouseUp={stopDrag} onMouseLeave={handleMouseLeave}>\r\n        <SvgDefsFilterShadow />\r\n        <GPaths countries={countries} selectedCountry={selectedCountry} dynamicRatio={dynamicRatio} args={args}\r\n          currPathName={currPathName} isDragging={isDragging} pathClassName={pathClassName} didDrag={didDrag}\r\n          initZoom={initZoom} minMapZoom={args.minMapZoom} isAutoFocus={isAutoFocus} isTooltipShow={isTooltipShow}\r\n          onSetViewBox={setViewBox} onSetDynamicRatio={setDynamicRatio} onSetMapView={setMapView}\r\n          onSelectCountry={onSelectCountry} />\r\n        {isCirclesShow &&\r\n          <GCircles circlesDataKey={circlesDataKey} countries={countries} dynamicRatio={dynamicRatio} args={args} />\r\n        }\r\n      </svg>\r\n\r\n      {isTooltipShow && tooltip &&\r\n        <MapTooltip tooltip={tooltip} />\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgCountriesMap;","import React from \"react\";\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, TESTS, getDataKeysByKeys } from '../../../constants/DataKeys';\r\n\r\nfunction MapOptions({ settings: { isCirclesShow, isAutoFocus, circlesDataKey = CASES, isTooltipShow },\r\n  onToggleIsCirclesShow, onToggleIsAutoFocus, onSetCirclesDataKey, onToggleIsTooltipShow }) {\r\n\r\n  const circleClicked = key => {\r\n    if (circlesDataKey !== key) onSetCirclesDataKey(key);\r\n  }\r\n\r\n  const circlesData = getDataKeysByKeys([CASES, DEATHS, RECOVERED, TESTS]);\r\n\r\n  const circlesDataButtons = circlesData.map(circle => {\r\n    const isActive = circlesDataKey === circle.key;\r\n    return <Button key={circle.key} text={circle.title} type={`${circle.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }}\r\n      onClick={() => circleClicked(circle.key)} />\r\n  })\r\n\r\n  return (\r\n    <div className=\"map-options\">\r\n\r\n      <div className=\"main-options\">\r\n        <Button text=\"Circles\" textCondition={isCirclesShow} isBoolean={true}\r\n          onClick={onToggleIsCirclesShow} />\r\n        <Button text=\"Auto Focus\" textCondition={isAutoFocus} isBoolean={true}\r\n          onClick={onToggleIsAutoFocus} />\r\n        <Button text=\"Tooltip\" textCondition={isTooltipShow} isBoolean={true}\r\n          onClick={onToggleIsTooltipShow} />\r\n      </div>\r\n\r\n      {isCirclesShow &&\r\n        <div className=\"circles-options\">\r\n          {circlesDataButtons}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapOptions;","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction GraphColumnsPreview({ arr, maxHeight, graphRatio, graphDataType }) {\r\n\r\n  const calcLine = (item, idx) => {\r\n    const diff = (arr[idx + 1].value - item.value) / maxHeight * 100;\r\n    const colWidth = 1 / arr.length * 100 * graphRatio;\r\n    const calcSlant = Math.sqrt(diff * diff + colWidth * colWidth);\r\n    const tanAngle = Math.atan(diff / colWidth) * 180 / Math.PI;\r\n    return { angle: tanAngle, slant: calcSlant };\r\n  }\r\n\r\n  const list = arr.map((item, idx) => {\r\n    const width = 1 / arr.length * 100 + '%';\r\n    const height = item.value / maxHeight * 100 + '%';\r\n    const backgroundColor = graphDataType.colorHEX;\r\n    const line = arr[idx + 1] ? calcLine(item, idx) : 0;\r\n    const style = {\r\n      top: `-${line.slant * 2}px`,\r\n      transform: `rotate(${line.angle * -1}deg)`\r\n    }\r\n    return <li className=\"column\" key={item.date} style={{ width }}>\r\n      <div className=\"column-percent\" style={{ height, backgroundColor }}>\r\n        <div className=\"wrap-value\">\r\n          <span className=\"value\">{UtilsService.numberWithCommas(item.value)}</span>\r\n        </div>\r\n        {arr[idx + 1] && <span className=\"line\" style={style}></span>}\r\n      </div>\r\n    </li>\r\n  })\r\n\r\n  return (\r\n    <ul className=\"columns\">\r\n      {list}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default GraphColumnsPreview;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nimport GraphColumnsPreview from './GraphColumnsPreview';\r\n\r\nfunction GraphColumns({ selectedCountry }) {\r\n\r\n  const graphRef = useRef();\r\n  const [graphRatio, setGraphRatio] = useState();\r\n  const [graphType, setGraphType] = useState(CASES);\r\n\r\n  const typeClicked = key => {\r\n    if (graphType !== key) setGraphType(key);\r\n  }\r\n\r\n  const graphDataTypes = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n  const graphDataType = graphType === CASES\r\n    ? { ...getDataKeyByKey(graphType), color: 'teal', colorHEX: '#008080' }\r\n    : getDataKeyByKey(graphType);\r\n\r\n  const graphTypesButtons = graphDataTypes.map(type => {\r\n    const isActive = graphType === type.key;\r\n    return <Button key={type.key} text={type.title} type={`${type.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }} onClick={() => typeClicked(type.key)} />\r\n  })\r\n\r\n  const historyObj = selectedCountry.history ? selectedCountry.history.timeline[graphType] : {};\r\n  const historyArr = Object.keys(historyObj).map(key => ({ date: key, value: historyObj[key] }));\r\n\r\n  const maxHeight = historyArr.length ? historyArr[historyArr.length - 1].value * 1.05 : 0;\r\n\r\n  useEffect(() => {\r\n    if (graphRef.current && !graphRatio) {\r\n      setGraphRatio(graphRef.current.clientWidth / graphRef.current.clientHeight);\r\n    }\r\n  }, [graphRef, graphRatio])\r\n\r\n  return (\r\n    <div className=\"graph-columns\" ref={graphRef}>\r\n      <div className=\"graph-options\">\r\n        <div className=\"graph-text\">\r\n          <p>\r\n            <span className=\"text\">{`From ${historyArr[0].date} To ${historyArr[historyArr.length - 1].date}`}</span>\r\n          </p>\r\n        </div>\r\n        <div className=\"buttons-options flex-center\">\r\n          {graphTypesButtons}\r\n        </div>\r\n      </div>\r\n      \r\n      {graphRef && graphRef.current &&\r\n        <GraphColumnsPreview arr={historyArr} maxHeight={maxHeight} graphRatio={graphRatio}\r\n          graphDataType={graphDataType} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphColumns;\r\n// export default React.memo(GraphColumns);\r\n\r\n","import React from \"react\";\r\n\r\nimport SvgCountriesMap from './mapUtils/SvgCountriesMap';\r\nimport MapOptions from './mapUtils/MapOptions';\r\nimport GraphColumns from '../helpers/graphs/GraphColumns';\r\n\r\nfunction WorldDashboardMap({ settings,\r\n  countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry, onToggleIsCirclesShow, onToggleIsAutoFocus, onSetCirclesDataKey, onToggleIsTooltipShow }) {\r\n\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countries[selectedCountryIndex] : worldData;\r\n\r\n  return (\r\n    <div className=\"world-dashboard-map\">\r\n      <SvgCountriesMap countries={countries} settings={settings} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      <MapOptions settings={settings}\r\n        onToggleIsCirclesShow={onToggleIsCirclesShow} onToggleIsAutoFocus={onToggleIsAutoFocus}\r\n        onSetCirclesDataKey={onSetCirclesDataKey} onToggleIsTooltipShow={onToggleIsTooltipShow} />\r\n      {selectedCountry.history &&\r\n        <div className=\"wrap-graph-columns\">\r\n          <GraphColumns selectedCountry={selectedCountry} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardMap;","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport VirusSVG from '../helpers/svg-icons/VirusSVG';\r\nimport { CASES, DEATHS, RECOVERED, CRITICAL, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardListItem({ country, idx, selectedCountry, onSelectCountry }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  const src = UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`);\r\n\r\n  const caterogies = getDataKeysByKeys([CASES, DEATHS, RECOVERED, CRITICAL]);\r\n  \r\n  const categoryView = caterogies.map(category => {\r\n    const shortNum = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const commasNum = UtilsService.numberWithCommas(country[category.key]);\r\n    return <div className=\"category flex-col\" key={category.key}\r\n      title={`${commasNum} ${category.title}`}>\r\n      <span className=\"title\">{category.title}</span>\r\n      <span className=\"value\">{shortNum}</span>\r\n    </div>\r\n  })\r\n\r\n  return (\r\n    <li className={`country ${isSelected}`} onClick={() => onSelectCountry(country)}>\r\n      <span className=\"numeric-code\" title=\"Numeric Code\">N-C {country.numericCode}</span>\r\n\r\n      <div className=\"top-section\">\r\n        <div className=\"wrap-country-flag\">\r\n          <img className=\"country-flag\" src={src} alt=\"Flag\" title={country.name} />\r\n        </div>\r\n        <div className=\"wrap-country-status\">\r\n          <h3 className=\"country-name\">{country.name}</h3>\r\n          <div className=\"status-details\">\r\n            <span className=\"rank\" title={`Rank ${idx + 1}`}>\r\n              <span className=\"rank-icon\">❱❱</span>\r\n              {idx + 1}\r\n            </span>\r\n            <div className=\"cases\" title={`Today Cases ${UtilsService.numberWithCommas(country.todayCases)}`}>\r\n              <div className=\"wrap-icon-svg\"><VirusSVG /></div>\r\n              <span className=\"cases-value\">+{UtilsService.numberWithCommas(country.todayCases)}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-section\">\r\n        {categoryView}\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardListItem;\r\n","import React, { useState } from 'react';\r\nimport FilterInput from '../helpers/FilterInput';\r\nimport WorldDashboardListItem from './WorldDashboardListItem';\r\n\r\nfunction WorldDashboardList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const [filteredCountries, setFilteredCountries] = useState(countries.filter((c, idx) => idx < 40));\r\n  const [isFiltered, setIsFiltered] = useState(false);\r\n\r\n  const list = filteredCountries.map((country, idx) => {\r\n    return <WorldDashboardListItem key={country.id} country={country} idx={idx}\r\n      selectedCountry={selectedCountry}\r\n      onSelectCountry={onSelectCountry} />\r\n  })\r\n\r\n  const handleScroll = ev => {\r\n    if (isFiltered) return;\r\n    const scrollEnd = ev.target.scrollTop + 100 >= ev.target.scrollHeight - ev.target.clientHeight;\r\n    if (scrollEnd) setFilteredCountries(countries);\r\n  }\r\n\r\n  const filterCountries = filteredList => {\r\n    setFilteredCountries(filteredList);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"world-dashboard-list flex-col\">\r\n      <div className=\"custom-filter-input\">\r\n        <FilterInput list={countries} filterKeys={['name']} placeholder=\"Search Country\"\r\n          onFilter={filterCountries} />\r\n      </div>\r\n      <ul className=\"countries\" onScroll={handleScroll}>\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardList;\r\n","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardWorldData({ worldData, onSelectCountry }) {\r\n\r\n  const data = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n\r\n  const list = data.map(category => (\r\n    <li className=\"world-detail flex-col\" key={category.key} onClick={() => onSelectCountry()}>\r\n      <span className=\"pseudo-border\"></span>\r\n      <p>{category.title}</p>\r\n      <p>{UtilsService.numberWithCommas(worldData[category.key])}</p>\r\n\r\n      {category.dividBy &&\r\n        <span className=\"wrap-precent\">\r\n          <span className=\"precent\">\r\n            {(worldData[category.key] / worldData[category.dividBy] * 100).toFixed()}%\r\n          </span>\r\n        </span>\r\n      }\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <div className=\"world-dashboard-world-details\">\r\n      <h2 className=\"title\">World</h2>\r\n      <ul className=\"world-details\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardWorldData;\r\n","import React from 'react';\r\n\r\nfunction VirusLogoSVG() {\r\n  return (\r\n    <svg role=\"img\" viewBox=\"0 0 50 50\">\r\n      <path fill=\"currentColor\" d=\"M 25 3 C 12.867715 3 3 12.867715 3 25 C 3 29.006019 4.0814389 32.738815 5.9296875 35.96875 L 3.5839844 35.251953 A 2.0002 2.0002 0 1 0 2.4160156 39.076172 L 12.138672 42.046875 L 13.490234 32.035156 A 2.0002 2.0002 0 0 0 11.550781 29.740234 A 2.0002 2.0002 0 0 0 9.5273438 31.5 L 9.2304688 33.699219 C 7.8172419 31.125736 7 28.181418 7 25 C 7 15.026285 15.026285 7 25 7 L 27 7 L 27 3 L 25 3 z M 31.720703 3.9511719 L 30.160156 7.640625 L 32.009766 8.4199219 L 32.009766 8.4101562 C 33.849766 9.1891562 32.010609 8.4104063 33.849609 9.1914062 L 35.410156 5.5117188 L 31.720703 3.9511719 z M 37.861328 7.953125 L 36.509766 17.964844 A 2.0002 2.0002 0 1 0 40.472656 18.5 L 40.769531 16.300781 C 42.182758 18.874264 43 21.818582 43 25 C 43 34.973715 34.973715 43 25 43 L 23 43 L 23 47 L 25 47 C 37.132285 47 47 37.132285 47 25 C 47 20.993981 45.918561 17.261185 44.070312 14.03125 L 46.416016 14.748047 A 2.0002 2.0002 0 1 0 47.583984 10.923828 L 37.861328 7.953125 z M 16.150391 40.810547 L 14.589844 44.490234 L 16.429688 45.269531 C 18.279688 46.049531 16.43025 45.269828 18.28125 46.048828 L 19.830078 42.359375 L 17.990234 41.580078 L 17.990234 41.589844 L 16.150391 40.810547 z\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default VirusLogoSVG;\r\n","import React, { useState } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport * as DataKeys from '../../../constants/DataKeys';\r\nimport ReplaceSVG from '../svg-icons/ReplaceSVG';\r\nimport Button from '../../elements/Button';\r\n\r\nfunction GraphRows({ countries, onSelectCountry }) {\r\n\r\n  const [rowsAmount, setRowsAmount] = useState(10);\r\n  const [graphBy, setGraphBy] = useState(DataKeys.TODAY_DEATHS);\r\n  const graphDataKey = DataKeys.getDataKeyByKey(graphBy);\r\n\r\n  const top10 = [...countries].sort((b, a) => (a[graphBy] > b[graphBy]) ? 1 : ((b[graphBy] > a[graphBy]) ? -1 : 0))\r\n    .slice(0, rowsAmount);\r\n  // .filter((item, idx) => idx < rowsAmount);\r\n\r\n  const list = top10.map(country => {\r\n    const width = country[graphBy] / top10[0][graphBy] * 100 + '%';\r\n    const backgroundColor = graphDataKey.colorHEX + '80';\r\n    return <li className=\"row\" key={country.alpha2} style={{ width, backgroundColor }}>\r\n      <span className=\"name\" onClick={() => onSelectCountry(country)}>{country.name}</span>\r\n      <span className=\"amount\">&nbsp;{UtilsService.numberWithCommas(country[graphBy])}</span>\r\n    </li>\r\n  })\r\n\r\n  const toggleGraph = () => {\r\n    if (graphBy === DataKeys.TODAY_DEATHS) setGraphBy(DataKeys.DEATHS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.DEATHS_PER_ONE_MILLION) setGraphBy(DataKeys.DEATHS);\r\n    if (graphBy === DataKeys.DEATHS) setGraphBy(DataKeys.TODAY_CASES);\r\n    if (graphBy === DataKeys.TODAY_CASES) setGraphBy(DataKeys.CASES_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.CASES_PER_ONE_MILLION) setGraphBy(DataKeys.CASES);\r\n    if (graphBy === DataKeys.CASES) setGraphBy(DataKeys.TESTS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.TESTS_PER_ONE_MILLION) setGraphBy(DataKeys.CRITICAL);\r\n    if (graphBy === DataKeys.CRITICAL) setGraphBy(DataKeys.RECOVERED);\r\n    if (graphBy === DataKeys.RECOVERED) setGraphBy(DataKeys.ACTIVE);\r\n    if (graphBy === DataKeys.ACTIVE) setGraphBy(DataKeys.TODAY_DEATHS);\r\n  }\r\n\r\n  const diff = 5;\r\n  return (\r\n    <div className=\"graph-rows\">\r\n      <div className=\"wrap-title\" onClick={toggleGraph}>\r\n        <div className=\"wrap-icon-svg\"><ReplaceSVG /></div>\r\n        <h3 className=\"title\">{graphDataKey.title}</h3>\r\n        <div className=\"wrap-icon-svg\" style={{ color: graphDataKey.color }}>{graphDataKey.svgIcon}</div>\r\n      </div>\r\n      <ul className=\"rows\">\r\n        {list}\r\n        <li className=\"flex-evenly\">\r\n          {rowsAmount > diff &&\r\n            <Button text={`− ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount - diff)} />\r\n          }\r\n          {rowsAmount < diff * 10 &&\r\n            <Button text={`+ ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount + diff)} />\r\n          }\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphRows;\r\n","import React from 'react';\r\nimport GraphRows from '../helpers/graphs/GraphRows';\r\nimport CountryDetails from '../helpers/countryDetails';\r\n\r\nfunction WorldDashboardDetails({ countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : worldData;\r\n\r\n  return (\r\n    <div className=\"world-dashboard-details flex-col\">\r\n      <CountryDetails country={selectedCountry}/>\r\n      <GraphRows countries={countries} onSelectCountry={onSelectCountry} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardDetails;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport { WORLD_DASHBOARD } from '../constants/RouterPaths';\r\n\r\nimport WorldDashboardMap from '../cmps/worldDashboard/WorldDashboardMap';\r\nimport WorldDashboardList from '../cmps/worldDashboard/WorldDashboardList';\r\nimport WorldDashboardWorldData from '../cmps/worldDashboard/WorldDashboardWorldData';\r\nimport WorldDashboardDetails from '../cmps/worldDashboard/WorldDashboardDetails';\r\n\r\nfunction WorldDashboard() {\r\n\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!countriesStore) return;\r\n    const { countries, selectedCountryIndex } = countriesStore;\r\n    const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n    const isParamsInUrlWithCountry = params.alpha2 && !isSelectedCountry;\r\n    if (isParamsInUrlWithCountry) {\r\n      const country = countries.find(country => country.alpha2 === params.alpha2);\r\n      dispatch(actions.selectCountry(country));\r\n    }\r\n    const isUrlCmpUnmount = !params.alpha2 && isSelectedCountry;\r\n    if (isUrlCmpUnmount) {\r\n      history.push(`/${WORLD_DASHBOARD}/${countries[selectedCountryIndex].alpha2}`);\r\n    }\r\n  }, [dispatch, countriesStore, params, history]);\r\n\r\n  // TODO: clean code!\r\n  const selectCountry = (country = null) => {\r\n    if (!country && !isSelectedCountry) return;\r\n    const isSameCountry = country && country.alpha2 === selectedCountry.alpha2;\r\n    const alpha2ToPush = country && !isSameCountry ? country.alpha2 : '';\r\n    history.push(`/${WORLD_DASHBOARD}/${alpha2ToPush}`);\r\n    dispatch(actions.selectCountry(country ? country : {}));\r\n  }\r\n\r\n  const toggleIsCirclesShow = () => dispatch(actions.toggleIsCirclesShow());\r\n  const toggleIsAutoFocus = () => dispatch(actions.toggleIsAutoFocus());\r\n  const setCirclesDataKey = dataKey => dispatch(actions.setCirclesDataKey(dataKey));\r\n  const toggleIsTooltipShow = () => dispatch(actions.toggleIsTooltipShow());\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n  const selectedCountry = isSelectedCountry\r\n    ? countriesStore.countries[selectedCountryIndex]\r\n    : countriesStore ? countriesStore.worldData : {};\r\n\r\n  return (\r\n    <>{countriesStore && settingsStore && <>\r\n      <div className=\"world-dashboard\">\r\n        <div className=\"wrap-worldData-and-list flex-col overflow-hidden\">\r\n          <WorldDashboardWorldData worldData={countriesStore.worldData} onSelectCountry={selectCountry} />\r\n          <WorldDashboardList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        </div>\r\n        <WorldDashboardMap countriesStore={countriesStore} settings={settingsStore.worldMap}\r\n          onSelectCountry={selectCountry} onToggleIsCirclesShow={toggleIsCirclesShow}\r\n          onToggleIsAutoFocus={toggleIsAutoFocus} onSetCirclesDataKey={setCirclesDataKey}\r\n          onToggleIsTooltipShow={toggleIsTooltipShow} />\r\n        <WorldDashboardDetails countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default WorldDashboard;\r\n"],"sourceRoot":""}