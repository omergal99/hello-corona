{"version":3,"sources":["pages/Graphs.js"],"names":["Graphs","graphRef","useRef","countriesStore","useSelector","state","selectedCountryIndex","selectedCountry","countries","worldData","historyObj","history","timeline","cases","arr","Object","keys","map","key","date","value","maxHeight","length","calcLine","useCallback","item","idx","diff","colWidth","current","clientWidth","clientHeight","calcSlant","Math","sqrt","angle","atan","PI","slant","createList","width","height","line","style","top","transform","className","UtilsService","numberWithCommas","useState","list","setList","useEffect","ref"],"mappings":"uKA+FeA,UA3Ff,WAEE,IAiCMC,EAAWC,mBACXC,EAAiBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,kBAE5CG,EAAuBH,GAAkBA,EAAeG,qBACxDC,EAAkBD,GAAiD,IAAzBA,EAC5CH,EAAeK,UAAUF,GACzBH,EAAiBA,EAAeM,UAAY,GAE1CC,EAAaH,EAAgBI,QAAUJ,EAAgBI,QAAQC,SAASC,MAzClE,CACV,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,SAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,IACV,SAAU,IACV,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,IACX,UAAW,KACX,UAAW,KACX,UAAW,KACX,UAAW,KACX,UAAW,KACX,UAAW,MAYPC,EAAMC,OAAOC,KAAKN,GAAYO,KAAI,SAAAC,GAAG,MAAK,CAAEC,KAAMD,EAAKE,MAAOV,EAAWQ,OAEzEG,EAAwC,KAA5BP,EAAIA,EAAIQ,OAAS,GAAGF,MAEhCG,EAAWC,uBAAY,SAACC,EAAMC,GAClC,IAAMC,GAAQb,EAAIY,EAAM,GAAGN,MAAQK,EAAKL,OAASC,EAAY,IACvDO,EAAW,EAAId,EAAIQ,OAAS,IAAMrB,EAAS4B,QAAQC,YAAc7B,EAAS4B,QAAQE,aAClFC,EAAYC,KAAKC,KAAKP,EAAOA,EAAOC,EAAWA,GAErD,MAAO,CAAEO,MADqC,IAA7BF,KAAKG,KAAKT,EAAOC,GAAkBK,KAAKI,GAC/BC,MAAON,KAChC,CAAClB,EAAKO,IAEHkB,EAAaf,uBAAY,kBAAMV,EAAIG,KAAI,SAACQ,EAAMC,GAClD,IAAMc,EAAQ,EAAI1B,EAAIQ,OAAS,IAAM,IAC/BmB,EAAShB,EAAKL,MAAQC,EAAY,IAAM,IACxCqB,EAAO5B,EAAIY,EAAM,GAAKH,EAASE,EAAMC,GAAO,EAC5CiB,EAAQ,CACZC,IAAI,IAAD,OAAmB,EAAbF,EAAKJ,MAAX,MAA0BE,MAAM,GAAD,OAAKE,EAAKJ,MAAQI,EAAKJ,MAAQ,IAA/B,KAClCO,UAAU,WAAD,OAAaH,EAAKP,MAAlB,SAEX,OAAO,wBAAIW,UAAU,SAAS5B,IAAKO,EAAKN,KAAMwB,MAAO,CAAEH,UACrD,yBAAKM,UAAU,iBAAiBH,MAAO,CAAEF,WACvC,yBAAKK,UAAU,cACb,0BAAMA,UAAU,SAASC,IAAaC,iBAAiBvB,EAAKL,SAE7DN,EAAIY,EAAM,IAAM,0BAAMoB,UAAU,OAAOH,MAAOA,WAGjD,CAAC7B,EAAKS,EAAUF,IAxEJ,EA0EQ4B,mBAAS,MA1EjB,mBA0ETC,EA1ES,KA0EHC,EA1EG,KAgFhB,OAJAC,qBAAU,WACHF,GAAMC,EAAQZ,OAClB,CAACW,EAAMX,IAGR,yBAAKO,UAAU,UACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,gBAAgBO,IAAKpD,GAClC,wBAAI6C,UAAU,WAAWI","file":"static/js/5.06d3b65c.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport UtilsService from '../services/UtilsService';\nfunction Graphs() {\n\n  const obj = {\n    \"3/27/20\": 110,\n    \"3/28/20\": 110,\n    \"3/29/20\": 120,\n    \"3/30/20\": 170,\n    \"3/31/20\": 174,\n    \"4/1/20\": 237,\n    \"4/2/20\": 273,\n    \"4/3/20\": 281,\n    \"4/4/20\": 299,\n    \"4/5/20\": 349,\n    \"4/6/20\": 367,\n    \"4/7/20\": 423,\n    \"4/8/20\": 444,\n    \"4/9/20\": 484,\n    \"4/10/20\": 521,\n    \"4/11/20\": 555,\n    \"4/12/20\": 607,\n    \"4/13/20\": 665,\n    \"4/14/20\": 714,\n    \"4/15/20\": 784,\n    \"4/16/20\": 840,\n    \"4/17/20\": 906,\n    \"4/18/20\": 933,\n    \"4/19/20\": 996,\n    \"4/20/20\": 1026,\n    \"4/21/20\": 1092,\n    \"4/22/20\": 1176,\n    \"4/23/20\": 1279,\n    \"4/24/20\": 1351,\n    \"4/25/20\": 1463\n  }\n\n  const graphRef = useRef();\n  const countriesStore = useSelector(state => state.countriesStore);\n\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\n    ? countriesStore.countries[selectedCountryIndex]\n    : countriesStore ? countriesStore.worldData : {};\n\n  const historyObj = selectedCountry.history ? selectedCountry.history.timeline.cases : obj;\n  const arr = Object.keys(historyObj).map(key => ({ date: key, value: historyObj[key] }));\n\n  const maxHeight = arr[arr.length - 1].value * 1.05;\n\n  const calcLine = useCallback((item, idx) => {\n    const diff = (arr[idx + 1].value - item.value) / maxHeight * 100;\n    const colWidth = 1 / arr.length * 100 * graphRef.current.clientWidth / graphRef.current.clientHeight;\n    const calcSlant = Math.sqrt(diff * diff + colWidth * colWidth);\n    const tanAngle = Math.atan(diff / colWidth) * 180 / Math.PI;\n    return { angle: tanAngle, slant: calcSlant };\n  }, [arr, maxHeight])\n\n  const createList = useCallback(() => arr.map((item, idx) => {\n    const width = 1 / arr.length * 100 + '%';\n    const height = item.value / maxHeight * 100 + '%';\n    const line = arr[idx + 1] ? calcLine(item, idx) : 0;\n    const style = {\n      top: `-${line.slant * 4}px`, width: `${line.slant * line.slant + 100}%`,\n      transform: `rotate(-${line.angle}deg)`\n    }\n    return <li className=\"column\" key={item.date} style={{ width }}>\n      <div className=\"column-percent\" style={{ height }}>\n        <div className=\"wrap-value\">\n          <span className=\"value\">{UtilsService.numberWithCommas(item.value)}</span>\n        </div>\n        {arr[idx + 1] && <span className=\"line\" style={style}></span>}\n      </div>\n    </li>\n  }), [arr, calcLine, maxHeight])\n\n  const [list, setList] = useState(null);\n\n  useEffect(() => {\n    if (!list) setList(createList());\n  }, [list, createList])\n\n  return (\n    <div className=\"graphs\">\n      <div className=\"wrap-graph-columns\">\n        <div className=\"graph-columns\" ref={graphRef}>\n          <ul className=\"columns\">{list}</ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Graphs;\n"],"sourceRoot":""}