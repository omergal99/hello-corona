{"version":3,"sources":["cmps/helpers/mapHelpers/SvgDefsFilterShadow.js","cmps/helpers/FilterInput.js","cmps/helpers/countryDetails/CountryDetailsTitle.js","cmps/helpers/countryDetails/CountryDetailsList.js","cmps/helpers/countryDetails/index.js","cmps/worldDashboard/mapUtils/GCircles.js","cmps/worldDashboard/mapUtils/GPaths.js","cmps/worldDashboard/mapUtils/MapTooltip.js","cmps/worldDashboard/mapUtils/SvgCountriesMap.js","cmps/worldDashboard/mapUtils/MapOptions.js","cmps/helpers/graphs/GraphColumnsPreview.js","cmps/helpers/graphs/GraphColumns.js","cmps/worldDashboard/WorldDashboardMap.js","cmps/worldDashboard/WorldDashboardListItem.js","cmps/worldDashboard/WorldDashboardList.js","cmps/worldDashboard/WorldDashboardWorldData.js","cmps/helpers/svg-icons/ReplaceSVG.js","cmps/helpers/graphs/GraphRows.js","cmps/worldDashboard/WorldDashboardDetails.js","pages/WorldDashboard.js"],"names":["SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","type","slope","x","y","width","floodColor","floodOpacity","in2","operator","FilterInput","list","filterKeys","placeholder","onFilter","useState","filterValue","setFilterValue","updateFilterValue","ev","console","log","target","value","toLowerCase","filteredList","filter","item","some","key","includes","className","onChange","onClick","focusable","viewBox","d","CountryDetailsTitle","country","sounds","isWorld","name","isCountryVoice","countryIcon","autoPlay","loop","muted","playsInline","loading","src","UtilsService","getSrc","alt","title","getImgSrc","alpha2","useEffect","msg","SpeechSynthesisUtterance","text","voice","window","speechSynthesis","getVoices","voiceURI","volume","rate","pitch","lang","speak","continent","CountryDetailsList","categoriesToAddIcon","CASES","DEATHS","RECOVERED","ACTIVE","CRITICAL","TESTS","coronaDetails","getCoronaDataKeys","map","category","isWishIcon","numberWithCommas","dividBy","POPULATION","percent","style","color","colorHEX","svgIcon","toFixed","Number","populationDetails","populationData","getDataKeyByKey","fill","cx","cy","r","CountryDetails","settingsStore","useSelector","state","GCircles","circlesDataKey","countries","dynamicRatio","args","countriesCircles","calcRadius","radius","shortNum","numberToShortString","dataKey","centerPoint","fontSize","strokeWidth","initStroke","GPaths","selectedCountry","minMapZoom","didDrag","pathClassName","currPathName","isDragging","initZoom","isAutoFocus","isTooltipShow","onSetViewBox","onSetDynamicRatio","onSetMapView","onSelectCountry","selectedCountryRef","useRef","current","bBox","getBBox","abs","Math","max","bBoxX","bBoxY","zoom","countriesPaths","isSelected","classSelected","isSelecting","ref","undefined","countriesPathsLabels","countriesLabels","MapTooltip","tooltip","SvgCountriesMap","settings","isCirclesShow","baseMap","svgRef","maxMapZoom","ratioUpdateZoom","minTopSvg","minLeftSvg","initFontSize","setViewBox","mapView","setMapView","setDynamicRatio","setDidDrag","setIsDragging","pointerDiff","setPointerDiff","setTooltip","setCurrPathName","handleWheel","useCallback","path","baseVal","svgClassName","updateZoom","copy","deltaY","addEventListener","passive","removeEventListener","stopDrag","setTimeout","onScroll","onWheel","onMouseDown","clientX","clientY","getAttribute","onMouseMove","ratioBySvgHeight","clientHeight","movementX","movementY","top","nativeEvent","offsetY","left","offsetX","onMouseUp","onMouseLeave","MapOptions","isGraphShow","onToggleIsCirclesShow","onToggleIsAutoFocus","onSetCirclesDataKey","onToggleIsTooltipShow","onToggleIsGraphShow","circlesDataButtons","getDataKeysByKeys","circle","isActive","Button","textCondition","isBoolean","GraphColumnsPreview","arr","maxHeight","graphRatio","graphDataType","idx","length","backgroundColor","line","diff","colWidth","calcSlant","sqrt","angle","atan","PI","slant","calcLine","transform","date","GraphColumns","graphRef","setGraphRatio","graphType","setGraphType","graphDataTypes","graphTypesButtons","historyObj","history","timeline","historyArr","Object","keys","clientWidth","WorldDashboardMap","countriesStore","selectedCountryIndex","worldData","mapOptionsFunction","WorldDashboardListItem","countryRef","categoryView","commasNum","APercent","activePercent","isNaN","numericCode","RANK","todayCases","VirusSVG","WorldDashboardList","React","filteredCountries","setFilteredCountries","isFiltered","setIsFiltered","isScroll","setIsScroll","handleUserKeyPress","arrowUpOrDown","code","preventDefault","scrollIntoView","block","scrollTop","scrollHeight","WorldDashboardWorldData","VirusLogoSVG","role","GraphRows","rowsAmount","setRowsAmount","DataKeys","graphBy","setGraphBy","graphDataKey","top10","sort","b","a","slice","ReplaceSVG","fontWeight","WorldDashboardDetails","WorldDashboard","dispatch","useDispatch","useHistory","params","useParams","isSelectedCountry","find","actions","selectCountry","push","WORLD_DASHBOARD","isSameCountry","alpha2ToPush","toggleIsCirclesShow","toggleIsAutoFocus","setCirclesDataKey","toggleIsTooltipShow","toggleIsGraphShow","worldMap"],"mappings":"oHAAA,oBAkCeA,IAhCf,WACE,OACE,oCACE,8BACE,4BAAQC,GAAG,aAAaC,OAAO,QAC7B,oCAAgBC,GAAG,cAAcC,aAAa,MAC9C,8BAAUC,GAAG,IAAIC,GAAG,IAAIC,OAAO,eAC/B,6CACE,6BAASC,KAAK,SAASC,MAAM,SAE/B,iCACE,sCACA,iCAAaN,GAAG,qBAItB,8BACE,4BAAQF,GAAG,mBAAmBS,EAAE,KAAKC,EAAE,KAAKC,MAAM,OAAOV,OAAO,QAC9D,oCAAgBC,GAAG,cAAcC,aAAa,IAAIG,OAAO,SACzD,8BAAUJ,GAAG,OAAOE,GAAG,IAAIC,GAAG,IAAIC,OAAO,eACzC,6BAASM,WAAW,uBAAuBC,aAAa,MAAMP,OAAO,gBACrE,iCAAaJ,GAAG,cAAcY,IAAI,aAAaC,SAAS,KAAKT,OAAO,eACpE,iCACE,sCACA,iCAAaJ,GAAG,wB,6DCObc,IA/Bf,YACe,IAAD,IADSC,YACT,MADgB,GAChB,MADoBC,kBACpB,MADiC,GACjC,MADqCC,mBACrC,MADmD,SACnD,EAAZC,EAAY,EAAZA,SAAY,EAE0BC,mBAAS,IAFnC,mBAELC,EAFK,KAEQC,EAFR,KAINC,EAAoB,SAAAC,GACxBC,QAAQC,IAAI,qBACZJ,EAAeE,EAAGG,OAAOC,OACzB,IAAMA,EAAQJ,EAAGG,OAAOC,MAAMC,cAC9B,GAAKD,EACA,CACH,IAAME,EAAed,EAAKe,QAAO,SAAAC,GAAI,OAAIf,EAAWgB,MAAK,SAAAC,GAAG,OAAIF,EAAKE,GAAKL,cAAcM,SAASP,SACjGT,EAASW,QAHCX,EAAS,OAOvB,OACE,2BAAOiB,UAAU,eACf,2BAAOA,UAAU,eAAe9B,KAAK,OAAOY,YAAaA,EACvDU,MAAOP,EAAagB,SAAUd,IAC/BF,GACC,yBAAKe,UAAU,eAAeE,QAAS,kBAAMf,EAAkB,CAAEI,OAAQ,CAAEC,MAAO,QAChF,yBAAKQ,UAAU,mBAAmBG,UAAU,QAAQC,QAAQ,aAC1D,0BAAMC,EAAE,+G,qECuBLC,MA7Cf,YAAmD,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAEhCC,EAA2B,UAAjBF,EAAQG,KAChBC,EAAmBH,EAAnBG,eAEFC,EACGH,EAEH,2BAAOT,UAAU,gBAAgBa,UAAQ,EAACC,MAAI,EAACC,OAAK,EAACC,aAAW,EAACC,QAAQ,QACzE,4BAAQC,IAAKC,IAAaC,OAAb,aAAkClD,KAAK,eAEpD,yBAAK8B,UAAU,eAAeqB,IAAI,OAAOC,MAAOf,EAAQG,KACxDQ,IAAKC,IAAaI,UAAb,gBAAgChB,EAAQiB,OAAO/B,cAA/C,WAoBX,OAhBAgC,qBAAU,WACR,GAAId,IAAmBF,EAAS,CAC9B,IAAMiB,EAAM,IAAIC,yBAChBD,EAAIE,KAAOrB,EAAQG,KAGnBgB,EAAIG,MAAQC,OAAOC,gBAAgBC,YAAY,GAC/CN,EAAIO,SAAW,SACfP,EAAIQ,OAAS,EACbR,EAAIS,KAAO,EACXT,EAAIU,MAAQ,GACZV,EAAIW,KAAO,QACXN,gBAAgBO,MAAMZ,MAEvB,CAACnB,EAASI,EAAgBF,IAG3B,yBAAKT,UAAU,yBACb,yBAAKA,UAAS,4BAAuBS,EAAU,QAAU,SACtDG,GAEH,yBAAKZ,UAAU,sBACb,4BAAKO,EAAQG,MACb,0BAAMV,UAAU,aAAaO,EAAQgC,c,OCqB9BC,MAxDf,YAA0C,IAAZjC,EAAW,EAAXA,QAEtBkC,EAAsB,CAACC,IAAOC,IAAQC,IAAWC,IAAQC,IAAUC,KACnEC,EAAgBC,cAAoBC,KAAI,SAAAC,GAC5C,IAAMC,EAAaX,EAAoB5C,MAAK,SAAAC,GAAG,OAAIA,IAAQqD,EAASrD,OAC9DN,EAAQe,EAAQ4C,EAASrD,KAAOqB,IAAakC,iBAAiB9C,EAAQ4C,EAASrD,MAAQ,UACvFwD,EAAUH,EAASrD,MAAQ4C,IAAQa,IAAaJ,EAASG,QACzDE,EAAUjD,EAAQ4C,EAASrD,KAAOS,EAAQ+C,GAAW,IAC3D,OAAO,wBAAItD,UAAU,uBAAuBF,IAAKqD,EAASrD,IAAK2D,MAAO,CAAEC,MAAOP,EAASQ,WACtF,0BAAM3D,UAAU,SACbmD,EAAS7B,MADZ,QAEG8B,GAAc,yBAAKpD,UAAU,iBAAiBmD,EAASS,UAE1D,0BAAM5D,UAAU,QAAQsB,MAAO9B,GAAQA,GACtC8D,KAAa/C,EAAQ4C,EAASrD,MAC7B,0BAAME,UAAU,UAAUsB,MAAOkC,EAAQK,QAAQ,IACf,IAA/BC,OAAON,EAAQK,QAAQ,IAAYL,EAAQK,QAAQ,GAAKL,EAAQK,QAAQ,GAD3E,SAQAE,EAAqB,WACzB,IAAMC,EAAiBC,YAAgBV,KACjC/D,EAAQ2B,IAAakC,iBAAiB9C,EAAQyD,EAAelE,MACnE,OAAO,wBAAIE,UAAU,wBACnB,0BAAMA,UAAU,SAASgE,EAAe1C,MAAxC,SACA,yBAAKtB,UAAU,oBACb,0BAAMsB,MAAO9B,GAAQA,GACrB,0BAAMQ,UAAU,iBACd,yBAAKI,QAAQ,eACX,4BAAQ8D,KAAK,eAAeC,GAAG,MAAMC,GAAG,QAAQC,EAAE,OAClD,0BAAMH,KAAK,eAAe7D,EAAE,sQAG5B,0BAAM6D,KAAK,eAAe7D,EAAE,2TAI9B,yBAAKL,UAAU,mBACb,wDAlBiB,GAyB3B,OACE,wBAAIA,UAAU,wBACX+D,EACAf,ICxCQsB,IAZf,YAAsC,IAAZ/D,EAAW,EAAXA,QAElBgE,EAAgBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,iBAC3C/D,EAAS+D,EAAgBA,EAAc/D,OAAS,CAAEA,QAAQ,GAChE,OACE,yBAAKR,UAAU,4BACb,kBAAC,EAAD,CAAqBO,QAASA,EAASC,OAAQA,IAC/C,kBAAC,EAAD,CAAoBD,QAASA,O,6+qkBCoBpBmE,MA7Bf,YAA+E,IAAD,IAA1DC,sBAA0D,MAAzC9B,IAAyC,EAAjC+B,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,aAAcC,EAAQ,EAARA,KAE9DC,EAAmBH,EAAU1B,KAAI,SAAA3C,GACrC,IAAMyE,GAAczE,EAAQoE,GAAkB,KAAMd,UAC9CoB,EAASD,EAAa,IAAM,GAAKA,EAAa,GAAK,GAAKA,EAAa,GAAK,GAAMA,EAAa,EAAI,EAAI,EACrGE,EAAW/D,IAAagE,oBAAoB5E,EAAQoE,IAC1D,IAAKO,EAAU,MAAO,GACtB,IAAME,EAAUnB,YAAgBU,GAE1BT,EAAI,UAAMkB,EAAQzB,SAAd,MACV,OAAO,uBAAG7D,IAAKS,EAAQ5C,IACrB,4BAAQqC,UAAU,sBAAsBU,KAAMH,EAAQG,KAAM+C,MAAO,CAAES,QAEnEC,GAAI5D,EAAQ8E,YAAYjH,EAAGgG,GAAI7D,EAAQ8E,YAAYhH,EAAGgG,EAAGY,EAASJ,IAEpE,0BAAM7E,UAAU,cAAc5B,EAAGmC,EAAQ8E,YAAYjH,EAAGC,EAAGkC,EAAQ8E,YAAYhH,EAC7EL,GAAE,UAAKiH,EAASJ,EAAe,EAA7B,MAAoCS,SAAQ,UAAc,IAATL,EAAgBJ,EAArB,OAC7CK,OAKP,OACE,uBAAGlF,UAAU,YAAYyD,MAAO,CAAE8B,YAAaT,EAAKU,WAAaX,IAC9DE,I,SCmBQU,MA5Cf,YAEqE,IAFnDb,EAEkD,EAFlDA,UAAWc,EAEuC,EAFvCA,gBAAiBb,EAEsB,EAFtBA,aAAcC,EAEQ,EAFRA,KAAMa,EAEE,EAFFA,WAAYC,EAEV,EAFUA,QAC5EC,EACkE,EADlEA,cAAeC,EACmD,EADnDA,aAAcC,EACqC,EADrCA,WAAYC,EACyB,EADzBA,SAAUC,EACe,EADfA,YAAaC,EACE,EADFA,cAChEC,EAAkE,EAAlEA,aAAcC,EAAoD,EAApDA,kBAAmBC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,gBAEzCC,EAAqBC,mBAE3B/E,qBAAU,WACR,GAAK8E,EAAmBE,SAAYR,EAApC,CACA,IAAMS,EAAOH,EAAmBE,QAAQE,UACX,kBAAzBjB,EAAgBhF,OAA0BgG,EAAKpI,MAAQ,KAC3D,IAAMsI,EAAMC,KAAKD,IAAIF,EAAKpI,MAAQoI,EAAK9I,QAAU,EAC3CkJ,EAAMJ,EAAKpI,MAAQoI,EAAK9I,OAAS8I,EAAKpI,MAAQoI,EAAK9I,OACnDmJ,EAAQL,EAAKpI,MAAQoI,EAAK9I,OAAS8I,EAAKtI,EAAIsI,EAAKtI,EAAIwI,EACrDI,EAAQN,EAAKpI,MAAQoI,EAAK9I,OAAS8I,EAAKrI,EAAIuI,EAAMF,EAAKrI,EACvDD,EAAI2I,EAAQpB,EAAa,EAAGtH,EAAI2I,EAAQrB,EAAa,EAAGsB,EAAOH,EAAMnB,EAC3EQ,EAAa,GAAD,OAAI/H,EAAJ,YAASC,EAAT,YAAc4I,EAAd,YAAsBA,IAClCb,EAAkBa,EAAOjB,GACzBK,EAAa,CAAEY,OAAM7I,IAAGC,SACvB,CAACqH,EAAiBS,EAAcC,EAAmBC,EAAcL,EAAUL,EAAYM,IAE1F,IAAMiB,EAAiBtC,EAAU1B,KAAI,SAAA3C,GACnC,IAAM4G,EAAa5G,EAAQG,OAASgF,EAAgBhF,KAC9C0G,EAAgBD,EAAa,WAAa,GAC1CE,EAActB,IAAeH,GAAWE,IAAiBvF,EAAQG,KAAO,YAAc,GAC5F,OAAO,0BAAMV,UAAS,UAAK6F,EAAL,YAAsBuB,EAAtB,YAAuCC,GAAevH,IAAKS,EAAQ5C,GACvF6D,OAAQjB,EAAQiB,OAAQd,KAAMH,EAAQG,KAAML,EAAGE,EAAQF,EACvDH,QAAS,kBAAO0F,GAAWU,EAAgB/F,IAC3C+G,IAAKH,EAAaZ,OAAqBgB,IACrCrB,GAAiB,+BAAQ3F,EAAQG,UAIjC8G,EAAuBC,EAAgBvE,KAAI,SAAA3C,GAC/C,OAAO,0BAAMP,UAAU,qBAAqBK,EAAGE,EAAQF,EAAGP,IAAKS,EAAQ5C,QAGzE,OACE,uBAAGqC,UAAU,UAAUyD,MAAO,CAAE8B,YAAaT,EAAKU,WAAaX,EAAclF,OAAQ,qBAClFuH,EACAM,IC7BQE,MAXf,YAAkC,IAAZC,EAAW,EAAXA,QAEpB,OACE,yBAAK3H,UAAU,cAAcyD,MAAOkE,EAAQlE,OAC1C,yBAAKzD,UAAU,cAAcqB,IAAI,OAC/BH,IAAKC,IAAaI,UAAb,gBAAgCoG,EAAQnG,OAAO/B,cAA/C,WACP,0BAAMO,UAAU,iBAAiB2H,EAAQjH,QCyHhCkH,MA1Hf,YAEqB,IAFMhD,EAEP,EAFOA,UAAWc,EAElB,EAFkBA,gBAElB,IADlBmC,SAAYC,EACM,EADNA,cAAenD,EACT,EADSA,eAAgBsB,EACzB,EADyBA,YAAaC,EACtC,EADsCA,cACxDI,EAAkB,EAAlBA,gBAGMyB,EAAmB,IAAnBA,EAAgC,IAEhCC,EAASxB,iBAHE,KAKX1B,EAAO,CACXa,WAAY,GAAIsC,WAAY,KAAMC,gBAAiB,IACnDC,WAAYJ,EAPG,KAO0B,EAAGK,YAAaL,EAP1C,KAOsE,EACrFM,aARe,IAQU,GAAI7C,WAAYQ,MAVzB,EAaYhH,mBAAS,GAAD,OAAI8F,EAAKsD,WAAT,YAAuBtD,EAAKqD,UAA5B,YAXrB,IAWqB,YAXrB,MAFC,mBAaX/H,EAbW,KAaFkI,EAbE,OAcYtJ,mBAAS,CAAEiI,KAZxB,IAYwC7I,EAAG0G,EAAKsD,WAAY/J,EAAGyG,EAAKqD,YAdnE,mBAcXI,EAdW,KAcFC,EAdE,OAesBxJ,mBAAS,GAf/B,mBAeX6F,EAfW,KAeG4D,EAfH,OAiBYzJ,oBAAS,GAjBrB,mBAiBX4G,EAjBW,KAiBF8C,EAjBE,OAkBkB1J,oBAAS,GAlB3B,mBAkBX+G,EAlBW,KAkBC4C,EAlBD,OAmBoB3J,mBAAS,CAAEZ,EAAG,EAAGC,EAAG,IAnBxC,mBAmBXuK,EAnBW,KAmBEC,EAnBF,OAoBY7J,mBAAS,MApBrB,mBAoBX2I,EApBW,KAoBFmB,EApBE,OAsBsB9J,mBAAS,MAtB/B,mBAsBX8G,EAtBW,KAsBGiD,EAtBH,KAwBZC,EAAcC,uBAAY,SAAA7J,GAG9B,GAFwBA,EAAG8J,MAAQ9J,EAAG8J,KAAKrJ,MAAK,SAAAqJ,GAAI,OAAIA,EAAKlJ,WAAakJ,EAAKlJ,UAAUmJ,SACpFD,EAAKlJ,UAAUmJ,QAAQpJ,SAASqJ,OACrC,CACA,IAAMC,EAAad,EAAQtB,KAAOnC,EAAKoD,gBACjCoB,EAAOf,EACTnJ,EAAGmK,OAAS,EACVhB,EAAQtB,KAAOoC,EAAavE,EAAKa,WAAab,EAAKmD,aACrDqB,EAAKrC,KAAOqC,EAAKrC,KAAOoC,EACxBC,EAAKlL,EAAIkL,EAAKlL,EAAIiL,EAAa,EAC/BC,EAAKjL,EAAIiL,EAAKjL,EAAIgL,EAAa,EAC/Bb,EAAWc,IAGTf,EAAQtB,KAAOoC,EAAavE,EAAKa,WAAa,IAChD2D,EAAKrC,KAAOqC,EAAKrC,KAAOoC,EACxBC,EAAKlL,EAAIkL,EAAKlL,EAAIiL,EAAa,EAC/BC,EAAKjL,EAAIiL,EAAKjL,EAAIgL,EAAa,EAC/Bb,EAAWc,IAGfb,EAAgBF,EAAQtB,KA3CT,KA4CfqB,EAAW,GAAD,OAAIC,EAAQnK,EAAZ,YAAiBmK,EAAQlK,EAAzB,YAA8BkK,EAAQtB,KAAtC,YAA8CsB,EAAQtB,UAC/D,CAACsB,EAASzD,IAEbrD,qBAAU,WAER,OADAK,OAAO0H,iBAAiB,aAAcR,EAAa,CAAES,SAAS,IACvD,kBAAM3H,OAAO4H,oBAAoB,aAAcV,EAAa,CAAES,SAAS,OAC7E,CAACT,IAEJ,IA2BMW,GAAW,WACfhB,GAAc,GACdiB,YAAW,kBAAMlB,GAAW,KAAQ,IAWhC7C,GAAgB,eAChBuD,GAAe,UAErB,OACE,oCACE,yBAAKpJ,UAAWoJ,GAAchJ,QAASA,EAASkH,IAAKU,EACnD6B,SAVe,SAAAzK,GACnBC,QAAQC,IAAIF,IASgB0K,QAASd,EACjCe,YA/CY,SAAA3K,GAChByJ,EAAe,CAAEzK,EAAGgB,EAAG4K,QAAS3L,EAAGe,EAAG6K,UACtCtB,GAAc,GACdI,EAAgB3J,EAAGG,OAAO2K,aAAa,UA4CXC,YA1CN,SAAA/K,GACtB,GAAI2G,EAAY,CACd,IAAMqE,EA3DO,IA2DuBpC,EAAOvB,QAAQ4D,aAC7CjM,EAAImK,EAAQnK,GAAKgB,EAAG4K,QAAUpB,EAAYxK,GAAKyG,EAAeuF,EAC9D/L,EAAIkK,EAAQlK,GAAKe,EAAG6K,QAAUrB,EAAYvK,GAAKwG,EAAeuF,EACpE5B,EAAW,2BAAKD,GAAN,IAAenK,IAAGC,OAC5BiK,EAAW,GAAD,OAAIC,EAAQnK,EAAZ,YAAiBmK,EAAQlK,EAAzB,YAA8BkK,EAAQtB,KAAtC,YAA8CsB,EAAQtB,OAChE4B,EAAe,CAAEzK,EAAGgB,EAAG4K,QAAS3L,EAAGe,EAAG6K,WACpB,IAAjB7K,EAAGkL,WAAoC,IAAjBlL,EAAGmL,YAAoB7B,GAAW,GAEvDxC,IACE9G,EAAGG,OAAO2K,aAAa,SAASnK,SAAS8F,IAC3CiD,EAAW,CACTpI,KAAMtB,EAAGG,OAAO2K,aAAa,QAC7B1I,OAAQpC,EAAGG,OAAO2K,aAAa,UAC/BzG,MAAO,CAAE+G,IAAKpL,EAAGqL,YAAYC,QAAU,GAAIC,KAAMvL,EAAGqL,YAAYG,QAAU,MAG5E9B,EAAW,QAwB2C+B,UAAWlB,GAAUmB,aAhBxD,WACvBnB,KACAb,EAAW,QAeP,kBAACpL,EAAA,EAAD,MACA,kBAAC,EAAD,CAAQkH,UAAWA,EAAWc,gBAAiBA,EAAiBb,aAAcA,EAAcC,KAAMA,EAChGgB,aAAcA,EAAcC,WAAYA,EAAYF,cAAeA,GAAeD,QAASA,EAC3FI,SAvGS,IAuGWL,WAAYb,EAAKa,WAAYM,YAAaA,EAAaC,cAAeA,EAC1FC,aAAcmC,EAAYlC,kBAAmBqC,EAAiBpC,aAAcmC,EAC5ElC,gBAAiBA,IAClBwB,GACC,kBAAC,EAAD,CAAUnD,eAAgBA,EAAgBC,UAAWA,EAAWC,aAAcA,EAAcC,KAAMA,KAIrGoB,GAAiByB,GAChB,kBAAC,EAAD,CAAYA,QAASA,M,QC/EdoD,MAxCf,YACkH,IAAD,IAD3FlD,SAAYC,EAC+E,EAD/EA,cAAe7B,EACgE,EADhEA,YAAatB,EACmD,EADnDA,eAAgBuB,EACmC,EADnCA,cAAe8E,EACoB,EADpBA,YAC3FC,EAA+G,EAA/GA,sBAAuBC,EAAwF,EAAxFA,oBAAqBC,EAAmE,EAAnEA,oBAAqBC,EAA8C,EAA9CA,sBAAuBC,EAAuB,EAAvBA,oBAQlFC,EAFcC,YAAkB,CAAC1I,IAAQH,IAAOC,IAAQC,IAAWG,MAElCG,KAAI,SAAAsI,GACzC,IAAMC,EAAW9G,IAAmB6G,EAAO1L,IAC3C,OAAO,kBAAC4L,EAAA,EAAD,CAAQ5L,IAAK0L,EAAO1L,IAAK8B,KAAM4J,EAAOlK,MAAOpD,KAAI,UAAKsN,EAAO9H,MAAZ,YAAqB+H,GAAY,UACvFhI,MAAO,CAAE6B,SAAU,UACnBpF,QAAS,kBAVSJ,EAUW0L,EAAO1L,SATlC6E,IAAmB7E,GAAKqL,EAAoBrL,IAD5B,IAAAA,QAatB,OACE,yBAAKE,UAAU,eAEb,yBAAKA,UAAU,gBACb,kBAAC0L,EAAA,EAAD,CAAQ9J,KAAK,UAAU+J,cAAe7D,EAAe8D,WAAW,EAC9D1L,QAAS+K,IACX,kBAACS,EAAA,EAAD,CAAQ9J,KAAK,aAAa+J,cAAe1F,EAAa2F,WAAW,EAC/D1L,QAASgL,IACX,kBAACQ,EAAA,EAAD,CAAQ9J,KAAK,UAAU+J,cAAezF,EAAe0F,WAAW,EAC9D1L,QAASkL,IACX,kBAACM,EAAA,EAAD,CAAQ9J,KAAK,QAAQ+J,cAAeX,EAAaY,WAAW,EAC1D1L,QAASmL,KAGZvD,GACC,yBAAK9H,UAAU,mBACZsL,KCGIO,MApCf,YAA6E,IAA9CC,EAA6C,EAA7CA,IAAKC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,cAUnDrN,EAAOkN,EAAI5I,KAAI,SAACtD,EAAMsM,GAC1B,IAAM5N,EAAQ,EAAIwN,EAAIK,OAAS,IAAM,IAC/BvO,EAASgC,EAAKJ,MAAQuM,EAAY,IAAM,IACxCK,EAAkBH,EAActI,SAChC0I,EAAOP,EAAII,EAAM,GAZR,SAACtM,EAAMsM,GACtB,IAAMI,GAAQR,EAAII,EAAM,GAAG1M,MAAQI,EAAKJ,OAASuM,EAAY,IACvDQ,EAAW,EAAIT,EAAIK,OAAS,IAAMH,EAClCQ,EAAY3F,KAAK4F,KAAKH,EAAOA,EAAOC,EAAWA,GAErD,MAAO,CAAEG,MADqC,IAA7B7F,KAAK8F,KAAKL,EAAOC,GAAkB1F,KAAK+F,GAC/BC,MAAOL,GAOLM,CAASlN,EAAMsM,GAAO,EAC5CzI,EAAQ,CACZ+G,IAAI,IAAD,OAAmB,EAAb6B,EAAKQ,MAAX,MACHE,UAAU,UAAD,QAA0B,EAAdV,EAAKK,MAAjB,SAEX,OAAO,wBAAI1M,UAAU,SAASF,IAAKF,EAAKoN,KAAMvJ,MAAO,CAAEnF,UACrD,yBAAK0B,UAAU,iBAAiByD,MAAO,CAAE7F,SAAQwO,oBAC/C,yBAAKpM,UAAU,cACb,0BAAMA,UAAU,SAASmB,IAAakC,iBAAiBzD,EAAKJ,SAE7DsM,EAAII,EAAM,IAAM,0BAAMlM,UAAU,OAAOyD,MAAOA,SAKrD,OACE,wBAAIzD,UAAU,WACXpB,ICyBQqO,MArDf,YAA4C,IAApBvH,EAAmB,EAAnBA,gBAEhBwH,EAAW1G,mBAFwB,EAGLxH,qBAHK,mBAGlCgN,EAHkC,KAGtBmB,EAHsB,OAIPnO,mBAAS0D,KAJF,mBAIlC0K,EAJkC,KAIvBC,EAJuB,KAUnCC,EAAiB/B,YAAkB,CAAC7I,IAAOC,IAAQC,MACnDqJ,EAAgBmB,IAAc1K,IAAd,2BACbuB,YAAgBmJ,IADH,IACe1J,MAAO,OAAQC,SAAU,YAC1DM,YAAgBmJ,GAEdG,EAAoBD,EAAepK,KAAI,SAAAhF,GAC3C,IAAMuN,EAAW2B,IAAclP,EAAK4B,IACpC,OAAO,kBAAC4L,EAAA,EAAD,CAAQ5L,IAAK5B,EAAK4B,IAAK8B,KAAM1D,EAAKoD,MAAOpD,KAAI,UAAKA,EAAKwF,MAAV,YAAmB+H,GAAY,UACjFhI,MAAO,CAAE6B,SAAU,UAAYpF,QAAS,kBAZxBJ,EAY0C5B,EAAK4B,SAX7DsN,IAActN,GAAKuN,EAAavN,IADlB,IAAAA,QAed0N,EAAa9H,EAAgB+H,QAAU/H,EAAgB+H,QAAQC,SAASN,GAAa,GACrFO,EAAaC,OAAOC,KAAKL,GAAYtK,KAAI,SAAApD,GAAG,MAAK,CAAEkN,KAAMlN,EAAKN,MAAOgO,EAAW1N,OAEhFiM,EAAY4B,EAAWxB,OAAmD,KAA1CwB,EAAWA,EAAWxB,OAAS,GAAG3M,MAAe,EAQvF,OANAiC,qBAAU,WACJyL,EAASzG,UAAYuF,GACvBmB,EAAcD,EAASzG,QAAQqH,YAAcZ,EAASzG,QAAQ4D,gBAE/D,CAAC6C,EAAUlB,IAGZ,yBAAKhM,UAAU,gBAAgBsH,IAAK4F,GAClC,yBAAKlN,UAAU,iBACb,yBAAKA,UAAU,cACb,2BACE,0BAAMA,UAAU,QAAhB,eAAgC2N,EAAW,GAAGX,KAA9C,eAAyDW,EAAWA,EAAWxB,OAAS,GAAGa,SAG/F,yBAAKhN,UAAU,+BACZuN,IAIJL,GAAYA,EAASzG,SACpB,kBAAC,EAAD,CAAqBqF,IAAK6B,EAAY5B,UAAWA,EAAWC,WAAYA,EACtEC,cAAeA,MC1BV8B,MArBf,YAC0C,IADblG,EACY,EADZA,SACY,IADFmG,eAAkBpJ,EAChB,EADgBA,UAAWqJ,EAC3B,EAD2BA,qBAAsBC,EACjD,EADiDA,UACxF5H,EAAuC,EAAvCA,gBAAiB6H,EAAsB,EAAtBA,mBAEXzI,EAAkBuI,GAAiD,IAAzBA,EAC5CrJ,EAAUqJ,GAAwBC,EAE9BlD,EAAgBnD,EAAhBmD,YACR,OACE,yBAAKhL,UAAU,uBACb,kBAAC,EAAD,CAAiB4E,UAAWA,EAAWiD,SAAUA,EAAUnC,gBAAiBA,EAC1EY,gBAAiBA,IACnB,kBAAC,EAAD,eAAYuB,SAAUA,GAAcsG,IACnCnD,GAAetF,EAAgB+H,SAC9B,yBAAKzN,UAAU,sBACb,kBAAC,EAAD,CAAc0F,gBAAiBA,O,iBCwC1B0I,MAvDf,YAA4F,IAA1D7N,EAAyD,EAAzDA,QAASmF,EAAgD,EAAhDA,gBAAiBY,EAA+B,EAA/BA,gBAAiB+H,EAAc,EAAdA,WAErElH,EAAa5G,EAAQG,OAASgF,EAAgBhF,KAAO,WAAa,GAClEQ,EAAMC,IAAaI,UAAb,gBAAgChB,EAAQiB,OAAO/B,cAA/C,SAIN6O,EAFa/C,YAAkB,CAAC1I,IAAQH,IAAOC,IAAQC,MAE7BM,KAAI,SAAAC,GAClC,IAAM+B,EAAW3E,EAAQ4C,EAASrD,KAAOqB,IAAakC,iBAAiB9C,EAAQ4C,EAASrD,MAAQ,UAC1FyO,EAAYpN,IAAakC,iBAAiB9C,EAAQ4C,EAASrD,MAC3D0O,GAAYjO,EAAQsC,KAAUtC,EAAQmC,KAAS,KAAKmB,UACpD4K,GAAiBC,MAAMF,IAAaA,EAAW,EAAIA,EAAW,IAAM,GAC1E,OAAO,yBAAKxO,UAAU,oBAAoBF,IAAKqD,EAASrD,IACtDwB,MAAK,UAAKiN,EAAL,YAAkBpL,EAAS7B,QAChC,0BAAMtB,UAAU,SACbmD,EAAS7B,MACT6B,EAASrD,MAAQ+C,KAAU,0BAAM7C,UAAU,iBAAhB,OACnByO,IAGX,0BAAMzO,UAAU,SAASkF,OAI7B,OACE,wBAAIlF,UAAS,kBAAamH,GAAcG,IAAK+G,EAC3CnO,QAAS,kBAAMoG,EAAgB/F,KAC/B,0BAAMP,UAAU,eAAesB,MAAK,uBAAkBf,EAAQoO,cAA9D,OACOpO,EAAQoO,aAEf,yBAAK3O,UAAU,eACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,eAAekB,IAAKA,EAAKG,IAAI,OAAOC,MAAOf,EAAQG,QAEpE,yBAAKV,UAAU,uBACb,wBAAIA,UAAU,gBAAgBO,EAAQG,MACtC,yBAAKV,UAAU,kBACb,0BAAMA,UAAU,OAAOsB,MAAK,eAAUf,EAAQqO,KAAQ,IACpD,0BAAM5O,UAAU,aAAhB,gBACCO,EAAQqO,KAAQ,GAEnB,yBAAK5O,UAAU,QAAQsB,MAAK,sBAAiBH,IAAakC,iBAAiB9C,EAAQsO,cACjF,yBAAK7O,UAAU,iBAAgB,kBAAC8O,EAAA,EAAD,OAC/B,0BAAM9O,UAAU,eAAhB,IAAgCmB,IAAakC,iBAAiB9C,EAAQsO,iBAK9E,yBAAK7O,UAAU,kBACZsO,KCmBMS,MArEf,YACsB,IAAD,IADSf,eAAkBpJ,EAC3B,EAD2BA,UAAWqJ,EACtC,EADsCA,qBACzD3H,EAAmB,EAAnBA,gBAEMZ,EAAkBuI,GAAiD,IAAzBA,EAA6BrJ,EAAUqJ,GAAwB,GAF5F,EAI+Be,IAAMhQ,SAAS4F,EAAUjF,QAAO,SAACC,EAAMsM,GAAP,OAAeA,EAAM,OAJpF,mBAIZ+C,EAJY,KAIOC,EAJP,OAKiBF,IAAMhQ,UAAS,GALhC,mBAKZmQ,EALY,KAKAC,EALA,OAMaJ,IAAMhQ,UAAS,GAN5B,mBAMZqQ,EANY,KAMFC,EANE,KAQb/I,EAAqByI,IAAMxI,OAAO,MAElC5H,EAAOqQ,EAAkB/L,KAAI,SAAC3C,EAAS2L,GAC3C,IAAMmC,EAAa3I,EAAgBlE,SAAWjB,EAAQiB,OAAS+E,EAAqB,KACpF,OAAQ8I,GAAYF,GAAcjD,EAAM,GACpC,kBAAC,EAAD,CAAwBpM,IAAKS,EAAQ5C,GAAI0Q,WAAYA,EACrD9N,QAASA,EAASmF,gBAAiBA,EACnCY,gBAAiBA,IACjB,wBAAIxG,IAAKoM,EAAK5E,IAAK+G,EAAY5K,MAAO,CAAE7F,OAAQ,eAmBhD2R,EAAqBP,IAAM/F,aAAY,SAAC7J,GAC5C,IAAMoQ,EAA4B,cAAZpQ,EAAGqQ,KAAuB,EAAgB,YAAZrQ,EAAGqQ,MAAsB,EAAI,GAC5ED,GAAiBvB,EAAuBuB,EAAgB,GACxDvB,EAAuBuB,EAAgBP,EAAkB9C,OAAS,IACvE/M,EAAGsQ,iBACHpJ,EAAgB2I,EAAkBhB,EAAuBuB,IACzDjJ,EAAmBE,QAAQkJ,eAAe,CAAEC,MAAO,cAClD,CAACX,EAAmBhB,EAAsB3H,IAa7C,OAXA0I,IAAMvN,WAAU,WAEd,OADAK,OAAO0H,iBAAiB,QAAS+F,GACzB,kBAAMzN,OAAO4H,oBAAoB,QAAS6F,MACjD,CAACA,IAEJP,IAAMvN,WAAU,WACdmI,YAAW,WACLrD,EAAmBE,SAASF,EAAmBE,QAAQkJ,eAAe,CAAEC,MAAO,aAClF,KACF,CAACrJ,IAGF,yBAAKvG,UAAU,iCACb,yBAAKA,UAAU,uBACb,kBAACrB,EAAA,EAAD,CAAaC,KAAMgG,EAAW/F,WAAY,CAAC,QAASC,YAAY,iBAC9DC,SAjCgB,SAAAW,GAClBA,GACFwP,EAAqBxP,GACrB0P,GAAc,IAEdF,EAAqBtK,EAAUjF,QAAO,SAACC,EAAMsM,GAAP,OAAeA,EAAM,WA8B3D,wBAAIlM,UAAU,YAAY6J,SA1CT,SAAAzK,IACnBkQ,GAAY,GACRH,IACc/P,EAAGG,OAAOsQ,UAAY,KAAOzQ,EAAGG,OAAOuQ,aAAe1Q,EAAGG,OAAO8K,cACnE6E,EAAqBtK,KAuC/BhG,KCjCMmR,MA9Bf,YAAkE,IAA/B7B,EAA8B,EAA9BA,UAAW5H,EAAmB,EAAnBA,gBAItC1H,EAFO2M,YAAkB,CAAC7I,IAAOC,IAAQC,MAE7BM,KAAI,SAAAC,GAAQ,OAC5B,wBAAInD,UAAU,wBAAwBF,IAAKqD,EAASrD,IAAKI,QAAS,kBAAMoG,MACtE,0BAAMtG,UAAU,kBAChB,2BAAImD,EAAS7B,OACb,2BAAIH,IAAakC,iBAAiB6K,EAAU/K,EAASrD,OAEpDqD,EAASG,SACR,0BAAMtD,UAAU,gBACd,0BAAMA,UAAU,YACZkO,EAAU/K,EAASrD,KAAOoO,EAAU/K,EAASG,SAAW,KAAKO,UADjE,UAQR,OACE,yBAAK7D,UAAU,iCACb,wBAAIA,UAAU,SAAd,SACA,wBAAIA,UAAU,iBACXpB,K,QClBMoR,MARf,WACE,OACE,yBAAKC,KAAK,MAAM7P,QAAQ,aACtB,0BAAM8D,KAAK,eAAe7D,EAAE,kqCC0DnB6P,MAzDf,YAAoD,IAA/BtL,EAA8B,EAA9BA,UAAW0B,EAAmB,EAAnBA,gBAAmB,EAEbtH,mBAAS,IAFI,mBAE1CmR,EAF0C,KAE9BC,EAF8B,OAGnBpR,mBAASqR,KAHU,mBAG1CC,EAH0C,KAGjCC,EAHiC,KAI3CC,EAAeH,IAAyBC,GAExCG,EAAQ,YAAI7L,GAAW8L,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEN,GAAWK,EAAEL,GAAY,EAAMK,EAAEL,GAAWM,EAAEN,IAAa,EAAI,KAC3GO,MAAM,EAAGV,GAGNvR,EAAO6R,EAAMvN,KAAI,SAAA3C,GACrB,IAAMjC,EAAQiC,EAAQ+P,GAAWG,EAAM,GAAGH,GAAW,IAAM,IACrDlE,EAAkBoE,EAAa7M,SAAW,KAChD,OAAO,wBAAI3D,UAAU,MAAMF,IAAKS,EAAQiB,OAAQiC,MAAO,CAAEnF,QAAO8N,oBAC9D,0BAAMpM,UAAU,OAAOE,QAAS,kBAAMoG,EAAgB/F,KAAWA,EAAQG,MACzE,0BAAMV,UAAU,UAAhB,OAAgCmB,IAAakC,iBAAiB9C,EAAQ+P,SAkB1E,OACE,yBAAKtQ,UAAU,cACb,yBAAKA,UAAU,aAAaE,QAhBZ,WACdoQ,IAAYD,KAAuBE,EAAWF,KAC9CC,IAAYD,KAAiCE,EAAWF,KACxDC,IAAYD,KAAiBE,EAAWF,KACxCC,IAAYD,KAAsBE,EAAWF,KAC7CC,IAAYD,KAAgCE,EAAWF,KACvDC,IAAYD,KAAgBE,EAAWF,KACvCC,IAAYD,KAAgCE,EAAWF,KACvDC,IAAYD,KAAmBE,EAAWF,KAC1CC,IAAYD,KAAoBE,EAAWF,KAC3CC,IAAYD,KAAiBE,EAAWF,OAOxC,yBAAKrQ,UAAU,iBAAgB,kBAAC8Q,EAAD,OAC/B,wBAAI9Q,UAAU,SAASwQ,EAAalP,OACpC,yBAAKtB,UAAU,gBAAgByD,MAAO,CAAEC,MAAO8M,EAAa9M,QAAU8M,EAAa5M,UAErF,wBAAI5D,UAAU,QACXpB,EACD,wBAAIoB,UAAU,eACXmQ,EAXI,GAYH,kBAACzE,EAAA,EAAD,CAAQ9J,KAAI,iBAZT,GAYwB6B,MAAO,CAAEsN,WAAY,OAAQzS,MAAO,UAC7D4B,QAAS,kBAAMkQ,EAAcD,EAb5B,MAeJA,EAAa7D,IACZ,kBAACZ,EAAA,EAAD,CAAQ9J,KAAI,YAhBT,GAgBwB6B,MAAO,CAAEsN,WAAY,OAAQzS,MAAO,UAC7D4B,QAAS,kBAAMkQ,EAAcD,EAjB5B,U,SCtBAa,MAZf,YACsB,IAAD,IADYhD,eAAkBpJ,EAC9B,EAD8BA,UAAWqJ,EACzC,EADyCA,qBAAsBC,EAC/D,EAD+DA,UAClF5H,EAAmB,EAAnBA,gBACMZ,EAAkBuI,GAAiD,IAAzBA,EAA6BrJ,EAAUqJ,GAAwBC,EAE/G,OACE,yBAAKlO,UAAU,oCACb,kBAAC,IAAD,CAAgBO,QAASmF,IACzB,kBAAC,EAAD,CAAWd,UAAWA,EAAW0B,gBAAiBA,MC8DzC2K,UA9Df,WAEE,IAAMjD,EAAiBxJ,aAAY,SAAAC,GAAK,OAAIA,EAAMuJ,kBAC5CzJ,EAAgBC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,iBAE3C2M,EAAWC,cACX1D,EAAU2D,cACVC,EAASC,cAEf7P,qBAAU,WACR,GAAKuM,EAAL,CADc,IAENpJ,EAAoCoJ,EAApCpJ,UAAWqJ,EAAyBD,EAAzBC,qBACbsD,EAAoBtD,GAAiD,IAAzBA,EAElD,GADiCoD,EAAO7P,SAAW+P,EACrB,CAC5B,IAAMhR,EAAUqE,EAAU4M,MAAK,SAAAjR,GAAO,OAAIA,EAAQiB,SAAW6P,EAAO7P,UACpE0P,EAASO,IAAQC,cAAcnR,KAER8Q,EAAO7P,QAAU+P,GAExC9D,EAAQkE,KAAR,WAAiBC,IAAjB,YAAoChN,EAAUqJ,GAAsBzM,YAErE,CAAC0P,EAAUlD,EAAgBqD,EAAQ5D,IAGtC,IAAMiE,EAAgB,WAAqB,IAApBnR,EAAmB,uDAAT,KAC/B,GAAKA,GAAYgR,EAAjB,CACA,IAAMM,EAAgBtR,GAAWA,EAAQiB,SAAWkE,EAAgBlE,OAC9DsQ,EAAevR,IAAYsR,EAAgBtR,EAAQiB,OAAS,GAClEiM,EAAQkE,KAAR,WAAiBC,IAAjB,YAAoCE,IACpCZ,EAASO,IAAQC,cAAcnR,GAAoB,OAG/C0N,EAAuBD,GAAkBA,EAAeC,qBACxDsD,EAAoBtD,GAAiD,IAAzBA,EAC5CvI,EAAkB6L,EACpBvD,EAAepJ,UAAUqJ,GACzBD,EAAiBA,EAAeE,UAAY,GAE1CC,EAAqB,CACzBlD,sBAAuB,kBAAMiG,EAASO,IAAQM,wBAC9C7G,oBAAqB,kBAAMgG,EAASO,IAAQO,sBAC5C7G,oBAAqB,SAAA/F,GAAO,OAAI8L,EAASO,IAAQQ,kBAAkB7M,KACnEgG,sBAAuB,kBAAM8F,EAASO,IAAQS,wBAC9C7G,oBAAqB,kBAAM6F,EAASO,IAAQU,uBAG9C,OACE,oCAAGnE,GAAkBzJ,GAAiB,oCACpC,yBAAKvE,UAAU,mBACb,yBAAKA,UAAU,oDACb,kBAAC,EAAD,CAAyBkO,UAAWF,EAAeE,UAAW5H,gBAAiBoL,IAC/E,kBAAC,EAAD,CAAoB1D,eAAgBA,EAAgB1H,gBAAiBoL,KAEvE,kBAAC,EAAD,CAAmB1D,eAAgBA,EAAgBnG,SAAUtD,EAAc6N,SACzE9L,gBAAiBoL,EAAevD,mBAAoBA,IACtD,kBAAC,EAAD,CAAuBH,eAAgBA,EAAgB1H,gBAAiBoL","file":"static/js/3.e60b3fc3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <filter id=\"dropshadow\" height=\"130%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n          <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n          <feComponentTransfer>\r\n            <feFuncA type=\"linear\" slope=\"0.5\" />\r\n          </feComponentTransfer>\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <defs>\r\n        <filter id=\"dropshadow-color\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\r\n          <feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offsetBlur\" />\r\n          <feFlood floodColor=\"var(--color2-border)\" floodOpacity=\"0.6\" result=\"offsetColor\" />\r\n          <feComposite in=\"offsetColor\" in2=\"offsetBlur\" operator=\"in\" result=\"offsetBlur\" />\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState } from 'react';\r\n\r\nfunction FilterInput({ list = [], filterKeys = [], placeholder = 'Search',\r\n  onFilter }) {\r\n\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const updateFilterValue = ev => {\r\n    console.log('updateFilterValue');\r\n    setFilterValue(ev.target.value);\r\n    const value = ev.target.value.toLowerCase();\r\n    if (!value) onFilter(null);\r\n    else {\r\n      const filteredList = list.filter(item => filterKeys.some(key => item[key].toLowerCase().includes(value)));\r\n      onFilter(filteredList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <label className=\"text-filter\">\r\n      <input className=\"filter-input\" type=\"text\" placeholder={placeholder}\r\n        value={filterValue} onChange={updateFilterValue} />\r\n      {filterValue &&\r\n        <div className=\"clear-button\" onClick={() => updateFilterValue({ target: { value: '' } })}>\r\n          <svg className=\"clear-button-svg\" focusable=\"false\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\r\n          </svg>\r\n        </div>\r\n      }\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React, { useEffect } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction CountryDetailsTitle({ country, sounds }) {\r\n\r\n  const isWorld = country.name === 'World';\r\n  const { isCountryVoice } = sounds;\r\n\r\n  const countryIcon = (() => {\r\n    return isWorld\r\n      // ? <img className=\"country-flag\" src={UtilsService.getSrc(`earth.gif`)} alt=\"Earth\" />\r\n      ? <video className=\"country-earth\" autoPlay loop muted playsInline loading=\"lazy\">\r\n        <source src={UtilsService.getSrc(`earth.mp4`)} type=\"video/mp4\" />\r\n      </video>\r\n      : <img className=\"country-flag\" alt=\"Flag\" title={country.name}\r\n        src={UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`)} />\r\n  })()\r\n\r\n  \r\n  useEffect(() => {\r\n    if (isCountryVoice && !isWorld) {\r\n      const msg = new SpeechSynthesisUtterance();\r\n      msg.text = country.name;\r\n      // const voices = window.speechSynthesis.getVoices();\r\n      // msg.voice = voices[1];\r\n      msg.voice = window.speechSynthesis.getVoices()[1];\r\n      msg.voiceURI = \"native\";\r\n      msg.volume = 1;\r\n      msg.rate = 1;\r\n      msg.pitch = 0.8;\r\n      msg.lang = 'en-US';\r\n      speechSynthesis.speak(msg);\r\n    }\r\n  }, [country, isCountryVoice, isWorld])\r\n\r\n  return (\r\n    <div className=\"country-details-title\">\r\n      <div className={`wrap-country-icon ${isWorld ? 'earth' : 'flag'}`}>\r\n        {countryIcon}\r\n      </div>\r\n      <div className=\"wrap-country-title\">\r\n        <h2>{country.name}</h2>\r\n        <span className=\"continent\">{country.continent}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsTitle;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport {\r\n  POPULATION, CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS,\r\n  getCoronaDataKeys, getDataKeyByKey\r\n} from '../../../constants/DataKeys';\r\n\r\nfunction CountryDetailsList({ country }) {\r\n\r\n  const categoriesToAddIcon = [CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS];\r\n  const coronaDetails = getCoronaDataKeys().map(category => {\r\n    const isWishIcon = categoriesToAddIcon.some(key => key === category.key);\r\n    const value = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const dividBy = category.key === CASES ? POPULATION : category.dividBy;\r\n    const percent = country[category.key] / country[dividBy] * 100;\r\n    return <li className=\"country-details-item\" key={category.key} style={{ color: category.colorHEX }}>\r\n      <span className=\"title\">\r\n        {category.title}:&nbsp;\r\n        {isWishIcon && <div className=\"wrap-icon-svg\">{category.svgIcon}</div>}\r\n      </span>\r\n      <span className=\"value\" title={value}>{value}</span>\r\n      {dividBy && !!country[category.key] &&\r\n        <span className=\"percent\" title={percent.toFixed(2)}>\r\n          {Number(percent.toFixed(0)) !== 0 ? percent.toFixed(0) : percent.toFixed(2)}\r\n          %\r\n        </span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  const populationDetails = (() => {\r\n    const populationData = getDataKeyByKey(POPULATION);\r\n    const value = UtilsService.numberWithCommas(country[populationData.key]);\r\n    return <li className=\"country-details-item\">\r\n      <span className=\"title\">{populationData.title}:&nbsp;</span>\r\n      <div className=\"value population\">\r\n        <span title={value}>{value}</span>\r\n        <span className=\"wrap-icon-svg\">\r\n          <svg viewBox=\"0 0 512 512\">\r\n            <circle fill=\"currentColor\" cx=\"256\" cy=\"378.5\" r=\"25\" />\r\n            <path fill=\"currentColor\" d=\"M256,0C114.516,0,0,114.497,0,256c0,141.484,114.497,256,256,256c141.484,0,256-114.497,256-256\r\n\t\t\t\tC512,114.516,397.503,0,256,0z M256,472c-119.377,0-216-96.607-216-216c0-119.377,96.607-216,216-216\r\n\t\t\t\tc119.377,0,216,96.607,216,216C472,375.377,375.393,472,256,472z\"/>\r\n            <path fill=\"currentColor\" d=\"M256,128.5c-44.112,0-80,35.888-80,80c0,11.046,8.954,20,20,20s20-8.954,20-20c0-22.056,17.944-40,40-40\r\n\t\t\t\tc22.056,0,40,17.944,40,40c0,22.056-17.944,40-40,40c-11.046,0-20,8.954-20,20v50c0,11.046,8.954,20,20,20\r\n\t\t\t\tc11.046,0,20-8.954,20-20v-32.531c34.466-8.903,60-40.26,60-77.469C336,164.388,300.112,128.5,256,128.5z\"/>\r\n          </svg>\r\n          <div className=\"population-info\">\r\n            <span>Population of 2020</span>\r\n          </div>\r\n        </span>\r\n      </div>\r\n    </li>\r\n  })()\r\n\r\n  return (\r\n    <ul className=\"country-details-list\">\r\n      {populationDetails}\r\n      {coronaDetails}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport CountryDetailsTitle from './CountryDetailsTitle';\r\nimport CountryDetailsList from './CountryDetailsList';\r\n\r\nfunction CountryDetails({ country }) {\r\n\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n  const sounds = settingsStore ? settingsStore.sounds : { sounds: false };\r\n  return (\r\n    <div className=\"country-details flex-col\">\r\n      <CountryDetailsTitle country={country} sounds={sounds} />\r\n      <CountryDetailsList country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport { ACTIVE, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nfunction GCircles({ circlesDataKey = ACTIVE, countries, dynamicRatio, args }) {\r\n\r\n  const countriesCircles = countries.map(country => {\r\n    const calcRadius = (country[circlesDataKey] / 1000).toFixed();\r\n    const radius = calcRadius > 100 ? 18 : calcRadius > 50 ? 14 : calcRadius > 10 ? 11 :  calcRadius > 2 ? 8 : 6;\r\n    const shortNum = UtilsService.numberToShortString(country[circlesDataKey]);\r\n    if (!shortNum) return '';\r\n    const dataKey = getDataKeyByKey(circlesDataKey);\r\n    // const fill = `${dataKey.colorHEX}1a`;\r\n    const fill = `${dataKey.colorHEX}20`;\r\n    return <g key={country.id}>\r\n      <circle className=\"country-circle-data\" name={country.name} style={{ fill }}\r\n        // style={{ cx: country.centerPoint.x, cy: country.centerPoint.y, r: radius * dynamicRatio }}\r\n        cx={country.centerPoint.x} cy={country.centerPoint.y} r={radius * dynamicRatio}\r\n      />\r\n      <text className=\"circle-text\" x={country.centerPoint.x} y={country.centerPoint.y}\r\n        dy={`${radius * dynamicRatio / 3}px`} fontSize={`${radius * 0.85 * dynamicRatio}px`}>\r\n        {shortNum}\r\n      </text>\r\n    </g>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-circles\" style={{ strokeWidth: args.initStroke * dynamicRatio }}>\r\n      {countriesCircles}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GCircles;","import React, { useEffect, useRef } from \"react\";\r\nimport countriesLabels from \"../../../services/data/countriesLabels.json\";\r\n\r\nfunction GPaths({ countries, selectedCountry, dynamicRatio, args, minMapZoom, didDrag,\r\n  pathClassName, currPathName, isDragging, initZoom, isAutoFocus, isTooltipShow,\r\n  onSetViewBox, onSetDynamicRatio, onSetMapView, onSelectCountry }) {\r\n\r\n  const selectedCountryRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!selectedCountryRef.current || !isAutoFocus) return;\r\n    const bBox = selectedCountryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    const x = bBoxX - minMapZoom / 2, y = bBoxY - minMapZoom / 2, zoom = max + minMapZoom;\r\n    onSetViewBox(`${x} ${y} ${zoom} ${zoom}`);\r\n    onSetDynamicRatio(zoom / initZoom);\r\n    onSetMapView({ zoom, x, y });\r\n  }, [selectedCountry, onSetViewBox, onSetDynamicRatio, onSetMapView, initZoom, minMapZoom, isAutoFocus])\r\n\r\n  const countriesPaths = countries.map(country => {\r\n    const isSelected = country.name === selectedCountry.name;\r\n    const classSelected = isSelected ? 'selected' : '';\r\n    const isSelecting = isDragging && !didDrag && currPathName === country.name ? 'selecting' : '';\r\n    return <path className={`${pathClassName} ${classSelected} ${isSelecting}`} key={country.id}\r\n      alpha2={country.alpha2} name={country.name} d={country.d}\r\n      onClick={() => !didDrag && onSelectCountry(country)}\r\n      ref={isSelected ? selectedCountryRef : undefined}>\r\n      {!isTooltipShow && <title>{country.name}</title>}\r\n    </path>\r\n  })\r\n\r\n  const countriesPathsLabels = countriesLabels.map(country => {\r\n    return <path className=\"country-path-label\" d={country.d} key={country.id}></path>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-paths\" style={{ strokeWidth: args.initStroke * dynamicRatio, filter: 'url(#dropshadow)' }}>\r\n      {countriesPaths}\r\n      {countriesPathsLabels}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GPaths;","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nfunction MapTooltip({ tooltip }) {\r\n\r\n  return (\r\n    <div className=\"map-tooltip\" style={tooltip.style}>\r\n      <img className=\"tooltip-img\" alt=\"Flag\"\r\n        src={UtilsService.getImgSrc(`flags/${tooltip.alpha2.toLowerCase()}.png`)} />\r\n      <span className=\"tooltip-title\">{tooltip.name}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapTooltip;","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\n\r\nimport SvgDefsFilterShadow from '../../helpers/mapHelpers/SvgDefsFilterShadow';\r\nimport GCircles from './GCircles';\r\nimport GPaths from './GPaths';\r\nimport MapTooltip from './MapTooltip';\r\n\r\nfunction SvgCountriesMap({ countries, selectedCountry,\r\n  settings: { isCirclesShow, circlesDataKey, isAutoFocus, isTooltipShow },\r\n  onSelectCountry}) {\r\n\r\n  const initZoom = 554;\r\n  const baseMap = { width: 954, height: 514 };\r\n\r\n  const svgRef = useRef(initZoom);\r\n\r\n  const args = {\r\n    minMapZoom: 30, maxMapZoom: 1100, ratioUpdateZoom: 0.15,\r\n    minTopSvg: (baseMap.height - initZoom) / 2, minLeftSvg: (baseMap.width - initZoom) / 2,\r\n    initFontSize: initZoom / 30, initStroke: initZoom / 1000\r\n  };\r\n\r\n  const [viewBox, setViewBox] = useState(`${args.minLeftSvg} ${args.minTopSvg} ${initZoom} ${initZoom}`);\r\n  const [mapView, setMapView] = useState({ zoom: initZoom, x: args.minLeftSvg, y: args.minTopSvg });\r\n  const [dynamicRatio, setDynamicRatio] = useState(1);\r\n\r\n  const [didDrag, setDidDrag] = useState(false);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [pointerDiff, setPointerDiff] = useState({ x: 1, y: 1 });\r\n  const [tooltip, setTooltip] = useState(null);\r\n\r\n  const [currPathName, setCurrPathName] = useState(null);\r\n\r\n  const handleWheel = useCallback(ev => {\r\n    const isMouseOnSvgMap = ev.path && ev.path.some(path => path.className && path.className.baseVal\r\n      && path.className.baseVal.includes(svgClassName));\r\n    if (!isMouseOnSvgMap) return;\r\n    const updateZoom = mapView.zoom * args.ratioUpdateZoom;\r\n    const copy = mapView;\r\n    if (ev.deltaY > 0) {\r\n      if (mapView.zoom + updateZoom + args.minMapZoom < args.maxMapZoom) {\r\n        copy.zoom = copy.zoom + updateZoom;\r\n        copy.x = copy.x - updateZoom / 2;\r\n        copy.y = copy.y - updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    } else {\r\n      if (mapView.zoom - updateZoom - args.minMapZoom > 0) {\r\n        copy.zoom = copy.zoom - updateZoom;\r\n        copy.x = copy.x + updateZoom / 2;\r\n        copy.y = copy.y + updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    }\r\n    setDynamicRatio(mapView.zoom / initZoom);\r\n    setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n  }, [mapView, args]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n    return () => window.removeEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n  }, [handleWheel])\r\n\r\n  const startDrag = ev => {\r\n    setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n    setIsDragging(true);\r\n    setCurrPathName(ev.target.getAttribute('name'));\r\n  }\r\n  const handleMouseMove = ev => {\r\n    if (isDragging) {\r\n      const ratioBySvgHeight = initZoom / svgRef.current.clientHeight;\r\n      const x = mapView.x - (ev.clientX - pointerDiff.x) * dynamicRatio * ratioBySvgHeight;\r\n      const y = mapView.y - (ev.clientY - pointerDiff.y) * dynamicRatio * ratioBySvgHeight;\r\n      setMapView({ ...mapView, x, y });\r\n      setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n      setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n      (ev.movementX !== 0 || ev.movementY !== 0) && setDidDrag(true);\r\n    }\r\n    if (isTooltipShow) {\r\n      if (ev.target.getAttribute('class').includes(pathClassName)) {\r\n        setTooltip({\r\n          name: ev.target.getAttribute('name'),\r\n          alpha2: ev.target.getAttribute('alpha2'),\r\n          style: { top: ev.nativeEvent.offsetY - 50, left: ev.nativeEvent.offsetX + 25 }\r\n        });\r\n      } else {\r\n        setTooltip(null);\r\n      }\r\n    }\r\n  }\r\n  const stopDrag = () => {\r\n    setIsDragging(false);\r\n    setTimeout(() => setDidDrag(false), 0);\r\n  }\r\n  const handleMouseLeave = () => {\r\n    stopDrag();\r\n    setTooltip(null);\r\n  }\r\n\r\n  const handleScroll = ev => {\r\n    console.log(ev);\r\n  }\r\n\r\n  const pathClassName = 'country-path';\r\n  const svgClassName = 'svg-map';\r\n\r\n  return (\r\n    <>\r\n      <svg className={svgClassName} viewBox={viewBox} ref={svgRef}\r\n        onScroll={handleScroll} onWheel={handleWheel}\r\n        onMouseDown={startDrag} onMouseMove={handleMouseMove} onMouseUp={stopDrag} onMouseLeave={handleMouseLeave}>\r\n        <SvgDefsFilterShadow />\r\n        <GPaths countries={countries} selectedCountry={selectedCountry} dynamicRatio={dynamicRatio} args={args}\r\n          currPathName={currPathName} isDragging={isDragging} pathClassName={pathClassName} didDrag={didDrag}\r\n          initZoom={initZoom} minMapZoom={args.minMapZoom} isAutoFocus={isAutoFocus} isTooltipShow={isTooltipShow}\r\n          onSetViewBox={setViewBox} onSetDynamicRatio={setDynamicRatio} onSetMapView={setMapView}\r\n          onSelectCountry={onSelectCountry} />\r\n        {isCirclesShow &&\r\n          <GCircles circlesDataKey={circlesDataKey} countries={countries} dynamicRatio={dynamicRatio} args={args} />\r\n        }\r\n      </svg>\r\n\r\n      {isTooltipShow && tooltip &&\r\n        <MapTooltip tooltip={tooltip} />\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgCountriesMap;","import React from \"react\";\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, TESTS, ACTIVE, getDataKeysByKeys } from '../../../constants/DataKeys';\r\n\r\nfunction MapOptions({ settings: { isCirclesShow, isAutoFocus, circlesDataKey, isTooltipShow, isGraphShow },\r\n  onToggleIsCirclesShow, onToggleIsAutoFocus, onSetCirclesDataKey, onToggleIsTooltipShow, onToggleIsGraphShow }) {\r\n\r\n  const circleClicked = key => {\r\n    if (circlesDataKey !== key) onSetCirclesDataKey(key);\r\n  }\r\n\r\n  const circlesData = getDataKeysByKeys([ACTIVE, CASES, DEATHS, RECOVERED, TESTS]);\r\n\r\n  const circlesDataButtons = circlesData.map(circle => {\r\n    const isActive = circlesDataKey === circle.key;\r\n    return <Button key={circle.key} text={circle.title} type={`${circle.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }}\r\n      onClick={() => circleClicked(circle.key)} />\r\n  })\r\n\r\n  return (\r\n    <div className=\"map-options\">\r\n\r\n      <div className=\"main-options\">\r\n        <Button text=\"Circles\" textCondition={isCirclesShow} isBoolean={true}\r\n          onClick={onToggleIsCirclesShow} />\r\n        <Button text=\"Auto Focus\" textCondition={isAutoFocus} isBoolean={true}\r\n          onClick={onToggleIsAutoFocus} />\r\n        <Button text=\"Tooltip\" textCondition={isTooltipShow} isBoolean={true}\r\n          onClick={onToggleIsTooltipShow} />\r\n        <Button text=\"Graph\" textCondition={isGraphShow} isBoolean={true}\r\n          onClick={onToggleIsGraphShow} />\r\n      </div>\r\n\r\n      {isCirclesShow &&\r\n        <div className=\"circles-options\">\r\n          {circlesDataButtons}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapOptions;","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction GraphColumnsPreview({ arr, maxHeight, graphRatio, graphDataType }) {\r\n\r\n  const calcLine = (item, idx) => {\r\n    const diff = (arr[idx + 1].value - item.value) / maxHeight * 100;\r\n    const colWidth = 1 / arr.length * 100 * graphRatio;\r\n    const calcSlant = Math.sqrt(diff * diff + colWidth * colWidth);\r\n    const tanAngle = Math.atan(diff / colWidth) * 180 / Math.PI;\r\n    return { angle: tanAngle, slant: calcSlant };\r\n  }\r\n\r\n  const list = arr.map((item, idx) => {\r\n    const width = 1 / arr.length * 100 + '%';\r\n    const height = item.value / maxHeight * 100 + '%';\r\n    const backgroundColor = graphDataType.colorHEX;\r\n    const line = arr[idx + 1] ? calcLine(item, idx) : 0;\r\n    const style = {\r\n      top: `-${line.slant * 2}px`,\r\n      transform: `rotate(${line.angle * -1}deg)`\r\n    }\r\n    return <li className=\"column\" key={item.date} style={{ width }}>\r\n      <div className=\"column-percent\" style={{ height, backgroundColor }}>\r\n        <div className=\"wrap-value\">\r\n          <span className=\"value\">{UtilsService.numberWithCommas(item.value)}</span>\r\n        </div>\r\n        {arr[idx + 1] && <span className=\"line\" style={style}></span>}\r\n      </div>\r\n    </li>\r\n  })\r\n\r\n  return (\r\n    <ul className=\"columns\">\r\n      {list}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default GraphColumnsPreview;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nimport GraphColumnsPreview from './GraphColumnsPreview';\r\n\r\nfunction GraphColumns({ selectedCountry }) {\r\n\r\n  const graphRef = useRef();\r\n  const [graphRatio, setGraphRatio] = useState();\r\n  const [graphType, setGraphType] = useState(CASES);\r\n\r\n  const typeClicked = key => {\r\n    if (graphType !== key) setGraphType(key);\r\n  }\r\n\r\n  const graphDataTypes = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n  const graphDataType = graphType === CASES\r\n    ? { ...getDataKeyByKey(graphType), color: 'teal', colorHEX: '#008080' }\r\n    : getDataKeyByKey(graphType);\r\n\r\n  const graphTypesButtons = graphDataTypes.map(type => {\r\n    const isActive = graphType === type.key;\r\n    return <Button key={type.key} text={type.title} type={`${type.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }} onClick={() => typeClicked(type.key)} />\r\n  })\r\n\r\n  const historyObj = selectedCountry.history ? selectedCountry.history.timeline[graphType] : {};\r\n  const historyArr = Object.keys(historyObj).map(key => ({ date: key, value: historyObj[key] }));\r\n\r\n  const maxHeight = historyArr.length ? historyArr[historyArr.length - 1].value * 1.05 : 0;\r\n\r\n  useEffect(() => {\r\n    if (graphRef.current && !graphRatio) {\r\n      setGraphRatio(graphRef.current.clientWidth / graphRef.current.clientHeight);\r\n    }\r\n  }, [graphRef, graphRatio])\r\n\r\n  return (\r\n    <div className=\"graph-columns\" ref={graphRef}>\r\n      <div className=\"graph-options\">\r\n        <div className=\"graph-text\">\r\n          <p>\r\n            <span className=\"text\">{`From ${historyArr[0].date} To ${historyArr[historyArr.length - 1].date}`}</span>\r\n          </p>\r\n        </div>\r\n        <div className=\"buttons-options flex-center\">\r\n          {graphTypesButtons}\r\n        </div>\r\n      </div>\r\n      \r\n      {graphRef && graphRef.current &&\r\n        <GraphColumnsPreview arr={historyArr} maxHeight={maxHeight} graphRatio={graphRatio}\r\n          graphDataType={graphDataType} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphColumns;\r\n// export default React.memo(GraphColumns);\r\n\r\n","import React from \"react\";\r\n\r\nimport SvgCountriesMap from './mapUtils/SvgCountriesMap';\r\nimport MapOptions from './mapUtils/MapOptions';\r\nimport GraphColumns from '../helpers/graphs/GraphColumns';\r\n\r\nfunction WorldDashboardMap({ settings, countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry, mapOptionsFunction }) {\r\n\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countries[selectedCountryIndex] : worldData;\r\n\r\n  const { isGraphShow } = settings;\r\n  return (\r\n    <div className=\"world-dashboard-map\">\r\n      <SvgCountriesMap countries={countries} settings={settings} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      <MapOptions settings={settings} {...mapOptionsFunction} />\r\n      {isGraphShow && selectedCountry.history &&\r\n        <div className=\"wrap-graph-columns\">\r\n          <GraphColumns selectedCountry={selectedCountry} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardMap;","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport VirusSVG from '../helpers/svg-icons/VirusSVG';\r\nimport { CASES, DEATHS, RECOVERED, ACTIVE, RANK, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardListItem({ country, selectedCountry, onSelectCountry, countryRef }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  const src = UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`);\r\n\r\n  const caterogies = getDataKeysByKeys([ACTIVE, CASES, DEATHS, RECOVERED]);\r\n\r\n  const categoryView = caterogies.map(category => {\r\n    const shortNum = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const commasNum = UtilsService.numberWithCommas(country[category.key]);\r\n    const APercent = (country[ACTIVE] / country[CASES] * 100).toFixed();\r\n    const activePercent = !isNaN(APercent) && APercent > 0 ? APercent + '%' : '';\r\n    return <div className=\"category flex-col\" key={category.key}\r\n      title={`${commasNum} ${category.title}`}>\r\n      <span className=\"title\">\r\n        {category.title}\r\n        {category.key === ACTIVE && <span className=\"title-percent\">\r\n          &nbsp;{activePercent}\r\n        </span>}\r\n      </span>\r\n      <span className=\"value\">{shortNum}</span>\r\n    </div>\r\n  })\r\n\r\n  return (\r\n    <li className={`country ${isSelected}`} ref={countryRef}\r\n      onClick={() => onSelectCountry(country)}>\r\n      <span className=\"numeric-code\" title={`Numeric Code ${country.numericCode}`}>\r\n        N-C {country.numericCode}\r\n      </span>\r\n      <div className=\"top-section\">\r\n        <div className=\"wrap-country-flag\">\r\n          <img className=\"country-flag\" src={src} alt=\"Flag\" title={country.name} />\r\n        </div>\r\n        <div className=\"wrap-country-status\">\r\n          <h3 className=\"country-name\">{country.name}</h3>\r\n          <div className=\"status-details\">\r\n            <span className=\"rank\" title={`Rank ${country[RANK] + 1}`}>\r\n              <span className=\"rank-icon\">❱❱</span>\r\n              {country[RANK] + 1}\r\n            </span>\r\n            <div className=\"cases\" title={`Today Cases ${UtilsService.numberWithCommas(country.todayCases)}`}>\r\n              <div className=\"wrap-icon-svg\"><VirusSVG /></div>\r\n              <span className=\"cases-value\">+{UtilsService.numberWithCommas(country.todayCases)}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-section\">\r\n        {categoryView}\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardListItem;\r\n","import React from 'react';\r\nimport FilterInput from '../helpers/FilterInput';\r\nimport WorldDashboardListItem from './WorldDashboardListItem';\r\n\r\nfunction WorldDashboardList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  // console.log('WorldDashboardList');\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const [filteredCountries, setFilteredCountries] = React.useState(countries.filter((item, idx) => idx < 40));\r\n  const [isFiltered, setIsFiltered] = React.useState(false);\r\n  const [isScroll, setIsScroll] = React.useState(false);\r\n\r\n  const selectedCountryRef = React.useRef(null);\r\n\r\n  const list = filteredCountries.map((country, idx) => {\r\n    const countryRef = selectedCountry.alpha2 === country.alpha2 ? selectedCountryRef : null;\r\n    return (isScroll || isFiltered || idx < 10)\r\n      ? <WorldDashboardListItem key={country.id} countryRef={countryRef}\r\n        country={country} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      : <li key={idx} ref={countryRef} style={{ height: '6.5rem' }}></li>\r\n  })\r\n\r\n  const handleScroll = ev => {\r\n    setIsScroll(true);\r\n    if (isFiltered) return;\r\n    const scrollEnd = ev.target.scrollTop + 100 >= ev.target.scrollHeight - ev.target.clientHeight;\r\n    if (scrollEnd) setFilteredCountries(countries);\r\n  }\r\n\r\n  const filterCountries = filteredList => {\r\n    if (filteredList) {\r\n      setFilteredCountries(filteredList);\r\n      setIsFiltered(true);\r\n    } else {\r\n      setFilteredCountries(countries.filter((item, idx) => idx < 40));\r\n    }\r\n  }\r\n\r\n  const handleUserKeyPress = React.useCallback((ev) => {\r\n    const arrowUpOrDown = ev.code === 'ArrowDown' ? 1 : ev.code === 'ArrowUp' ? -1 : 0;\r\n    if (!arrowUpOrDown || selectedCountryIndex + arrowUpOrDown < 0\r\n      || selectedCountryIndex + arrowUpOrDown > filteredCountries.length - 1) return;\r\n    ev.preventDefault();\r\n    onSelectCountry(filteredCountries[selectedCountryIndex + arrowUpOrDown]);\r\n    selectedCountryRef.current.scrollIntoView({ block: 'center' });\r\n  }, [filteredCountries, selectedCountryIndex, onSelectCountry])\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener('keyup', handleUserKeyPress);\r\n    return (() => window.removeEventListener('keyup', handleUserKeyPress));\r\n  }, [handleUserKeyPress])\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      if (selectedCountryRef.current) selectedCountryRef.current.scrollIntoView({ block: 'center' });\r\n    }, 0)\r\n  }, [selectedCountryRef])\r\n\r\n  return (\r\n    <div className=\"world-dashboard-list flex-col\">\r\n      <div className=\"custom-filter-input\">\r\n        <FilterInput list={countries} filterKeys={['name']} placeholder=\"Search Country\"\r\n          onFilter={filterCountries} />\r\n      </div>\r\n      <ul className=\"countries\" onScroll={handleScroll}>\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardList;\r\n","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardWorldData({ worldData, onSelectCountry }) {\r\n\r\n  const data = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n\r\n  const list = data.map(category => (\r\n    <li className=\"world-detail flex-col\" key={category.key} onClick={() => onSelectCountry()}>\r\n      <span className=\"pseudo-border\"></span>\r\n      <p>{category.title}</p>\r\n      <p>{UtilsService.numberWithCommas(worldData[category.key])}</p>\r\n\r\n      {category.dividBy &&\r\n        <span className=\"wrap-precent\">\r\n          <span className=\"precent\">\r\n            {(worldData[category.key] / worldData[category.dividBy] * 100).toFixed()}%\r\n          </span>\r\n        </span>\r\n      }\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <div className=\"world-dashboard-world-details\">\r\n      <h2 className=\"title\">World</h2>\r\n      <ul className=\"world-details\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardWorldData;\r\n","import React from 'react';\r\n\r\nfunction VirusLogoSVG() {\r\n  return (\r\n    <svg role=\"img\" viewBox=\"0 0 50 50\">\r\n      <path fill=\"currentColor\" d=\"M 25 3 C 12.867715 3 3 12.867715 3 25 C 3 29.006019 4.0814389 32.738815 5.9296875 35.96875 L 3.5839844 35.251953 A 2.0002 2.0002 0 1 0 2.4160156 39.076172 L 12.138672 42.046875 L 13.490234 32.035156 A 2.0002 2.0002 0 0 0 11.550781 29.740234 A 2.0002 2.0002 0 0 0 9.5273438 31.5 L 9.2304688 33.699219 C 7.8172419 31.125736 7 28.181418 7 25 C 7 15.026285 15.026285 7 25 7 L 27 7 L 27 3 L 25 3 z M 31.720703 3.9511719 L 30.160156 7.640625 L 32.009766 8.4199219 L 32.009766 8.4101562 C 33.849766 9.1891562 32.010609 8.4104063 33.849609 9.1914062 L 35.410156 5.5117188 L 31.720703 3.9511719 z M 37.861328 7.953125 L 36.509766 17.964844 A 2.0002 2.0002 0 1 0 40.472656 18.5 L 40.769531 16.300781 C 42.182758 18.874264 43 21.818582 43 25 C 43 34.973715 34.973715 43 25 43 L 23 43 L 23 47 L 25 47 C 37.132285 47 47 37.132285 47 25 C 47 20.993981 45.918561 17.261185 44.070312 14.03125 L 46.416016 14.748047 A 2.0002 2.0002 0 1 0 47.583984 10.923828 L 37.861328 7.953125 z M 16.150391 40.810547 L 14.589844 44.490234 L 16.429688 45.269531 C 18.279688 46.049531 16.43025 45.269828 18.28125 46.048828 L 19.830078 42.359375 L 17.990234 41.580078 L 17.990234 41.589844 L 16.150391 40.810547 z\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default VirusLogoSVG;\r\n","import React, { useState } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport * as DataKeys from '../../../constants/DataKeys';\r\nimport ReplaceSVG from '../svg-icons/ReplaceSVG';\r\nimport Button from '../../elements/Button';\r\n\r\nfunction GraphRows({ countries, onSelectCountry }) {\r\n\r\n  const [rowsAmount, setRowsAmount] = useState(10);\r\n  const [graphBy, setGraphBy] = useState(DataKeys.TODAY_DEATHS);\r\n  const graphDataKey = DataKeys.getDataKeyByKey(graphBy);\r\n\r\n  const top10 = [...countries].sort((b, a) => (a[graphBy] > b[graphBy]) ? 1 : ((b[graphBy] > a[graphBy]) ? -1 : 0))\r\n    .slice(0, rowsAmount);\r\n  // .filter((item, idx) => idx < rowsAmount);\r\n\r\n  const list = top10.map(country => {\r\n    const width = country[graphBy] / top10[0][graphBy] * 100 + '%';\r\n    const backgroundColor = graphDataKey.colorHEX + '80';\r\n    return <li className=\"row\" key={country.alpha2} style={{ width, backgroundColor }}>\r\n      <span className=\"name\" onClick={() => onSelectCountry(country)}>{country.name}</span>\r\n      <span className=\"amount\">&nbsp;{UtilsService.numberWithCommas(country[graphBy])}</span>\r\n    </li>\r\n  })\r\n\r\n  const toggleGraph = () => {\r\n    if (graphBy === DataKeys.TODAY_DEATHS) setGraphBy(DataKeys.DEATHS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.DEATHS_PER_ONE_MILLION) setGraphBy(DataKeys.DEATHS);\r\n    if (graphBy === DataKeys.DEATHS) setGraphBy(DataKeys.TODAY_CASES);\r\n    if (graphBy === DataKeys.TODAY_CASES) setGraphBy(DataKeys.CASES_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.CASES_PER_ONE_MILLION) setGraphBy(DataKeys.CASES);\r\n    if (graphBy === DataKeys.CASES) setGraphBy(DataKeys.TESTS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.TESTS_PER_ONE_MILLION) setGraphBy(DataKeys.CRITICAL);\r\n    if (graphBy === DataKeys.CRITICAL) setGraphBy(DataKeys.RECOVERED);\r\n    if (graphBy === DataKeys.RECOVERED) setGraphBy(DataKeys.ACTIVE);\r\n    if (graphBy === DataKeys.ACTIVE) setGraphBy(DataKeys.TODAY_DEATHS);\r\n  }\r\n\r\n  const diff = 5;\r\n  return (\r\n    <div className=\"graph-rows\">\r\n      <div className=\"wrap-title\" onClick={toggleGraph}>\r\n        <div className=\"wrap-icon-svg\"><ReplaceSVG /></div>\r\n        <h3 className=\"title\">{graphDataKey.title}</h3>\r\n        <div className=\"wrap-icon-svg\" style={{ color: graphDataKey.color }}>{graphDataKey.svgIcon}</div>\r\n      </div>\r\n      <ul className=\"rows\">\r\n        {list}\r\n        <li className=\"flex-evenly\">\r\n          {rowsAmount > diff &&\r\n            <Button text={`− ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount - diff)} />\r\n          }\r\n          {rowsAmount < diff * 10 &&\r\n            <Button text={`+ ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount + diff)} />\r\n          }\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphRows;\r\n","import React from 'react';\r\nimport GraphRows from '../helpers/graphs/GraphRows';\r\nimport CountryDetails from '../helpers/countryDetails';\r\n\r\nfunction WorldDashboardDetails({ countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : worldData;\r\n\r\n  return (\r\n    <div className=\"world-dashboard-details flex-col\">\r\n      <CountryDetails country={selectedCountry}/>\r\n      <GraphRows countries={countries} onSelectCountry={onSelectCountry} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardDetails;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport { WORLD_DASHBOARD } from '../constants/RouterPaths';\r\n\r\nimport WorldDashboardMap from '../cmps/worldDashboard/WorldDashboardMap';\r\nimport WorldDashboardList from '../cmps/worldDashboard/WorldDashboardList';\r\nimport WorldDashboardWorldData from '../cmps/worldDashboard/WorldDashboardWorldData';\r\nimport WorldDashboardDetails from '../cmps/worldDashboard/WorldDashboardDetails';\r\n\r\nfunction WorldDashboard() {\r\n\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!countriesStore) return;\r\n    const { countries, selectedCountryIndex } = countriesStore;\r\n    const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n    const isParamsInUrlWithCountry = params.alpha2 && !isSelectedCountry;\r\n    if (isParamsInUrlWithCountry) {\r\n      const country = countries.find(country => country.alpha2 === params.alpha2);\r\n      dispatch(actions.selectCountry(country));\r\n    }\r\n    const isUrlCmpUnmount = !params.alpha2 && isSelectedCountry;\r\n    if (isUrlCmpUnmount) {\r\n      history.push(`/${WORLD_DASHBOARD}/${countries[selectedCountryIndex].alpha2}`);\r\n    }\r\n  }, [dispatch, countriesStore, params, history]);\r\n\r\n  // TODO: clean code!\r\n  const selectCountry = (country = null) => {\r\n    if (!country && !isSelectedCountry) return;\r\n    const isSameCountry = country && country.alpha2 === selectedCountry.alpha2;\r\n    const alpha2ToPush = country && !isSameCountry ? country.alpha2 : '';\r\n    history.push(`/${WORLD_DASHBOARD}/${alpha2ToPush}`);\r\n    dispatch(actions.selectCountry(country ? country : {}));\r\n  }\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n  const selectedCountry = isSelectedCountry\r\n    ? countriesStore.countries[selectedCountryIndex]\r\n    : countriesStore ? countriesStore.worldData : {};\r\n\r\n  const mapOptionsFunction = {\r\n    onToggleIsCirclesShow: () => dispatch(actions.toggleIsCirclesShow()),\r\n    onToggleIsAutoFocus: () => dispatch(actions.toggleIsAutoFocus()),\r\n    onSetCirclesDataKey: dataKey => dispatch(actions.setCirclesDataKey(dataKey)),\r\n    onToggleIsTooltipShow: () => dispatch(actions.toggleIsTooltipShow()),\r\n    onToggleIsGraphShow: () => dispatch(actions.toggleIsGraphShow()),\r\n  }\r\n\r\n  return (\r\n    <>{countriesStore && settingsStore && <>\r\n      <div className=\"world-dashboard\">\r\n        <div className=\"wrap-worldData-and-list flex-col overflow-hidden\">\r\n          <WorldDashboardWorldData worldData={countriesStore.worldData} onSelectCountry={selectCountry} />\r\n          <WorldDashboardList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        </div>\r\n        <WorldDashboardMap countriesStore={countriesStore} settings={settingsStore.worldMap}\r\n          onSelectCountry={selectCountry} mapOptionsFunction={mapOptionsFunction} />\r\n        <WorldDashboardDetails countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default WorldDashboard;\r\n"],"sourceRoot":""}