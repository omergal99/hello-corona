{"version":3,"sources":["cmps/helpers/mapHelpers/SvgDefsFilterShadow.js","cmps/helpers/FilterInput.js","cmps/helpers/countryDetails/CountryDetailsTitle.js","cmps/helpers/countryDetails/CountryDetailsList.js","cmps/helpers/countryDetails/index.js","cmps/worldDashboard/mapUtils/GCircles.js","cmps/worldDashboard/mapUtils/GPaths.js","cmps/worldDashboard/mapUtils/MapTooltip.js","cmps/worldDashboard/mapUtils/SvgCountriesMap.js","cmps/worldDashboard/mapUtils/MapOptions.js","cmps/helpers/graphs/GraphColumnsPreview.js","cmps/helpers/graphs/GraphColumns.js","cmps/worldDashboard/WorldDashboardMap.js","cmps/worldDashboard/WorldDashboardListItem.js","cmps/worldDashboard/WorldDashboardList.js","cmps/worldDashboard/WorldDashboardWorldData.js","cmps/helpers/svg-icons/ReplaceSVG.js","cmps/helpers/graphs/GraphRows.js","cmps/worldDashboard/WorldDashboardDetails.js","pages/WorldDashboard.js"],"names":["SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","type","slope","x","y","width","floodColor","floodOpacity","in2","operator","FilterInput","list","filterKeys","placeholder","onFilter","useState","filterValue","setFilterValue","className","value","onChange","ev","target","toLowerCase","filteredList","filter","item","some","key","includes","CountryDetailsTitle","country","isWorld","name","countryIcon","autoPlay","loop","muted","playsInline","loading","src","UtilsService","getSrc","alt","title","getImgSrc","alpha2","continent","CountryDetailsList","categoriesToAddIcon","CASES","DEATHS","RECOVERED","ACTIVE","CRITICAL","TESTS","coronaDetails","getCoronaDataKeys","map","category","isWishIcon","numberWithCommas","dividBy","POPULATION","percent","style","color","colorHEX","svgIcon","toFixed","Number","populationDetails","populationData","getDataKeyByKey","CountryDetails","GCircles","circlesDataKey","countries","dynamicRatio","args","countriesCircles","calcRadius","radius","shortNum","numberToShortString","dataKey","fill","cx","centerPoint","cy","r","fontSize","strokeWidth","initStroke","GPaths","selectedCountry","minMapZoom","didDrag","pathClassName","currPathName","isDragging","initZoom","isAutoFocus","isTooltipShow","onSetViewBox","onSetDynamicRatio","onSetMapView","onSelectCountry","selectedCountryRef","useRef","useEffect","current","bBox","getBBox","abs","Math","max","bBoxX","bBoxY","zoom","countriesPaths","isSelected","classSelected","isSelecting","d","onClick","ref","undefined","countriesPathsLabels","countriesLabels","MapTooltip","tooltip","SvgCountriesMap","settings","isCirclesShow","baseMap","svgRef","maxMapZoom","ratioUpdateZoom","minTopSvg","minLeftSvg","initFontSize","viewBox","setViewBox","mapView","setMapView","setDynamicRatio","setDidDrag","setIsDragging","pointerDiff","setPointerDiff","setTooltip","setCurrPathName","handleWheel","useCallback","path","baseVal","svgClassName","updateZoom","copy","deltaY","window","addEventListener","passive","removeEventListener","stopDrag","setTimeout","onScroll","console","log","onWheel","onMouseDown","clientX","clientY","getAttribute","onMouseMove","ratioBySvgHeight","clientHeight","movementX","movementY","top","nativeEvent","offsetY","left","offsetX","onMouseUp","onMouseLeave","MapOptions","onToggleIsCirclesShow","onToggleIsAutoFocus","onSetCirclesDataKey","onToggleIsTooltipShow","circlesDataButtons","getDataKeysByKeys","circle","isActive","Button","text","textCondition","isBoolean","GraphColumnsPreview","arr","maxHeight","graphRatio","graphDataType","idx","length","backgroundColor","line","diff","colWidth","calcSlant","sqrt","angle","atan","PI","slant","calcLine","transform","date","GraphColumns","graphRef","setGraphRatio","graphType","setGraphType","graphDataTypes","graphTypesButtons","historyObj","history","timeline","historyArr","Object","keys","clientWidth","WorldDashboardMap","countriesStore","selectedCountryIndex","worldData","WorldDashboardListItem","categoryView","commasNum","numericCode","RANK","todayCases","VirusSVG","WorldDashboardList","filteredCountries","setFilteredCountries","isFiltered","setIsFiltered","isScroll","setIsScroll","scrollTop","scrollHeight","WorldDashboardWorldData","VirusLogoSVG","role","GraphRows","rowsAmount","setRowsAmount","DataKeys","graphBy","setGraphBy","graphDataKey","top10","sort","b","a","slice","ReplaceSVG","fontWeight","WorldDashboardDetails","WorldDashboard","useSelector","state","settingsStore","dispatch","useDispatch","useHistory","params","useParams","isSelectedCountry","find","actions","selectCountry","push","WORLD_DASHBOARD","isSameCountry","alpha2ToPush","worldMap","toggleIsCirclesShow","toggleIsAutoFocus","setCirclesDataKey","toggleIsTooltipShow"],"mappings":"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","file":"static/js/3.f4442585.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <filter id=\"dropshadow\" height=\"130%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n          <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n          <feComponentTransfer>\r\n            <feFuncA type=\"linear\" slope=\"0.5\" />\r\n          </feComponentTransfer>\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <defs>\r\n        <filter id=\"dropshadow-color\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\r\n          <feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offsetBlur\" />\r\n          <feFlood floodColor=\"var(--color2-border)\" floodOpacity=\"0.6\" result=\"offsetColor\" />\r\n          <feComposite in=\"offsetColor\" in2=\"offsetBlur\" operator=\"in\" result=\"offsetBlur\" />\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState } from 'react';\r\n\r\nfunction FilterInput({ list = [], filterKeys = [], placeholder = 'Search',\r\n  onFilter }) {\r\n\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const updateFilterValue = ev => {\r\n    setFilterValue(ev.target.value);\r\n    const value = ev.target.value.toLowerCase();\r\n    if (!value) onFilter(list);\r\n    else {\r\n      const filteredList = list.filter(item => filterKeys.some(key => item[key].toLowerCase().includes(value)));\r\n      onFilter(filteredList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input className=\"filter-input\" type=\"text\" placeholder={placeholder}\r\n      value={filterValue} onChange={updateFilterValue} />\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction CountryDetailsTitle({ country }) {\r\n\r\n  const isWorld = country.name === 'World';\r\n\r\n  const countryIcon = (() => {\r\n    return isWorld\r\n      // ? <img className=\"country-flag\" src={UtilsService.getSrc(`earth.gif`)} alt=\"Earth\" />\r\n      ? <video className=\"country-earth\" autoPlay loop muted playsInline loading=\"lazy\">\r\n        <source src={UtilsService.getSrc(`earth.mp4`)} type=\"video/mp4\" />\r\n      </video>\r\n      : <img className=\"country-flag\" alt=\"Flag\" title={country.name}\r\n        src={UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`)} />\r\n  })()\r\n\r\n  return (\r\n    <div className=\"country-details-title\">\r\n      <div className={`wrap-country-icon ${isWorld ? 'earth' : 'flag'}`}>\r\n        {countryIcon}\r\n      </div>\r\n      <div className=\"wrap-country-title\">\r\n        <h2>{country.name}</h2>\r\n        <span className=\"continent\">{country.continent}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsTitle;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport {\r\n  POPULATION, CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS,\r\n  getCoronaDataKeys, getDataKeyByKey\r\n} from '../../../constants/DataKeys';\r\n\r\nfunction CountryDetailsList({ country }) {\r\n\r\n  const categoriesToAddIcon = [CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS];\r\n  const coronaDetails = getCoronaDataKeys().map(category => {\r\n    const isWishIcon = categoriesToAddIcon.some(key => key === category.key);\r\n    const value = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const dividBy = category.key === CASES ? POPULATION : category.dividBy;\r\n    const percent = country[category.key] / country[dividBy] * 100;\r\n    return <li className=\"country-details-item\" key={category.key} style={{ color: category.colorHEX }}>\r\n      <span className=\"title\">\r\n        {category.title}:&nbsp;\r\n        {isWishIcon && <div className=\"wrap-icon-svg\">{category.svgIcon}</div>}\r\n      </span>\r\n      <span className=\"value\" title={value}>{value}</span>\r\n      {dividBy && !!country[category.key] &&\r\n        <span className=\"percent\" title={percent.toFixed(2)}>\r\n          {Number(percent.toFixed(0)) !== 0 ? percent.toFixed(0) : percent.toFixed(2)}\r\n          %\r\n        </span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  const populationDetails = (() => {\r\n    const populationData = getDataKeyByKey(POPULATION);\r\n    const value = UtilsService.numberWithCommas(country[populationData.key]);\r\n    return <li className=\"country-details-item\">\r\n      <span className=\"title\">{populationData.title}:&nbsp;</span>\r\n      <span className=\"value population\" title={value}>{value}</span>\r\n    </li>\r\n  })()\r\n\r\n  return (\r\n    <ul className=\"country-details-list\">\r\n      {populationDetails}\r\n      {coronaDetails}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsList;\r\n","import React from 'react';\r\n\r\nimport CountryDetailsTitle from './CountryDetailsTitle';\r\nimport CountryDetailsList from './CountryDetailsList';\r\n\r\nfunction CountryDetails({ country }) {\r\n\r\n  return (\r\n    <div className=\"country-details flex-col\">\r\n      <CountryDetailsTitle country={country} />\r\n      <CountryDetailsList country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport { CASES, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nfunction GCircles({ circlesDataKey = CASES, countries, dynamicRatio, args }) {\r\n\r\n  const countriesCircles = countries.map(country => {\r\n    const calcRadius = (country[circlesDataKey] / 1000).toFixed();\r\n    // const radius = calcRadius > 15 ? 18 : calcRadius > 5 ? 14 : calcRadius > 1 ? 10 : 0;\r\n    const radius = calcRadius > 100 ? 18 : calcRadius > 50 ? 14 : calcRadius > 10 ? 11 :  calcRadius > 2 ? 8 : 0;\r\n    if (!radius) return '';\r\n    const shortNum = UtilsService.numberToShortString(country[circlesDataKey]);\r\n    const dataKey = getDataKeyByKey(circlesDataKey);\r\n    // const fill = `${dataKey.colorHEX}1a`;\r\n    const fill = `${dataKey.colorHEX}26`;\r\n    return <g key={country.id}>\r\n      <circle className=\"country-circle-data\" name={country.name} style={{ fill }}\r\n        // style={{ cx: country.centerPoint.x, cy: country.centerPoint.y, r: radius * dynamicRatio }}\r\n        cx={country.centerPoint.x} cy={country.centerPoint.y} r={radius * dynamicRatio}\r\n      />\r\n      <text className=\"circle-text\" x={country.centerPoint.x} y={country.centerPoint.y}\r\n        dy={`${radius * dynamicRatio / 3}px`} fontSize={`${radius * 0.85 * dynamicRatio}px`}>\r\n        {shortNum}\r\n      </text>\r\n    </g>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-circles\" style={{ strokeWidth: args.initStroke * dynamicRatio }}>\r\n      {countriesCircles}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GCircles;","import React, { useEffect, useRef } from \"react\";\r\nimport countriesLabels from \"../../../services/data/countriesLabels.json\";\r\n\r\nfunction GPaths({ countries, selectedCountry, dynamicRatio, args, minMapZoom, didDrag,\r\n  pathClassName, currPathName, isDragging, initZoom, isAutoFocus, isTooltipShow,\r\n  onSetViewBox, onSetDynamicRatio, onSetMapView, onSelectCountry }) {\r\n\r\n  const selectedCountryRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!selectedCountryRef.current || !isAutoFocus) return;\r\n    const bBox = selectedCountryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    const x = bBoxX - minMapZoom / 2, y = bBoxY - minMapZoom / 2, zoom = max + minMapZoom;\r\n    onSetViewBox(`${x} ${y} ${zoom} ${zoom}`);\r\n    onSetDynamicRatio(zoom / initZoom);\r\n    onSetMapView({ zoom, x, y });\r\n  }, [selectedCountry, onSetViewBox, onSetDynamicRatio, onSetMapView, initZoom, minMapZoom, isAutoFocus])\r\n\r\n  const countriesPaths = countries.map(country => {\r\n    const isSelected = country.name === selectedCountry.name;\r\n    const classSelected = isSelected ? 'selected' : '';\r\n    const isSelecting = isDragging && !didDrag && currPathName === country.name ? 'selecting' : '';\r\n    return <path className={`${pathClassName} ${classSelected} ${isSelecting}`} key={country.id}\r\n      alpha2={country.alpha2} name={country.name} d={country.d}\r\n      onClick={() => !didDrag && onSelectCountry(country)}\r\n      ref={isSelected ? selectedCountryRef : undefined}>\r\n      {!isTooltipShow && <title>{country.name}</title>}\r\n    </path>\r\n  })\r\n\r\n  const countriesPathsLabels = countriesLabels.map(country => {\r\n    return <path className=\"country-path-label\" d={country.d} key={country.id}></path>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-paths\" style={{ strokeWidth: args.initStroke * dynamicRatio, filter: 'url(#dropshadow)' }}>\r\n      {countriesPaths}\r\n      {countriesPathsLabels}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GPaths;","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nfunction MapTooltip({ tooltip }) {\r\n\r\n  return (\r\n    <div className=\"map-tooltip\" style={tooltip.style}>\r\n      <img className=\"tooltip-img\" alt=\"Flag\"\r\n        src={UtilsService.getImgSrc(`flags/${tooltip.alpha2.toLowerCase()}.png`)} />\r\n      <span className=\"tooltip-title\">{tooltip.name}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapTooltip;","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\n\r\nimport SvgDefsFilterShadow from '../../helpers/mapHelpers/SvgDefsFilterShadow';\r\nimport GCircles from './GCircles';\r\nimport GPaths from './GPaths';\r\nimport MapTooltip from './MapTooltip';\r\n\r\nfunction SvgCountriesMap({ countries, selectedCountry,\r\n  settings: { isCirclesShow, circlesDataKey, isAutoFocus, isTooltipShow },\r\n  onSelectCountry}) {\r\n\r\n  const initZoom = 554;\r\n  const baseMap = { width: 954, height: 514 };\r\n\r\n  const svgRef = useRef(initZoom);\r\n\r\n  const args = {\r\n    minMapZoom: 30, maxMapZoom: 1100, ratioUpdateZoom: 0.15,\r\n    minTopSvg: (baseMap.height - initZoom) / 2, minLeftSvg: (baseMap.width - initZoom) / 2,\r\n    initFontSize: initZoom / 30, initStroke: initZoom / 1000\r\n  };\r\n\r\n  const [viewBox, setViewBox] = useState(`${args.minLeftSvg} ${args.minTopSvg} ${initZoom} ${initZoom}`);\r\n  const [mapView, setMapView] = useState({ zoom: initZoom, x: args.minLeftSvg, y: args.minTopSvg });\r\n  const [dynamicRatio, setDynamicRatio] = useState(1);\r\n\r\n  const [didDrag, setDidDrag] = useState(false);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [pointerDiff, setPointerDiff] = useState({ x: 1, y: 1 });\r\n  const [tooltip, setTooltip] = useState(null);\r\n\r\n  const [currPathName, setCurrPathName] = useState(null);\r\n\r\n  const handleWheel = useCallback(ev => {\r\n    const isMouseOnSvgMap = ev.path && ev.path.some(path => path.className && path.className.baseVal\r\n      && path.className.baseVal.includes(svgClassName));\r\n    if (!isMouseOnSvgMap) return;\r\n    const updateZoom = mapView.zoom * args.ratioUpdateZoom;\r\n    const copy = mapView;\r\n    if (ev.deltaY > 0) {\r\n      if (mapView.zoom + updateZoom + args.minMapZoom < args.maxMapZoom) {\r\n        copy.zoom = copy.zoom + updateZoom;\r\n        copy.x = copy.x - updateZoom / 2;\r\n        copy.y = copy.y - updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    } else {\r\n      if (mapView.zoom - updateZoom - args.minMapZoom > 0) {\r\n        copy.zoom = copy.zoom - updateZoom;\r\n        copy.x = copy.x + updateZoom / 2;\r\n        copy.y = copy.y + updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    }\r\n    setDynamicRatio(mapView.zoom / initZoom);\r\n    setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n  }, [mapView, args]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n    return () => window.removeEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n  }, [handleWheel])\r\n\r\n  const startDrag = ev => {\r\n    setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n    setIsDragging(true);\r\n    setCurrPathName(ev.target.getAttribute('name'));\r\n  }\r\n  const handleMouseMove = ev => {\r\n    if (isDragging) {\r\n      const ratioBySvgHeight = initZoom / svgRef.current.clientHeight;\r\n      const x = mapView.x - (ev.clientX - pointerDiff.x) * dynamicRatio * ratioBySvgHeight;\r\n      const y = mapView.y - (ev.clientY - pointerDiff.y) * dynamicRatio * ratioBySvgHeight;\r\n      setMapView({ ...mapView, x, y });\r\n      setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n      setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n      (ev.movementX !== 0 || ev.movementY !== 0) && setDidDrag(true);\r\n    }\r\n    if (isTooltipShow) {\r\n      if (ev.target.getAttribute('class').includes(pathClassName)) {\r\n        setTooltip({\r\n          name: ev.target.getAttribute('name'),\r\n          alpha2: ev.target.getAttribute('alpha2'),\r\n          style: { top: ev.nativeEvent.offsetY - 50, left: ev.nativeEvent.offsetX + 25 }\r\n        });\r\n      } else {\r\n        setTooltip(null);\r\n      }\r\n    }\r\n  }\r\n  const stopDrag = () => {\r\n    setIsDragging(false);\r\n    setTimeout(() => setDidDrag(false), 0);\r\n  }\r\n  const handleMouseLeave = () => {\r\n    stopDrag();\r\n    setTooltip(null);\r\n  }\r\n\r\n  const handleScroll = ev => {\r\n    console.log(ev);\r\n  }\r\n\r\n  const pathClassName = 'country-path';\r\n  const svgClassName = 'svg-map';\r\n\r\n  return (\r\n    <>\r\n      <svg className={svgClassName} viewBox={viewBox} ref={svgRef}\r\n        onScroll={handleScroll} onWheel={handleWheel}\r\n        onMouseDown={startDrag} onMouseMove={handleMouseMove} onMouseUp={stopDrag} onMouseLeave={handleMouseLeave}>\r\n        <SvgDefsFilterShadow />\r\n        <GPaths countries={countries} selectedCountry={selectedCountry} dynamicRatio={dynamicRatio} args={args}\r\n          currPathName={currPathName} isDragging={isDragging} pathClassName={pathClassName} didDrag={didDrag}\r\n          initZoom={initZoom} minMapZoom={args.minMapZoom} isAutoFocus={isAutoFocus} isTooltipShow={isTooltipShow}\r\n          onSetViewBox={setViewBox} onSetDynamicRatio={setDynamicRatio} onSetMapView={setMapView}\r\n          onSelectCountry={onSelectCountry} />\r\n        {isCirclesShow &&\r\n          <GCircles circlesDataKey={circlesDataKey} countries={countries} dynamicRatio={dynamicRatio} args={args} />\r\n        }\r\n      </svg>\r\n\r\n      {isTooltipShow && tooltip &&\r\n        <MapTooltip tooltip={tooltip} />\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgCountriesMap;","import React from \"react\";\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, TESTS, getDataKeysByKeys } from '../../../constants/DataKeys';\r\n\r\nfunction MapOptions({ settings: { isCirclesShow, isAutoFocus, circlesDataKey = CASES, isTooltipShow },\r\n  onToggleIsCirclesShow, onToggleIsAutoFocus, onSetCirclesDataKey, onToggleIsTooltipShow }) {\r\n\r\n  const circleClicked = key => {\r\n    if (circlesDataKey !== key) onSetCirclesDataKey(key);\r\n  }\r\n\r\n  const circlesData = getDataKeysByKeys([CASES, DEATHS, RECOVERED, TESTS]);\r\n\r\n  const circlesDataButtons = circlesData.map(circle => {\r\n    const isActive = circlesDataKey === circle.key;\r\n    return <Button key={circle.key} text={circle.title} type={`${circle.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }}\r\n      onClick={() => circleClicked(circle.key)} />\r\n  })\r\n\r\n  return (\r\n    <div className=\"map-options\">\r\n\r\n      <div className=\"main-options\">\r\n        <Button text=\"Circles\" textCondition={isCirclesShow} isBoolean={true}\r\n          onClick={onToggleIsCirclesShow} />\r\n        <Button text=\"Auto Focus\" textCondition={isAutoFocus} isBoolean={true}\r\n          onClick={onToggleIsAutoFocus} />\r\n        <Button text=\"Tooltip\" textCondition={isTooltipShow} isBoolean={true}\r\n          onClick={onToggleIsTooltipShow} />\r\n      </div>\r\n\r\n      {isCirclesShow &&\r\n        <div className=\"circles-options\">\r\n          {circlesDataButtons}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapOptions;","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction GraphColumnsPreview({ arr, maxHeight, graphRatio, graphDataType }) {\r\n\r\n  const calcLine = (item, idx) => {\r\n    const diff = (arr[idx + 1].value - item.value) / maxHeight * 100;\r\n    const colWidth = 1 / arr.length * 100 * graphRatio;\r\n    const calcSlant = Math.sqrt(diff * diff + colWidth * colWidth);\r\n    const tanAngle = Math.atan(diff / colWidth) * 180 / Math.PI;\r\n    return { angle: tanAngle, slant: calcSlant };\r\n  }\r\n\r\n  const list = arr.map((item, idx) => {\r\n    const width = 1 / arr.length * 100 + '%';\r\n    const height = item.value / maxHeight * 100 + '%';\r\n    const backgroundColor = graphDataType.colorHEX;\r\n    const line = arr[idx + 1] ? calcLine(item, idx) : 0;\r\n    const style = {\r\n      top: `-${line.slant * 2}px`,\r\n      transform: `rotate(${line.angle * -1}deg)`\r\n    }\r\n    return <li className=\"column\" key={item.date} style={{ width }}>\r\n      <div className=\"column-percent\" style={{ height, backgroundColor }}>\r\n        <div className=\"wrap-value\">\r\n          <span className=\"value\">{UtilsService.numberWithCommas(item.value)}</span>\r\n        </div>\r\n        {arr[idx + 1] && <span className=\"line\" style={style}></span>}\r\n      </div>\r\n    </li>\r\n  })\r\n\r\n  return (\r\n    <ul className=\"columns\">\r\n      {list}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default GraphColumnsPreview;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nimport GraphColumnsPreview from './GraphColumnsPreview';\r\n\r\nfunction GraphColumns({ selectedCountry }) {\r\n\r\n  const graphRef = useRef();\r\n  const [graphRatio, setGraphRatio] = useState();\r\n  const [graphType, setGraphType] = useState(CASES);\r\n\r\n  const typeClicked = key => {\r\n    if (graphType !== key) setGraphType(key);\r\n  }\r\n\r\n  const graphDataTypes = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n  const graphDataType = graphType === CASES\r\n    ? { ...getDataKeyByKey(graphType), color: 'teal', colorHEX: '#008080' }\r\n    : getDataKeyByKey(graphType);\r\n\r\n  const graphTypesButtons = graphDataTypes.map(type => {\r\n    const isActive = graphType === type.key;\r\n    return <Button key={type.key} text={type.title} type={`${type.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }} onClick={() => typeClicked(type.key)} />\r\n  })\r\n\r\n  const historyObj = selectedCountry.history ? selectedCountry.history.timeline[graphType] : {};\r\n  const historyArr = Object.keys(historyObj).map(key => ({ date: key, value: historyObj[key] }));\r\n\r\n  const maxHeight = historyArr.length ? historyArr[historyArr.length - 1].value * 1.05 : 0;\r\n\r\n  useEffect(() => {\r\n    if (graphRef.current && !graphRatio) {\r\n      setGraphRatio(graphRef.current.clientWidth / graphRef.current.clientHeight);\r\n    }\r\n  }, [graphRef, graphRatio])\r\n\r\n  return (\r\n    <div className=\"graph-columns\" ref={graphRef}>\r\n      <div className=\"graph-options\">\r\n        <div className=\"graph-text\">\r\n          <p>\r\n            <span className=\"text\">{`From ${historyArr[0].date} To ${historyArr[historyArr.length - 1].date}`}</span>\r\n          </p>\r\n        </div>\r\n        <div className=\"buttons-options flex-center\">\r\n          {graphTypesButtons}\r\n        </div>\r\n      </div>\r\n      \r\n      {graphRef && graphRef.current &&\r\n        <GraphColumnsPreview arr={historyArr} maxHeight={maxHeight} graphRatio={graphRatio}\r\n          graphDataType={graphDataType} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphColumns;\r\n// export default React.memo(GraphColumns);\r\n\r\n","import React from \"react\";\r\n\r\nimport SvgCountriesMap from './mapUtils/SvgCountriesMap';\r\nimport MapOptions from './mapUtils/MapOptions';\r\nimport GraphColumns from '../helpers/graphs/GraphColumns';\r\n\r\nfunction WorldDashboardMap({ settings,\r\n  countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry, onToggleIsCirclesShow, onToggleIsAutoFocus, onSetCirclesDataKey, onToggleIsTooltipShow }) {\r\n\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countries[selectedCountryIndex] : worldData;\r\n\r\n  return (\r\n    <div className=\"world-dashboard-map\">\r\n      <SvgCountriesMap countries={countries} settings={settings} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      <MapOptions settings={settings}\r\n        onToggleIsCirclesShow={onToggleIsCirclesShow} onToggleIsAutoFocus={onToggleIsAutoFocus}\r\n        onSetCirclesDataKey={onSetCirclesDataKey} onToggleIsTooltipShow={onToggleIsTooltipShow} />\r\n      {selectedCountry.history &&\r\n        <div className=\"wrap-graph-columns\">\r\n          <GraphColumns selectedCountry={selectedCountry} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardMap;","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport VirusSVG from '../helpers/svg-icons/VirusSVG';\r\nimport { CASES, DEATHS, RECOVERED, CRITICAL, RANK, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardListItem({ country, selectedCountry, onSelectCountry }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  const src = UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`);\r\n\r\n  const caterogies = getDataKeysByKeys([CASES, DEATHS, RECOVERED, CRITICAL]);\r\n\r\n  const categoryView = caterogies.map(category => {\r\n    const shortNum = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const commasNum = UtilsService.numberWithCommas(country[category.key]);\r\n    return <div className=\"category flex-col\" key={category.key}\r\n      title={`${commasNum} ${category.title}`}>\r\n      <span className=\"title\">{category.title}</span>\r\n      <span className=\"value\">{shortNum}</span>\r\n    </div>\r\n  })\r\n\r\n  return (\r\n    <li className={`country ${isSelected}`} onClick={() => onSelectCountry(country)}>\r\n      <span className=\"numeric-code\" title=\"Numeric Code\">N-C {country.numericCode}</span>\r\n\r\n      <div className=\"top-section\">\r\n        <div className=\"wrap-country-flag\">\r\n          <img className=\"country-flag\" src={src} alt=\"Flag\" title={country.name} />\r\n        </div>\r\n        <div className=\"wrap-country-status\">\r\n          <h3 className=\"country-name\">{country.name}</h3>\r\n          <div className=\"status-details\">\r\n            <span className=\"rank\" title={`Rank ${country[RANK] + 1}`}>\r\n              <span className=\"rank-icon\">❱❱</span>\r\n              {country[RANK] + 1}\r\n            </span>\r\n            <div className=\"cases\" title={`Today Cases ${UtilsService.numberWithCommas(country.todayCases)}`}>\r\n              <div className=\"wrap-icon-svg\"><VirusSVG /></div>\r\n              <span className=\"cases-value\">+{UtilsService.numberWithCommas(country.todayCases)}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-section\">\r\n        {categoryView}\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardListItem;\r\n","import React, { useState } from 'react';\r\nimport FilterInput from '../helpers/FilterInput';\r\nimport WorldDashboardListItem from './WorldDashboardListItem';\r\n\r\nfunction WorldDashboardList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const [filteredCountries, setFilteredCountries] = useState(countries.filter((item, idx) => idx < 40));\r\n  const [isFiltered, setIsFiltered] = useState(false);\r\n  const [isScroll, setIsScroll] = useState(false);\r\n\r\n  const list = filteredCountries.map((country, idx) => {\r\n    return (isScroll || isFiltered || idx < 10)\r\n      ? <WorldDashboardListItem key={country.id} country={country} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      : <li key={idx} style={{ height: '6.5rem' }}></li>\r\n  })\r\n\r\n  const handleScroll = ev => {\r\n    setIsScroll(true);\r\n    if (isFiltered) return;\r\n    const scrollEnd = ev.target.scrollTop + 100 >= ev.target.scrollHeight - ev.target.clientHeight;\r\n    if (scrollEnd) setFilteredCountries(countries);\r\n  }\r\n\r\n  const filterCountries = filteredList => {\r\n    setFilteredCountries(filteredList);\r\n    setIsFiltered(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"world-dashboard-list flex-col\">\r\n      <div className=\"custom-filter-input\">\r\n        <FilterInput list={countries} filterKeys={['name']} placeholder=\"Search Country\"\r\n          onFilter={filterCountries} />\r\n      </div>\r\n      <ul className=\"countries\" onScroll={handleScroll}>\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardList;\r\n","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardWorldData({ worldData, onSelectCountry }) {\r\n\r\n  const data = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n\r\n  const list = data.map(category => (\r\n    <li className=\"world-detail flex-col\" key={category.key} onClick={() => onSelectCountry()}>\r\n      <span className=\"pseudo-border\"></span>\r\n      <p>{category.title}</p>\r\n      <p>{UtilsService.numberWithCommas(worldData[category.key])}</p>\r\n\r\n      {category.dividBy &&\r\n        <span className=\"wrap-precent\">\r\n          <span className=\"precent\">\r\n            {(worldData[category.key] / worldData[category.dividBy] * 100).toFixed()}%\r\n          </span>\r\n        </span>\r\n      }\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <div className=\"world-dashboard-world-details\">\r\n      <h2 className=\"title\">World</h2>\r\n      <ul className=\"world-details\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardWorldData;\r\n","import React from 'react';\r\n\r\nfunction VirusLogoSVG() {\r\n  return (\r\n    <svg role=\"img\" viewBox=\"0 0 50 50\">\r\n      <path fill=\"currentColor\" d=\"M 25 3 C 12.867715 3 3 12.867715 3 25 C 3 29.006019 4.0814389 32.738815 5.9296875 35.96875 L 3.5839844 35.251953 A 2.0002 2.0002 0 1 0 2.4160156 39.076172 L 12.138672 42.046875 L 13.490234 32.035156 A 2.0002 2.0002 0 0 0 11.550781 29.740234 A 2.0002 2.0002 0 0 0 9.5273438 31.5 L 9.2304688 33.699219 C 7.8172419 31.125736 7 28.181418 7 25 C 7 15.026285 15.026285 7 25 7 L 27 7 L 27 3 L 25 3 z M 31.720703 3.9511719 L 30.160156 7.640625 L 32.009766 8.4199219 L 32.009766 8.4101562 C 33.849766 9.1891562 32.010609 8.4104063 33.849609 9.1914062 L 35.410156 5.5117188 L 31.720703 3.9511719 z M 37.861328 7.953125 L 36.509766 17.964844 A 2.0002 2.0002 0 1 0 40.472656 18.5 L 40.769531 16.300781 C 42.182758 18.874264 43 21.818582 43 25 C 43 34.973715 34.973715 43 25 43 L 23 43 L 23 47 L 25 47 C 37.132285 47 47 37.132285 47 25 C 47 20.993981 45.918561 17.261185 44.070312 14.03125 L 46.416016 14.748047 A 2.0002 2.0002 0 1 0 47.583984 10.923828 L 37.861328 7.953125 z M 16.150391 40.810547 L 14.589844 44.490234 L 16.429688 45.269531 C 18.279688 46.049531 16.43025 45.269828 18.28125 46.048828 L 19.830078 42.359375 L 17.990234 41.580078 L 17.990234 41.589844 L 16.150391 40.810547 z\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default VirusLogoSVG;\r\n","import React, { useState } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport * as DataKeys from '../../../constants/DataKeys';\r\nimport ReplaceSVG from '../svg-icons/ReplaceSVG';\r\nimport Button from '../../elements/Button';\r\n\r\nfunction GraphRows({ countries, onSelectCountry }) {\r\n\r\n  const [rowsAmount, setRowsAmount] = useState(10);\r\n  const [graphBy, setGraphBy] = useState(DataKeys.TODAY_DEATHS);\r\n  const graphDataKey = DataKeys.getDataKeyByKey(graphBy);\r\n\r\n  const top10 = [...countries].sort((b, a) => (a[graphBy] > b[graphBy]) ? 1 : ((b[graphBy] > a[graphBy]) ? -1 : 0))\r\n    .slice(0, rowsAmount);\r\n  // .filter((item, idx) => idx < rowsAmount);\r\n\r\n  const list = top10.map(country => {\r\n    const width = country[graphBy] / top10[0][graphBy] * 100 + '%';\r\n    const backgroundColor = graphDataKey.colorHEX + '80';\r\n    return <li className=\"row\" key={country.alpha2} style={{ width, backgroundColor }}>\r\n      <span className=\"name\" onClick={() => onSelectCountry(country)}>{country.name}</span>\r\n      <span className=\"amount\">&nbsp;{UtilsService.numberWithCommas(country[graphBy])}</span>\r\n    </li>\r\n  })\r\n\r\n  const toggleGraph = () => {\r\n    if (graphBy === DataKeys.TODAY_DEATHS) setGraphBy(DataKeys.DEATHS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.DEATHS_PER_ONE_MILLION) setGraphBy(DataKeys.DEATHS);\r\n    if (graphBy === DataKeys.DEATHS) setGraphBy(DataKeys.TODAY_CASES);\r\n    if (graphBy === DataKeys.TODAY_CASES) setGraphBy(DataKeys.CASES_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.CASES_PER_ONE_MILLION) setGraphBy(DataKeys.CASES);\r\n    if (graphBy === DataKeys.CASES) setGraphBy(DataKeys.TESTS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.TESTS_PER_ONE_MILLION) setGraphBy(DataKeys.CRITICAL);\r\n    if (graphBy === DataKeys.CRITICAL) setGraphBy(DataKeys.RECOVERED);\r\n    if (graphBy === DataKeys.RECOVERED) setGraphBy(DataKeys.ACTIVE);\r\n    if (graphBy === DataKeys.ACTIVE) setGraphBy(DataKeys.TODAY_DEATHS);\r\n  }\r\n\r\n  const diff = 5;\r\n  return (\r\n    <div className=\"graph-rows\">\r\n      <div className=\"wrap-title\" onClick={toggleGraph}>\r\n        <div className=\"wrap-icon-svg\"><ReplaceSVG /></div>\r\n        <h3 className=\"title\">{graphDataKey.title}</h3>\r\n        <div className=\"wrap-icon-svg\" style={{ color: graphDataKey.color }}>{graphDataKey.svgIcon}</div>\r\n      </div>\r\n      <ul className=\"rows\">\r\n        {list}\r\n        <li className=\"flex-evenly\">\r\n          {rowsAmount > diff &&\r\n            <Button text={`− ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount - diff)} />\r\n          }\r\n          {rowsAmount < diff * 10 &&\r\n            <Button text={`+ ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount + diff)} />\r\n          }\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphRows;\r\n","import React from 'react';\r\nimport GraphRows from '../helpers/graphs/GraphRows';\r\nimport CountryDetails from '../helpers/countryDetails';\r\n\r\nfunction WorldDashboardDetails({ countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : worldData;\r\n\r\n  return (\r\n    <div className=\"world-dashboard-details flex-col\">\r\n      <CountryDetails country={selectedCountry}/>\r\n      <GraphRows countries={countries} onSelectCountry={onSelectCountry} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardDetails;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport { WORLD_DASHBOARD } from '../constants/RouterPaths';\r\n\r\nimport WorldDashboardMap from '../cmps/worldDashboard/WorldDashboardMap';\r\nimport WorldDashboardList from '../cmps/worldDashboard/WorldDashboardList';\r\nimport WorldDashboardWorldData from '../cmps/worldDashboard/WorldDashboardWorldData';\r\nimport WorldDashboardDetails from '../cmps/worldDashboard/WorldDashboardDetails';\r\n\r\nfunction WorldDashboard() {\r\n\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!countriesStore) return;\r\n    const { countries, selectedCountryIndex } = countriesStore;\r\n    const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n    const isParamsInUrlWithCountry = params.alpha2 && !isSelectedCountry;\r\n    if (isParamsInUrlWithCountry) {\r\n      const country = countries.find(country => country.alpha2 === params.alpha2);\r\n      dispatch(actions.selectCountry(country));\r\n    }\r\n    const isUrlCmpUnmount = !params.alpha2 && isSelectedCountry;\r\n    if (isUrlCmpUnmount) {\r\n      history.push(`/${WORLD_DASHBOARD}/${countries[selectedCountryIndex].alpha2}`);\r\n    }\r\n  }, [dispatch, countriesStore, params, history]);\r\n\r\n  // TODO: clean code!\r\n  const selectCountry = (country = null) => {\r\n    if (!country && !isSelectedCountry) return;\r\n    const isSameCountry = country && country.alpha2 === selectedCountry.alpha2;\r\n    const alpha2ToPush = country && !isSameCountry ? country.alpha2 : '';\r\n    history.push(`/${WORLD_DASHBOARD}/${alpha2ToPush}`);\r\n    dispatch(actions.selectCountry(country ? country : {}));\r\n  }\r\n\r\n  const toggleIsCirclesShow = () => dispatch(actions.toggleIsCirclesShow());\r\n  const toggleIsAutoFocus = () => dispatch(actions.toggleIsAutoFocus());\r\n  const setCirclesDataKey = dataKey => dispatch(actions.setCirclesDataKey(dataKey));\r\n  const toggleIsTooltipShow = () => dispatch(actions.toggleIsTooltipShow());\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n  const selectedCountry = isSelectedCountry\r\n    ? countriesStore.countries[selectedCountryIndex]\r\n    : countriesStore ? countriesStore.worldData : {};\r\n\r\n  return (\r\n    <>{countriesStore && settingsStore && <>\r\n      <div className=\"world-dashboard\">\r\n        <div className=\"wrap-worldData-and-list flex-col overflow-hidden\">\r\n          <WorldDashboardWorldData worldData={countriesStore.worldData} onSelectCountry={selectCountry} />\r\n          <WorldDashboardList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        </div>\r\n        <WorldDashboardMap countriesStore={countriesStore} settings={settingsStore.worldMap}\r\n          onSelectCountry={selectCountry} onToggleIsCirclesShow={toggleIsCirclesShow}\r\n          onToggleIsAutoFocus={toggleIsAutoFocus} onSetCirclesDataKey={setCirclesDataKey}\r\n          onToggleIsTooltipShow={toggleIsTooltipShow} />\r\n        <WorldDashboardDetails countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default WorldDashboard;\r\n"],"sourceRoot":""}