{"version":3,"sources":["services/UtilsService.js","store/reducers/index.js","store/reducers/CountriesStore.js","store/ActionTypes.js","store/AppStore.js","ServiceConfig.js","services/HttpService.js","services/CountriesService.js","store/actions/CountriesActions.js","store/actions/index.js","cmps/NavBar.js","constants/RouterPaths.js","cmps/worldDashboard/mapHelpers/SvgDefsFilterShadow.js","cmps/worldDashboard/WorldDashboardMap.js","cmps/worldDashboard/WorldDashboardList.js","cmps/worldDashboard/WorldDashboardGlobalDetails.js","cmps/worldDashboard/WorldDashboardDetails.js","pages/WorldDashboard.js","cmps/countryView/CountryViewListItem.js","cmps/countryView/CountryViewList.js","cmps/countryView/CountryViewPresentation.js","cmps/countryView/CountryViewDetails.js","cmps/countryView/CountryViewBottom.js","pages/CountryView.js","pages/TableData.js","Router.js","cmps/HudLayout.js","App.js","Root.js","serviceWorker.js","index.js"],"names":["makeShallowCopy","state","makeDeepCopy","JSON","parse","stringify","rootReducer","combineReducers","countriesStore","action","copy","UtilsService","type","payload","idx","countries","findIndex","country","name","selectedCountryIndex","store","middlewares","thunk","createStore","reducers","applyMiddleware","configureStore","isServerCountriesConnected","getUrl","entityName","axios","Axios","create","withCredentials","get","args","_customAxios","post","put","delete","method","a","data","extraMsg","url","ServiceConfig","res","console","log","response","initState","_getEmpty","getCoronaCountries","_getCoronaCountries","getGlobalData","_getGlobalData","serverCoronaCountries","serverGlobalData","_mergeCoronaData","globalData","JSONcoronaCountries","cases","deaths","recovered","Promise","resolve","getData","coronaCountries","map","coronaData","find","corona","todayCases","todayDeaths","active","critical","casesPerOneMillion","deathsPerOneMillion","firstCase","sort","b","HttpService","loadCountriesData","dispatch","CountriesService","initData","selectCountry","CountriesActions","NavBar","list","route","link","className","to","replace","key","SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","slope","WorldDashboardMap","onSelectCountry","selectedCountry","baseMap","svgRef","useRef","initZoom","minMapZoom","maxMapZoom","ratioUpdateZoom","minTopSvg","minLeftSvg","initFontSize","initStroke","firstZoom","useState","zoom","x","y","mapView","setMapView","viewBox","setViewBox","isDragging","setIsDragging","pointerDiff","setPointerDiff","dynamicRatio","setDynamicRatio","currPathName","setCurrPathName","handleWheel","useCallback","ev","path","some","baseVal","includes","updateZoom","deltaY","useEffect","window","addEventListener","passive","removeEventListener","stopDrag","countriesPaths","isSelected","isSelecting","alpha2","d","onClick","countriesPathsLabels","countriesLabels","ref","onScroll","onMouseDown","clientX","clientY","target","getAttribute","onMouseMove","ratioBySvgHeight","current","clientHeight","onMouseUp","onMouseLeave","style","strokeWidth","filter","WorldDashboardList","WorldDashboardGlobalDetails","title","category","WorldDashboardDetails","color","dividBy","undefined","textAlign","toFixed","WorldDashboard","useDispatch","useSelector","actions","CountryViewListItem","CountryViewList","CountryViewPresentation","countryRef","bBox","getBBox","width","abs","Math","max","bBoxX","bBoxY","CountryViewDetails","CountryViewBottom","r","CountryView","TableData","Router","exact","from","component","HudLayout","App","Root","Boolean","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b7cbefc.chunk.js","sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction makeShallowCopy(state) {\r\n  return { ...state };\r\n}\r\n\r\nfunction makeDeepCopy(state) {\r\n  return JSON.parse(JSON.stringify(state));\r\n}\r\n\r\nexport default {\r\n  makeShallowCopy,\r\n  makeDeepCopy\r\n}","import CountriesStore from './CountriesStore';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    countriesStore: CountriesStore,\r\n});\r\n\r\nexport default rootReducer;","\r\nimport UtilsService from '../../services/UtilsService';\r\nimport * as ActionTypes from '../ActionTypes';\r\n\r\nconst initialState = null;\r\n\r\nexport default (state = initialState, action) => {\r\n  let copy = UtilsService.makeShallowCopy(state);\r\n  switch (action.type) {\r\n    case ActionTypes.SET_COUNTRIES_DATA:\r\n      return action.payload;\r\n    case ActionTypes.SET_SELECTED_COUNTRY_INDEX:\r\n      const idx = copy.countries.findIndex(country => country.name === action.payload.name);\r\n      copy.selectedCountryIndex = copy.selectedCountryIndex === idx ? null : idx;\r\n      return copy;\r\n    default:\r\n      return state;\r\n  }\r\n}","\r\nexport const SET_COUNTRIES_DATA = 'SET_COUNTRIES_DATA';\r\nexport const SET_SELECTED_COUNTRY_INDEX = 'SET_SELECTED_COUNTRY_INDEX';\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nconst configureStore = () => {\r\n\r\n  const middlewares = [thunk];\r\n\r\n  if (process.env.NODE_ENV === `development`) {\r\n    const { logger } = require(`./middlewares/logger`);\r\n    middlewares.push(logger);\r\n  }\r\n\r\n  return createStore(\r\n    reducers,\r\n    applyMiddleware(...middlewares)\r\n  );\r\n};\r\n\r\nconst store = configureStore();\r\n\r\nexport default store;","\r\n\r\nlet isServerCountriesConnected;\r\n\r\n\r\nisServerCountriesConnected = true;\r\n\r\n\r\nfunction getUrl(entityName) {\r\n  return `https://coronavirus-19-api.herokuapp.com/${entityName}`\r\n}\r\n\r\n\r\nexport default {\r\n  isServerCountriesConnected,\r\n  getUrl\r\n}","import ServiceConfig from '../ServiceConfig';\r\nimport Axios from 'axios';\r\n\r\nconst axios = Axios.create({ withCredentials: false });\r\n\r\nfunction get(...args) {\r\n  return _customAxios('get', ...args);\r\n}\r\nfunction post(...args) {\r\n  return _customAxios('post', ...args);\r\n}\r\nfunction put(...args) {\r\n  return _customAxios('put', ...args);\r\n}\r\nfunction remove(...args) {\r\n  return _customAxios('delete', ...args);\r\n}\r\n\r\nexport default {\r\n  get,\r\n  post,\r\n  put,\r\n  delete: remove,\r\n}\r\n\r\nasync function _customAxios(method, entityName = '', data = null, extraMsg = '') {\r\n  // console.log(method, entityName, data);\r\n  const url = ServiceConfig.getUrl(entityName);\r\n  try {\r\n    const res = await axios({ method, url, ...data })\r\n    // console.log(extraMsg, res);\r\n    return res.data;\r\n  } catch (err) {\r\n    console.log('Error in Service ', extraMsg, '- By Entity Name:', entityName);\r\n    if (err.response) console.log(err.response.data);\r\n    else console.log(err);\r\n  }\r\n}","import HttpService from './HttpService';\r\nimport JSONcoronaCountries from './data/coronaCountries.json';\r\nimport countries from './data/countries.json';\r\n\r\nimport ServiceConfig from '../ServiceConfig';\r\n\r\nasync function getData() {\r\n  const initState = _getEmpty();\r\n  if (ServiceConfig.isServerCountriesConnected) {\r\n    const getCoronaCountries = _getCoronaCountries();\r\n    const getGlobalData = _getGlobalData();\r\n    const serverCoronaCountries = await getCoronaCountries;\r\n    const serverGlobalData = await getGlobalData;\r\n    \r\n    initState.countries = _mergeCoronaData(serverCoronaCountries);\r\n    initState.globalData = serverGlobalData;\r\n  } else {\r\n    initState.countries = _mergeCoronaData(JSONcoronaCountries);\r\n    initState.globalData = { cases: 721412, deaths: 33956, recovered: 151004 };\r\n  }\r\n  return Promise.resolve(initState);\r\n}\r\n\r\nexport default {\r\n  getData,\r\n}\r\n\r\nconst _getEmpty = () => ({\r\n  countries: [],\r\n  selectedCountryIndex: null,\r\n  globalData: null\r\n})\r\n\r\nconst _mergeCoronaData = coronaCountries => {\r\n  return countries.map(country => {\r\n    const coronaData = coronaCountries.find(corona => corona.country === country.name\r\n      || (corona.country === 'UK' && country.name === 'United Kingdom')\r\n      || (corona.country === 'S. Korea' && country.name === 'South Korea')\r\n      || (corona.country === 'Palestine' && country.name === 'Palestinian Territories')\r\n      || (corona.country === 'DRC' && country.name === 'DR Congo')\r\n      || (corona.country === 'USA' && country.name === 'United States'));\r\n    return {\r\n      ...country,\r\n      cases: coronaData ? coronaData.cases : null,\r\n      todayCases: coronaData ? coronaData.todayCases : null,\r\n      deaths: coronaData ? coronaData.deaths : null,\r\n      todayDeaths: coronaData ? coronaData.todayDeaths : null,\r\n      recovered: coronaData ? coronaData.recovered : null,\r\n      active: coronaData ? coronaData.active : null,\r\n      critical: coronaData ? coronaData.critical : null,\r\n      casesPerOneMillion: coronaData ? coronaData.casesPerOneMillion : null,\r\n      deathsPerOneMillion: coronaData ? coronaData.deathsPerOneMillion : null,\r\n      firstCase: coronaData ? coronaData.firstCase : null\r\n    }\r\n  }).sort((b, a) => (a.cases > b.cases) ? 1 : ((b.cases > a.cases) ? -1 : 0))\r\n}\r\n\r\nasync function _getCoronaCountries() {\r\n  return await HttpService.get(`countries`, null, 'getCoronaCountries');\r\n}\r\n\r\nasync function _getGlobalData() {\r\n  return await HttpService.get(`all`, null, 'getGlobalData');\r\n}","import CountriesService from '../../services/CountriesService';\r\nimport * as ActionTypes from '../ActionTypes';\r\n\r\nfunction loadCountriesData() {\r\n  return async (dispatch) => {\r\n    const initData = await CountriesService.getData();\r\n    dispatch({ type: ActionTypes.SET_COUNTRIES_DATA, payload: initData })\r\n  }\r\n}\r\n\r\nfunction selectCountry(country) {\r\n  return async (dispatch) => {\r\n    dispatch({ type: ActionTypes.SET_SELECTED_COUNTRY_INDEX, payload: country })\r\n  }\r\n}\r\n\r\nexport default {\r\n  loadCountriesData,\r\n  selectCountry\r\n}","import CountriesActions from './CountriesActions';\r\n\r\nexport default {\r\n    ...CountriesActions,\r\n};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport { WORLD_DASHBOARD, COUNTRY_VIEW, TABLE_DATA } from '../constants/RouterPaths';\r\n\r\nfunction NavBar() {\r\n\r\n  const navLinks = [\r\n    { route: WORLD_DASHBOARD, name: 'World Dashboard' },\r\n    { route: COUNTRY_VIEW, name: 'Country View' },\r\n    // { route: TABLE_DATA, name: 'Table Data' }\r\n  ]\r\n\r\n  const list = navLinks.map(link => (\r\n    <NavLink className=\"nav-link\" to={`/${link.route}`} replace key={link.route}>\r\n      <span className=\"text\">{link.name}</span>\r\n    </NavLink>\r\n  ))\r\n\r\n  return (\r\n    <div className=\"nav-bar\">\r\n      {list}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","export const WORLD_DASHBOARD = 'world-dashboard';\r\nexport const COUNTRY_VIEW = 'country-view';\r\nexport const ALPHA2 = 'alpha2';\r\nexport const TABLE_DATA = 'table-data';","import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <defs>\r\n      <filter id=\"dropshadow\" height=\"130%\">\r\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n        <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n        <feComponentTransfer>\r\n          <feFuncA type=\"linear\" slope=\"0.5\" />\r\n        </feComponentTransfer>\r\n        <feMerge>\r\n          <feMergeNode />\r\n          <feMergeNode in=\"SourceGraphic\" />\r\n        </feMerge>\r\n      </filter>\r\n    </defs>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState, useEffect, useCallback, useRef } from \"react\";\r\nimport countriesLabels from \"../../services/data/countriesLabels.json\";\r\nimport SvgDefsFilterShadow from './mapHelpers/SvgDefsFilterShadow';\r\n\r\nfunction WorldDashboardMap({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const firstZoom = 554;\r\n  const baseMap = { width: 954, height: 514 };\r\n\r\n  const svgRef = useRef(firstZoom);\r\n\r\n  const args = {\r\n    initZoom: firstZoom, minMapZoom: 30, maxMapZoom: 1100, ratioUpdateZoom: 0.15,\r\n    minTopSvg: (baseMap.height - firstZoom) / 2, minLeftSvg: (baseMap.width - firstZoom) / 2,\r\n    initFontSize: firstZoom / 30, initStroke: firstZoom / 1000\r\n  };\r\n\r\n  const [mapView, setMapView] = useState({ zoom: args.initZoom, x: 0, y: 0 });\r\n  const [viewBox, setViewBox] = useState(`${args.minLeftSvg} ${args.minTopSvg} ${args.initZoom} ${args.initZoom}`);\r\n\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [pointerDiff, setPointerDiff] = useState({ x: 1, y: 1 });\r\n\r\n  const [dynamicRatio, setDynamicRatio] = useState(1);\r\n  const [currPathName, setCurrPathName] = useState('');\r\n\r\n  const svgClassName = 'svg-map';\r\n  const handleWheel = useCallback(ev => {\r\n    const isMouseOnSvgMap = ev.path && ev.path.some(path => path.className && path.className.baseVal\r\n      && path.className.baseVal.includes(svgClassName));\r\n    if (!isMouseOnSvgMap) return;\r\n    const updateZoom = mapView.zoom * args.ratioUpdateZoom;\r\n    const copy = mapView;\r\n    if (ev.deltaY > 0) {\r\n      if (mapView.zoom + updateZoom + args.minMapZoom < args.maxMapZoom) {\r\n        copy.zoom = copy.zoom + updateZoom;\r\n        copy.x = copy.x - updateZoom / 2;\r\n        copy.y = copy.y - updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    } else {\r\n      if (mapView.zoom - updateZoom - args.minMapZoom > 0) {\r\n        copy.zoom = copy.zoom - updateZoom;\r\n        copy.x = copy.x + updateZoom / 2;\r\n        copy.y = copy.y + updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    }\r\n    setDynamicRatio(mapView.zoom / args.initZoom);\r\n    setViewBox(`${mapView.x + args.minLeftSvg} ${mapView.y + args.minTopSvg} ${mapView.zoom} ${mapView.zoom}`);\r\n  }, [mapView, args]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n    return () => window.removeEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n  })\r\n\r\n  const startDrag = ev => {\r\n    setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n    setIsDragging(true);\r\n    setCurrPathName(ev.target.getAttribute('name'));\r\n  }\r\n  const drag = ev => {\r\n    if (isDragging) {\r\n      const ratioBySvgHeight = args.initZoom / svgRef.current.clientHeight;\r\n      const x = mapView.x - (ev.clientX - pointerDiff.x) * dynamicRatio * ratioBySvgHeight;\r\n      const y = mapView.y - (ev.clientY - pointerDiff.y) * dynamicRatio * ratioBySvgHeight;\r\n      setMapView({ ...mapView, x, y });\r\n      setViewBox(`${x + args.minLeftSvg} ${y + args.minTopSvg} ${mapView.zoom} ${mapView.zoom}`);\r\n      setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n    }\r\n  }\r\n  const stopDrag = () => {\r\n    setIsDragging(false);\r\n  }\r\n\r\n  const countriesPaths = countries.map(country => {\r\n    const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n    const isSelecting = isDragging && currPathName === country.name ? 'selecting' : '';\r\n    return <path className={`country-path ${isSelected} ${isSelecting}`} key={country.id}\r\n      alpha2={country.alpha2} name={country.name} d={country.d}\r\n      onClick={(ev) => onSelectCountry(country)}>\r\n      {/* onClick={(ev) => onSelectCountry(country) || console.log(ev.target.getBBox())}> */}\r\n      <title>{country.name}</title>\r\n    </path>\r\n  })\r\n\r\n  const countriesPathsLabels = countriesLabels.map(country => {\r\n    return <path className=\"country-path-label\" d={country.d} key={country.id}></path>\r\n  })\r\n\r\n  const handleScroll = ev => {\r\n    console.log(ev);\r\n  }\r\n\r\n  return (\r\n    <div className=\"world-dashboard-map\">\r\n      <svg className={svgClassName} viewBox={viewBox} ref={svgRef}\r\n        onScroll={handleScroll}\r\n        onMouseDown={startDrag} onMouseMove={drag} onMouseUp={stopDrag} onMouseLeave={stopDrag}>\r\n        <SvgDefsFilterShadow />\r\n        <g className=\"g-paths\" style={{ strokeWidth: args.initStroke * dynamicRatio, filter: 'url(#dropshadow)' }}>\r\n          {countriesPaths}\r\n          {countriesPathsLabels}\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardMap;","import React from 'react';\r\n\r\nfunction WorldDashboardList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const list = countries.map(country => {\r\n    const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n    return <li className={`country ${isSelected}`} key={country.id}\r\n      onClick={() => onSelectCountry(country)}>\r\n      <span>{country.name}</span>\r\n    </li>\r\n  })\r\n\r\n  return (\r\n    <div className=\"world-dashboard-list flex-col\">\r\n      <h3 className=\"selected-country-name\">{selectedCountry.name || 'Select Country'}</h3>\r\n      <ul className=\"countries\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardList;\r\n","import React from 'react';\r\n\r\nfunction WorldDashboardGlobalDetails({ globalData }) {\r\n\r\n  const data = [\r\n    { key: 'cases', title: 'Cases' },\r\n    { key: 'deaths', title: 'Deaths' },\r\n    { key: 'recovered', title: 'Recovered' }\r\n  ];\r\n\r\n  const list = data.map(category => (\r\n    <li className=\"global-detail flex-col\" key={category.key}>\r\n      <span className=\"pseudo-border\"></span>\r\n      <p>{category.title}</p>\r\n      <p>{globalData[category.key]}</p>\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <div className=\"world-dashboard-global-details\">\r\n      <h2 className=\"title\">Global Data</h2>\r\n      <ul className=\"global-details\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardGlobalDetails;\r\n","import React from 'react';\r\n\r\nfunction WorldDashboardDetails({ selectedCountry }) {\r\n\r\n  const data = [\r\n    { key: 'cases', title: 'Cases', color: 'lightblue' },\r\n    { key: 'todayCases', title: 'Today Cases', dividBy: 'cases', color: 'lightblue' },\r\n    { key: 'deaths', title: 'Deaths', dividBy: 'cases', color: 'FireBrick' },\r\n    { key: 'todayDeaths', title: 'Today Deaths', dividBy: 'deaths', color: 'FireBrick' },\r\n    { key: 'recovered', title: 'Recovered', dividBy: 'cases', color: 'MediumSpringGreen' },\r\n    { key: 'active', title: 'Active', dividBy: 'cases', color: 'orange' },\r\n    { key: 'critical', title: 'Critical', dividBy: 'cases', color: 'DarkOrchid' },\r\n    { key: 'casesPerOneMillion', title: 'Cases Per 1M' },\r\n    { key: 'deathsPerOneMillion', title: 'Deaths Per 1M' },\r\n    { key: 'firstCase', title: 'First Case' },\r\n  ];\r\n\r\n  const list = data.map(category => {\r\n    return <li className=\"selected-country-detail\" key={category.key}\r\n      style={{ color: category.color }}>\r\n      <span>{category.title}:&nbsp;</span>\r\n      <span>{selectedCountry[category.key] || selectedCountry[category.key] === 0 ? selectedCountry[category.key] :\r\n        selectedCountry[category.key] === undefined ? '' : 'No Data'}</span>\r\n      {category.dividBy && !!selectedCountry[category.key] &&\r\n        <span style={{ textAlign: 'right' }} >\r\n          {(selectedCountry[category.key] / selectedCountry[category.dividBy] * 100).toFixed(0)}%</span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  return (\r\n    <div className=\"world-dashboard-details flex-col\">\r\n      <h3 className=\"selected-country-name\">{selectedCountry.name || 'Country Name'}</h3>\r\n      <ul className=\"selected-country-details\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardDetails;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\n\r\nimport WorldDashboardMap from '../cmps/worldDashboard/WorldDashboardMap';\r\nimport WorldDashboardList from '../cmps/worldDashboard/WorldDashboardList';\r\nimport WorldDashboardGlobalDetails from '../cmps/worldDashboard/WorldDashboardGlobalDetails';\r\nimport WorldDashboardDetails from '../cmps/worldDashboard/WorldDashboardDetails';\r\n\r\nfunction WorldDashboard() {\r\n\r\n  const dispatch = useDispatch();\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n\r\n  const selectCountry = country => {\r\n    dispatch(actions.selectCountry(country));\r\n  }\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countriesStore.countries[selectedCountryIndex] : {};\r\n  return (\r\n    <>{countriesStore && <>\r\n      <div className=\"world-dashboard\">\r\n        <div className=\"wrap-global-and-list flex-col overflow-hidden\">\r\n          <WorldDashboardGlobalDetails globalData={countriesStore.globalData} />\r\n          <WorldDashboardList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        </div>\r\n        <WorldDashboardMap countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        <WorldDashboardDetails selectedCountry={selectedCountry} />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default WorldDashboard;\r\n","import React from 'react';\r\n\r\nfunction CountryViewListItem({ country, selectedCountry,\r\n  onSelectCountry }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  return (\r\n    <li className={`country-preview ${isSelected}`}\r\n      onClick={() => onSelectCountry(country)}>\r\n      <div>\r\n        <span>{country.name}</span>\r\n      </div>\r\n      <div>\r\n        <span>Cases: </span>\r\n        <span>{country.cases}</span>\r\n      </div>\r\n      <div>\r\n        <span>Deaths: </span>\r\n        <span>{country.deaths}</span>\r\n      </div>\r\n      <div>\r\n        <span>Recovered: </span>\r\n        <span>{country.recovered}</span>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default CountryViewListItem;\r\n","import React from 'react';\r\nimport CountryViewListItem from './CountryViewListItem';\r\n\r\nfunction CountryViewList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const list = countries.map(country => (\r\n    <CountryViewListItem key={country.name} country={country} selectedCountry={selectedCountry}\r\n      onSelectCountry={onSelectCountry} />\r\n  ))\r\n\r\n  return (\r\n    <ul className=\"country-view-list\">\r\n      {list}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryViewList;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\n\r\nfunction CountryViewPresentation({ selectedCountry }) {\r\n\r\n  const countryRef = useRef();\r\n\r\n  const initStroke = 200;\r\n  const [dynamicRatio, setDynamicRatio] = useState(initStroke / initStroke);\r\n  const [viewBox, setViewBox] = useState(`0 0 100 100`);\r\n\r\n  useEffect(() => {\r\n    const bBox = countryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    setViewBox(`${bBoxX - 1} ${bBoxY - 1} ${max + 2} ${max + 2} `);\r\n    setDynamicRatio(max / initStroke);\r\n  }, [selectedCountry])\r\n\r\n  return (\r\n    <div className=\"country-view-presentation\">\r\n      <svg className='svg-country-presentation' viewBox={viewBox}>\r\n        <path className=\"country-path\" d={selectedCountry.d} ref={countryRef}\r\n          style={{ strokeWidth: `${dynamicRatio}px` }}>\r\n        </path>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewPresentation;\r\n","import React from 'react';\r\n\r\nfunction CountryViewDetails({ selectedCountry }) {\r\n\r\n  const data = [\r\n    { key: 'cases', title: 'Cases', color: 'lightblue' },\r\n    { key: 'todayCases', title: 'Today Cases', dividBy: 'cases', color: 'lightblue' },\r\n    { key: 'deaths', title: 'Deaths', dividBy: 'cases', color: 'FireBrick' },\r\n    { key: 'todayDeaths', title: 'Today Deaths', dividBy: 'deaths', color: 'FireBrick' },\r\n    { key: 'recovered', title: 'Recovered', dividBy: 'cases', color: 'MediumSpringGreen' },\r\n    { key: 'active', title: 'Active', dividBy: 'cases', color: 'orange' },\r\n    { key: 'critical', title: 'Critical', dividBy: 'cases', color: 'DarkOrchid' },\r\n    { key: 'casesPerOneMillion', title: 'Cases Per 1M' },\r\n    { key: 'deathsPerOneMillion', title: 'Deaths Per 1M' },\r\n    { key: 'firstCase', title: 'First Case' },\r\n  ];\r\n\r\n  const list = data.map(category => {\r\n    return <li className=\"selected-country-detail\" key={category.key}\r\n      style={{ color: category.color }}>\r\n      <span>{category.title}:&nbsp;</span>\r\n      <span>{selectedCountry[category.key] || selectedCountry[category.key] === 0 ? selectedCountry[category.key] :\r\n        selectedCountry[category.key] === undefined ? '' : 'No Data'}</span>\r\n      {category.dividBy && !!selectedCountry[category.key] &&\r\n        <span style={{ textAlign: 'right' }} >\r\n          {(selectedCountry[category.key] / selectedCountry[category.dividBy] * 100).toFixed(0)}%</span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  return (\r\n    <div className=\"country-view-details flex-col\">\r\n      <h3 className=\"selected-country-name\">{selectedCountry.name || 'Country Name'}</h3>\r\n      <ul className=\"selected-country-details\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewDetails;\r\n","import React from 'react';\r\n\r\nfunction CountryViewBottom() {\r\n\r\n  return (\r\n    <div className=\"country-view-bottom\">\r\n      <div className=\"wrap-loader-svg\">\r\n        <div className=\"lighter-1 lighter\"></div>\r\n        <div className=\"lighter-2 lighter\"></div>\r\n        <svg className=\"loader-svg\" viewBox=\"0 0 100 100\">\r\n          <g className=\"g-loader\">\r\n            <circle className=\"light-source\" r=\"15%\"/>\r\n            <circle className=\"spiner-1 spiner\" r=\"20%\" />\r\n            <circle className=\"spiner-2 spiner\" r=\"30%\" />\r\n            <circle className=\"spiner-3 spiner\" r=\"40%\" />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewBottom;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\n\r\nimport CountryViewList from '../cmps/countryView/CountryViewList';\r\nimport CountryViewPresentation from '../cmps/countryView/CountryViewPresentation';\r\nimport CountryViewDetails from '../cmps/countryView/CountryViewDetails';\r\nimport CountryViewBottom from '../cmps/countryView/CountryViewBottom';\r\n\r\n\r\n\r\nfunction CountryView() {\r\n\r\n  const dispatch = useDispatch();\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n\r\n  const selectCountry = country => {\r\n    dispatch(actions.selectCountry(country));\r\n  }\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countriesStore.countries[selectedCountryIndex] : {};\r\n  return (\r\n    <>{countriesStore && <>\r\n      <div className=\"country-view\">\r\n        <CountryViewList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        <CountryViewPresentation selectedCountry={selectedCountry} />\r\n        <CountryViewDetails selectedCountry={selectedCountry} />\r\n        <CountryViewBottom />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default CountryView;\r\n","import React from 'react';\r\n\r\nfunction TableData() {\r\n  return (\r\n    <div className=\"table-data\">\r\n      TableData\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TableData;\r\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport actions from './store/actions';\n\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nimport NavBar from './cmps/NavBar';\n\nimport WorldDashboard from './pages/WorldDashboard';\nimport CountryView from './pages/CountryView';\nimport TableData from './pages/TableData';\n\nimport { WORLD_DASHBOARD, COUNTRY_VIEW, ALPHA2, TABLE_DATA } from './constants/RouterPaths';\n\nfunction Router() {\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(actions.loadCountriesData());\n  }, [dispatch]);\n\n  return (\n    <HashRouter>\n      <NavBar />\n      <div className=\"router\">\n        <Switch>\n          <Redirect exact from=\"/\" to={`/${WORLD_DASHBOARD}`} />\n          <Route exact path={`/${WORLD_DASHBOARD}`} component={WorldDashboard} />\n          <Route exact path={`/${COUNTRY_VIEW}/:${ALPHA2}?`} component={CountryView} />\n          <Route exact path={`/${TABLE_DATA}`} component={TableData} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default Router;\n","import React from 'react';\r\n\r\nfunction HudLayout() {\r\n\r\n  return (\r\n    <div className=\"hud-layout\">\r\n      <div className=\"ui-elements\">\r\n        <div className=\"border-left border\">\r\n          <div className=\"dot-1 dot\"></div>\r\n          <div className=\"line-1 line strong\"></div>\r\n          <div className=\"line-2 line strong\"></div>\r\n          <div className=\"line-3 line strong\"></div>\r\n          <div className=\"line-4 line strong\"></div>\r\n          <div className=\"line-5 line strong\"></div>\r\n          <div className=\"line-6 line strong\"></div>\r\n        </div>\r\n        <div className=\"border-top\">\r\n          <div className=\"border-top-left border\">\r\n            <div className=\"dot-1 dot\"></div>\r\n          </div>\r\n          <div className=\"border-top-right border\">\r\n            <div className=\"dot-1 dot\"></div>\r\n            <div className=\"border-1 border\"></div>\r\n            <div className=\"dot-2 dot\"></div>\r\n          </div>\r\n        </div>\r\n        <div className=\"border-right border\">\r\n          <div className=\"dot-1 dot\"></div>\r\n          <div className=\"border-1 border\"></div>\r\n        </div>\r\n        <div className=\"border-bottom border\">\r\n          <div className=\"dot-1 dot\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HudLayout;\r\n","import React from 'react';\nimport Router from './Router';\nimport HudLayout from './cmps/HudLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router />\n      <HudLayout/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\n\r\nfunction Root({ store }) {\r\n  return (\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react';\nimport { render } from 'react-dom';\n\nimport store from './store/AppStore';\n\nimport './assets/css/Index.scss';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <Root store={store} />,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}