{"version":3,"sources":["cmps/helpers/mapHelpers/SvgDefsFilterShadow.js","cmps/helpers/FilterInput.js","cmps/helpers/countryDetails/CountryDetailsTitle.js","cmps/helpers/countryDetails/CountryDetailsList.js","cmps/helpers/countryDetails/index.js","cmps/helpers/mapHelpers/SvgDefsScanning.js","cmps/worldDashboard/mapUtils/GCircles.js","cmps/worldDashboard/mapUtils/GPaths.js","cmps/worldDashboard/mapUtils/MapTooltip.js","cmps/worldDashboard/mapUtils/SvgCountriesMap.js","cmps/worldDashboard/mapUtils/MapOptions.js","cmps/helpers/graphs/GraphColumnsPreview.js","cmps/helpers/graphs/GraphColumns.js","cmps/worldDashboard/WorldDashboardMap.js","cmps/worldDashboard/WorldDashboardListItem.js","cmps/worldDashboard/WorldDashboardList.js","cmps/worldDashboard/WorldDashboardWorldData.js","cmps/helpers/svg-icons/ReplaceSVG.js","cmps/helpers/graphs/GraphRows.js","cmps/worldDashboard/WorldDashboardDetails.js","pages/WorldDashboard.js"],"names":["SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","type","slope","x","y","width","floodColor","floodOpacity","in2","operator","FilterInput","list","filterKeys","placeholder","onFilter","useState","filterValue","setFilterValue","updateFilterValue","ev","console","log","target","value","toLowerCase","filteredList","filter","item","some","key","includes","className","onChange","onClick","focusable","viewBox","d","CountryDetailsTitle","country","sounds","isWorld","name","isCountryVoice","countryIcon","autoPlay","loop","muted","playsInline","loading","src","UtilsService","getSrc","alt","title","getImgSrc","alpha2","useEffect","msg","SpeechSynthesisUtterance","text","voice","window","speechSynthesis","getVoices","voiceURI","volume","rate","pitch","lang","speak","continent","CountryDetailsList","categoriesToAddIcon","CASES","DEATHS","RECOVERED","ACTIVE","CRITICAL","TESTS","coronaDetails","getCoronaDataKeys","map","category","isWishIcon","numberWithCommas","dividBy","POPULATION","percent","style","color","colorHEX","svgIcon","UPDATED","Date","toString","toLocaleString","toFixed","Number","populationDetails","populationData","getDataKeyByKey","fill","cx","cy","r","CountryDetails","settingsStore","useSelector","state","SvgDefsScanning","x1","y1","x2","y2","offset","stopColor","patternUnits","attributeType","attributeName","from","to","dur","repeatCount","GCircles","circlesDataKey","countries","dynamicRatio","args","countriesCircles","calcRadius","radius","shortNum","numberToShortString","dataKey","centerPoint","fontSize","strokeWidth","initStroke","GPaths","selectedCountry","minMapZoom","didDrag","pathClassName","currPathName","isDragging","initZoom","isAutoFocus","isTooltipShow","isGradient","onSetViewBox","onSetDynamicRatio","onSetMapView","onSelectCountry","selectedCountryRef","useRef","current","bBox","getBBox","abs","Math","max","bBoxX","bBoxY","zoom","countriesPaths","useMemo","isSelected","classSelected","isSelecting","ref","undefined","countriesPathsLabels","countriesLabels","MapTooltip","tooltip","maxMapZoom","ratioUpdateZoom","minTopSvg","minLeftSvg","initFontSize","memo","props","settings","isCirclesShow","svgRef","setViewBox","mapView","setMapView","setDynamicRatio","setDidDrag","setIsDragging","pointerDiff","setPointerDiff","setTooltip","setCurrPathName","handleWheel","useCallback","path","baseVal","updateZoom","copy","deltaY","addEventListener","passive","removeEventListener","handleMouseMove","ratioBySvgHeight","clientHeight","clientX","clientY","movementX","movementY","getAttribute","top","nativeEvent","offsetY","left","offsetX","stopDrag","setTimeout","onScroll","onWheel","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","MapOptions","isGraphShow","onToggleIsCirclesShow","onToggleIsAutoFocus","onSetCirclesDataKey","onToggleIsTooltipShow","onToggleIsGraphShow","onToggleGradient","circlesDataButtons","getDataKeysByKeys","circle","isActive","Button","textCondition","isBoolean","GraphColumnsPreview","arr","maxHeight","graphRatio","graphDataType","idx","length","backgroundColor","line","diff","colWidth","calcSlant","sqrt","angle","atan","PI","slant","calcLine","transform","date","orderDate","GraphColumns","graphRef","setGraphRatio","graphType","setGraphType","graphDataTypes","graphTypesButtons","historyObj","history","timeline","historyArr","Object","keys","clientWidth","WorldDashboardMap","countriesStore","selectedCountryIndex","worldData","mapOptionsFunction","WorldDashboardListItem","countryRef","categoryView","commasNum","APercent","activePercent","isNaN","numericCode","RANK","todayCases","VirusSVG","WorldDashboardList","React","filteredCountries","setFilteredCountries","isFiltered","setIsFiltered","isScroll","setIsScroll","handleUserKeyPress","preventDefault","arrowUpOrDown","code","nextIndex","scrollIntoView","block","scrollTop","scrollHeight","WorldDashboardWorldData","VirusLogoSVG","role","GraphRows","rowsAmount","setRowsAmount","DataKeys","graphBy","setGraphBy","graphDataKey","top10","sort","b","a","slice","ReplaceSVG","fontWeight","WorldDashboardDetails","WorldDashboard","dispatch","useDispatch","useHistory","params","useParams","isSelectedCountry","find","actions","selectCountry","push","WORLD_DASHBOARD","isSameCountry","alpha2ToPush","toggleIsCirclesShow","toggleIsAutoFocus","setCirclesDataKey","toggleIsTooltipShow","toggleGradient","toggleIsGraphShow","worldMap"],"mappings":"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","file":"static/js/3.c2990d42.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <filter id=\"dropshadow\" height=\"130%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n          <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n          <feComponentTransfer>\r\n            <feFuncA type=\"linear\" slope=\"0.5\" />\r\n          </feComponentTransfer>\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <defs>\r\n        <filter id=\"dropshadow-color\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\r\n          <feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offsetBlur\" />\r\n          <feFlood floodColor=\"var(--color2-border)\" floodOpacity=\"0.6\" result=\"offsetColor\" />\r\n          <feComposite in=\"offsetColor\" in2=\"offsetBlur\" operator=\"in\" result=\"offsetBlur\" />\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState } from 'react';\r\n\r\nfunction FilterInput({ list = [], filterKeys = [], placeholder = 'Search',\r\n  onFilter }) {\r\n\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const updateFilterValue = ev => {\r\n    console.log('updateFilterValue');\r\n    setFilterValue(ev.target.value);\r\n    const value = ev.target.value.toLowerCase();\r\n    if (!value) onFilter(null);\r\n    else {\r\n      const filteredList = list.filter(item => filterKeys.some(key => item[key].toLowerCase().includes(value)));\r\n      onFilter(filteredList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <label className=\"text-filter\">\r\n      <input className=\"filter-input\" type=\"text\" placeholder={placeholder}\r\n        value={filterValue} onChange={updateFilterValue} />\r\n      {filterValue &&\r\n        <div className=\"clear-button\" onClick={() => updateFilterValue({ target: { value: '' } })}>\r\n          <svg className=\"clear-button-svg\" focusable=\"false\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\r\n          </svg>\r\n        </div>\r\n      }\r\n      <span className=\"span-animation\"></span>\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React, { useEffect } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction CountryDetailsTitle({ country, sounds }) {\r\n\r\n  const isWorld = country.name === 'World';\r\n  const { isCountryVoice } = sounds;\r\n\r\n  const countryIcon = (() => {\r\n    return isWorld\r\n      // ? <img className=\"country-flag\" src={UtilsService.getSrc(`earth.gif`)} alt=\"Earth\" />\r\n      ? <video className=\"country-earth\" autoPlay loop muted playsInline loading=\"lazy\">\r\n        <source src={UtilsService.getSrc(`earth.mp4`)} type=\"video/mp4\" />\r\n      </video>\r\n      : <img className=\"country-flag\" alt=\"Flag\" title={country.name}\r\n        src={UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`)} />\r\n  })()\r\n\r\n  \r\n  useEffect(() => {\r\n    if (isCountryVoice && !isWorld) {\r\n      const msg = new SpeechSynthesisUtterance();\r\n      msg.text = country.name;\r\n      // const voices = window.speechSynthesis.getVoices();\r\n      // msg.voice = voices[1];\r\n      msg.voice = window.speechSynthesis.getVoices()[1];\r\n      msg.voiceURI = \"native\";\r\n      msg.volume = 1;\r\n      msg.rate = 1;\r\n      msg.pitch = 0.8;\r\n      msg.lang = 'en-US';\r\n      speechSynthesis.speak(msg);\r\n    }\r\n  }, [country, isCountryVoice, isWorld])\r\n\r\n  return (\r\n    <div className=\"country-details-title\">\r\n      <div className={`wrap-country-icon ${isWorld ? 'earth' : 'flag'}`}>\r\n        {countryIcon}\r\n      </div>\r\n      <div className=\"wrap-country-title\">\r\n        <h2>{country.name}</h2>\r\n        <span className=\"continent\">{country.continent}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsTitle;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport {\r\n  POPULATION, CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS, UPDATED,\r\n  getCoronaDataKeys, getDataKeyByKey\r\n} from '../../../constants/DataKeys';\r\n\r\nfunction CountryDetailsList({ country }) {\r\n  const categoriesToAddIcon = [CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS];\r\n\r\n  const coronaDetails = getCoronaDataKeys().map(category => {\r\n    const isWishIcon = categoriesToAddIcon.some(key => key === category.key);\r\n    const value = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const dividBy = category.key === CASES ? POPULATION : category.dividBy;\r\n    const percent = country[category.key] / country[dividBy] * 100;\r\n    return <li className=\"country-details-item\" key={category.key} style={{ color: category.colorHEX }}>\r\n      <span className=\"title\">\r\n        {category.title}:&nbsp;\r\n        {isWishIcon && <div className=\"wrap-icon-svg\">{category.svgIcon}</div>}\r\n      </span>\r\n      {category.key === UPDATED\r\n        ? <span className=\"value\" title={new Date(country[category.key]).toString()}>\r\n          {new Date(country[category.key]).toLocaleString()}\r\n        </span>\r\n        : <span className=\"value\" title={value}>{value}</span>\r\n      }\r\n      {!!percent && dividBy && !!country[category.key] &&\r\n        <span className=\"percent\" title={percent.toFixed(2)}>\r\n          {Number(percent.toFixed(0)) !== 0 ? percent.toFixed(0) : percent.toFixed(2)}\r\n          %\r\n        </span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  const populationDetails = (() => {\r\n    const populationData = getDataKeyByKey(POPULATION);\r\n    const value = UtilsService.numberWithCommas(country[populationData.key]);\r\n    return <li className=\"country-details-item\">\r\n      <span className=\"title\">{populationData.title}:&nbsp;</span>\r\n      <div className=\"value population\">\r\n        <span title={value}>{value}</span>\r\n        <span className=\"wrap-icon-svg\">\r\n          <svg viewBox=\"0 0 512 512\">\r\n            <circle fill=\"currentColor\" cx=\"256\" cy=\"378.5\" r=\"25\" />\r\n            <path fill=\"currentColor\" d=\"M256,0C114.516,0,0,114.497,0,256c0,141.484,114.497,256,256,256c141.484,0,256-114.497,256-256\r\n\t\t\t\tC512,114.516,397.503,0,256,0z M256,472c-119.377,0-216-96.607-216-216c0-119.377,96.607-216,216-216\r\n\t\t\t\tc119.377,0,216,96.607,216,216C472,375.377,375.393,472,256,472z\"/>\r\n            <path fill=\"currentColor\" d=\"M256,128.5c-44.112,0-80,35.888-80,80c0,11.046,8.954,20,20,20s20-8.954,20-20c0-22.056,17.944-40,40-40\r\n\t\t\t\tc22.056,0,40,17.944,40,40c0,22.056-17.944,40-40,40c-11.046,0-20,8.954-20,20v50c0,11.046,8.954,20,20,20\r\n\t\t\t\tc11.046,0,20-8.954,20-20v-32.531c34.466-8.903,60-40.26,60-77.469C336,164.388,300.112,128.5,256,128.5z\"/>\r\n          </svg>\r\n          <div className=\"population-info\">\r\n            <span>Population of 2020</span>\r\n          </div>\r\n        </span>\r\n      </div>\r\n    </li>\r\n  })()\r\n\r\n  return (\r\n    <ul className=\"country-details-list\">\r\n      {populationDetails}\r\n      {coronaDetails}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport CountryDetailsTitle from './CountryDetailsTitle';\r\nimport CountryDetailsList from './CountryDetailsList';\r\n\r\nfunction CountryDetails({ country }) {\r\n\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n  const sounds = settingsStore ? settingsStore.sounds : { sounds: false };\r\n  return (\r\n    <div className=\"country-details flex-col\">\r\n      <CountryDetailsTitle country={country} sounds={sounds} />\r\n      <CountryDetailsList country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\n\r\nfunction SvgDefsScanning() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0\" y2=\"100%\">\r\n          <stop offset=\"0%\" style={{ stopColor: \"var(--color1-border)\" }} />\r\n          <stop offset=\"25%\" style={{ stopColor: \"#82dcff\" }} />\r\n          <stop offset=\"50%\" style={{ stopColor: \"var(--color2-border)\" }} />\r\n          <stop offset=\"75%\" style={{ stopColor: \"#82dcff\" }} />\r\n          <stop offset=\"100%\" style={{ stopColor: \"var(--color1-border)\" }} />\r\n        </linearGradient>\r\n\r\n        <pattern id=\"pattern\" x=\"0\" y=\"0\" width=\"300%\" height=\"300%\" \r\n        patternUnits=\"objectBoundingBox\"\r\n        >\r\n          <rect x=\"0\" y=\"0\" width=\"300%\" height=\"150%\" fill=\"url(#gradient)\">\r\n            <animate attributeType=\"XML\"\r\n              attributeName=\"y\"\r\n              from=\"0\" to=\"150%\"\r\n              dur=\"6s\"\r\n              repeatCount=\"indefinite\" />\r\n          </rect>\r\n          <rect x=\"0\" y=\"-150%\" width=\"300%\" height=\"150%\" fill=\"url(#gradient)\">\r\n            <animate attributeType=\"XML\"\r\n              attributeName=\"y\"\r\n              from=\"-150%\" to=\"0\"\r\n              dur=\"6s\"\r\n              repeatCount=\"indefinite\" />\r\n          </rect>\r\n        </pattern>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsScanning;","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport { ACTIVE, getDataKeyByKey } from '../../../constants/DataKeys';\r\n\r\nfunction GCircles({ circlesDataKey = ACTIVE, countries, dynamicRatio, args }) {\r\n\r\n  const countriesCircles = countries.map(country => {\r\n    const calcRadius = (country[circlesDataKey] / 1000).toFixed();\r\n    const radius = calcRadius > 100 ? 18 : calcRadius > 50 ? 14 : calcRadius > 10 ? 11 :  calcRadius > 2 ? 8 : 6;\r\n    const shortNum = UtilsService.numberToShortString(country[circlesDataKey]);\r\n    if (!shortNum) return '';\r\n    const dataKey = getDataKeyByKey(circlesDataKey);\r\n    // const fill = `${dataKey.colorHEX}1a`;\r\n    const fill = `${dataKey.colorHEX}20`;\r\n    return <g key={country.id}>\r\n      <circle className=\"country-circle-data\" name={country.name} style={{ fill }}\r\n        // style={{ cx: country.centerPoint.x, cy: country.centerPoint.y, r: radius * dynamicRatio }}\r\n        cx={country.centerPoint.x} cy={country.centerPoint.y} r={radius * dynamicRatio}\r\n      />\r\n      <text className=\"circle-text\" x={country.centerPoint.x} y={country.centerPoint.y}\r\n        dy={`${radius * dynamicRatio / 3}px`} fontSize={`${radius * 0.85 * dynamicRatio}px`}>\r\n        {shortNum}\r\n      </text>\r\n    </g>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-circles\" style={{ strokeWidth: args.initStroke * dynamicRatio }}>\r\n      {countriesCircles}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GCircles;","import React, { useEffect, useRef, useMemo } from \"react\";\r\nimport countriesLabels from \"../../../services/data/countriesLabels.json\";\r\n\r\nfunction GPaths({ countries, selectedCountry, dynamicRatio, args, minMapZoom, didDrag,\r\n  pathClassName, currPathName, isDragging, initZoom, isAutoFocus, isTooltipShow, isGradient,\r\n  onSetViewBox, onSetDynamicRatio, onSetMapView, onSelectCountry }) {\r\n\r\n  const selectedCountryRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!selectedCountryRef.current || !isAutoFocus) return;\r\n    const bBox = selectedCountryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    const x = bBoxX - minMapZoom / 2, y = bBoxY - minMapZoom / 2, zoom = max + minMapZoom;\r\n    onSetViewBox(`${x} ${y} ${zoom} ${zoom}`);\r\n    onSetDynamicRatio(zoom / initZoom);\r\n    onSetMapView({ zoom, x, y });\r\n  }, [selectedCountry, onSetViewBox, onSetDynamicRatio, onSetMapView, initZoom, minMapZoom, isAutoFocus])\r\n\r\n  const countriesPaths = useMemo(() => {\r\n    return countries.map(country => {\r\n      const isSelected = country.name === selectedCountry.name;\r\n      const classSelected = isSelected ? 'selected' : '';\r\n      const isSelecting = isDragging && !didDrag && currPathName === country.name ? 'selecting' : '';\r\n      return <path className={`${pathClassName} ${classSelected} ${isSelecting}`} key={country.id}\r\n        alpha2={country.alpha2} name={country.name} d={country.d}\r\n        onClick={() => !didDrag && onSelectCountry(country)}\r\n        ref={isSelected ? selectedCountryRef : undefined}\r\n        style={{ fill: `${isGradient && isSelected ? \"url('#pattern')\" : \"\"}` }}\r\n      >\r\n        {!isTooltipShow && <title>{country.name}</title>}\r\n      </path>\r\n    })\r\n  }, [countries, currPathName, didDrag, isDragging, isGradient, isTooltipShow, onSelectCountry, pathClassName, selectedCountry.name])\r\n\r\n  const countriesPathsLabels = countriesLabels.map(country => {\r\n    return <path className=\"country-path-label\" d={country.d} key={country.id}></path>\r\n  })\r\n\r\n  return (\r\n    <g className=\"g-paths\" style={{ strokeWidth: args.initStroke * dynamicRatio, filter: 'url(#dropshadow)' }}>\r\n      {countriesPaths}\r\n      {countriesPathsLabels}\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default GPaths;","import React from \"react\";\r\nimport UtilsService from '../../../services/UtilsService';\r\nfunction MapTooltip({ tooltip }) {\r\n\r\n  return (\r\n    <div className=\"map-tooltip\" style={tooltip.style}>\r\n      <img className=\"tooltip-img\" alt=\"Flag\"\r\n        src={UtilsService.getImgSrc(`flags/${tooltip.alpha2.toLowerCase()}.png`)} />\r\n      <span className=\"tooltip-title\">{tooltip.name}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapTooltip;","import React, { memo, useState, useEffect, useCallback, useRef } from \"react\";\r\n\r\nimport SvgDefsFilterShadow from '../../helpers/mapHelpers/SvgDefsFilterShadow';\r\nimport SvgDefsScanning from '../../helpers/mapHelpers/SvgDefsScanning';\r\nimport GCircles from './GCircles';\r\nimport GPaths from './GPaths';\r\nimport MapTooltip from './MapTooltip';\r\n\r\n\r\nconst pathClassName = 'country-path';\r\nconst svgClassName = 'svg-map';\r\n\r\nconst initZoom = 554;\r\nconst baseMap = { width: 954, height: 514 };\r\n\r\nconst args = {\r\n  minMapZoom: 30, maxMapZoom: 1100, ratioUpdateZoom: 0.15,\r\n  minTopSvg: (baseMap.height - initZoom) / 2, minLeftSvg: (baseMap.width - initZoom) / 2,\r\n  initFontSize: initZoom / 30, initStroke: initZoom / 1000\r\n};\r\n\r\nfunction SvgCountriesMap(props) {\r\n  const {\r\n    countries,\r\n    selectedCountry,\r\n    settings: { isCirclesShow, circlesDataKey, isAutoFocus, isTooltipShow, isGradient }, onSelectCountry\r\n  } = props;\r\n\r\n  const svgRef = useRef(initZoom);\r\n\r\n  const [viewBox, setViewBox] = useState(`${args.minLeftSvg} ${args.minTopSvg} ${initZoom} ${initZoom}`);\r\n  const [mapView, setMapView] = useState({ zoom: initZoom, x: args.minLeftSvg, y: args.minTopSvg });\r\n  const [dynamicRatio, setDynamicRatio] = useState(1);\r\n\r\n  const [didDrag, setDidDrag] = useState(false);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [pointerDiff, setPointerDiff] = useState({ x: 1, y: 1 });\r\n  const [tooltip, setTooltip] = useState(null);\r\n\r\n  const [currPathName, setCurrPathName] = useState(null);\r\n\r\n  const handleWheel = useCallback(ev => {\r\n    const isMouseOnSvgMap = ev.path && ev.path.some(path => path.className && path.className.baseVal\r\n      && path.className.baseVal.includes(svgClassName));\r\n    if (!isMouseOnSvgMap) return;\r\n    const updateZoom = mapView.zoom * args.ratioUpdateZoom;\r\n    const copy = mapView;\r\n    if (ev.deltaY > 0) {\r\n      if (mapView.zoom + updateZoom + args.minMapZoom < args.maxMapZoom) {\r\n        copy.zoom = copy.zoom + updateZoom;\r\n        copy.x = copy.x - updateZoom / 2;\r\n        copy.y = copy.y - updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    } else {\r\n      if (mapView.zoom - updateZoom - args.minMapZoom > 0) {\r\n        copy.zoom = copy.zoom - updateZoom;\r\n        copy.x = copy.x + updateZoom / 2;\r\n        copy.y = copy.y + updateZoom / 2;\r\n        setMapView(copy);\r\n      }\r\n    }\r\n    setDynamicRatio(mapView.zoom / initZoom);\r\n    setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n  }, [mapView]);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n    return () => window.removeEventListener(\"mousewheel\", handleWheel, { passive: false });\r\n  }, [handleWheel])\r\n\r\n  const startDrag = ev => {\r\n    setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n    setIsDragging(true);\r\n    setCurrPathName(ev.target.getAttribute('name'));\r\n  }\r\n  const handleMouseMove = useCallback(ev => {\r\n    if (isDragging) {\r\n      const ratioBySvgHeight = initZoom / svgRef.current.clientHeight;\r\n      const x = mapView.x - (ev.clientX - pointerDiff.x) * dynamicRatio * ratioBySvgHeight;\r\n      const y = mapView.y - (ev.clientY - pointerDiff.y) * dynamicRatio * ratioBySvgHeight;\r\n      setMapView({ ...mapView, x, y });\r\n      setViewBox(`${mapView.x} ${mapView.y} ${mapView.zoom} ${mapView.zoom}`);\r\n      setPointerDiff({ x: ev.clientX, y: ev.clientY });\r\n      (ev.movementX !== 0 || ev.movementY !== 0) && setDidDrag(true);\r\n    }\r\n    if (isTooltipShow) {\r\n      if (ev.target.getAttribute('class').includes(pathClassName)) {\r\n        setTooltip({\r\n          name: ev.target.getAttribute('name'),\r\n          alpha2: ev.target.getAttribute('alpha2'),\r\n          style: { top: ev.nativeEvent.offsetY - 50, left: ev.nativeEvent.offsetX + 25 }\r\n        });\r\n      } else {\r\n        setTooltip(null);\r\n      }\r\n    }\r\n  }, [dynamicRatio, isDragging, isTooltipShow, mapView, pointerDiff]);\r\n\r\n  const stopDrag = () => {\r\n    setIsDragging(false);\r\n    setTimeout(() => setDidDrag(false), 0);\r\n  }\r\n  const handleMouseLeave = () => {\r\n    stopDrag();\r\n    setTooltip(null);\r\n  }\r\n\r\n  const handleScroll = ev => {\r\n    console.log(ev);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <svg className={svgClassName} viewBox={viewBox} ref={svgRef}\r\n        onScroll={handleScroll} onWheel={handleWheel}\r\n        onMouseDown={startDrag}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseUp={stopDrag} onMouseLeave={handleMouseLeave}>\r\n\r\n        <SvgDefsFilterShadow />\r\n        <SvgDefsScanning />\r\n\r\n        <GPaths countries={countries} selectedCountry={selectedCountry} dynamicRatio={dynamicRatio} args={args}\r\n          currPathName={currPathName} isDragging={isDragging} pathClassName={pathClassName} didDrag={didDrag}\r\n          initZoom={initZoom} minMapZoom={args.minMapZoom} isAutoFocus={isAutoFocus} isTooltipShow={isTooltipShow}\r\n          isGradient={isGradient}\r\n          onSetViewBox={setViewBox} onSetDynamicRatio={setDynamicRatio} onSetMapView={setMapView}\r\n          onSelectCountry={onSelectCountry} />\r\n        {isCirclesShow &&\r\n          <GCircles circlesDataKey={circlesDataKey} countries={countries} dynamicRatio={dynamicRatio} args={args} />\r\n        }\r\n      </svg>\r\n\r\n      {isTooltipShow && tooltip &&\r\n        <MapTooltip tooltip={tooltip} />\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default memo(SvgCountriesMap);","import React from \"react\";\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, TESTS, ACTIVE, getDataKeysByKeys } from '../../../constants/DataKeys';\r\n\r\nfunction MapOptions({ settings: { isCirclesShow, isAutoFocus, circlesDataKey, isTooltipShow, isGraphShow, isGradient },\r\n  onToggleIsCirclesShow, onToggleIsAutoFocus, onSetCirclesDataKey, onToggleIsTooltipShow, onToggleIsGraphShow,onToggleGradient }) {\r\n\r\n  const circleClicked = key => {\r\n    if (circlesDataKey !== key) onSetCirclesDataKey(key);\r\n  }\r\n\r\n  const circlesData = getDataKeysByKeys([ACTIVE, CASES, DEATHS, RECOVERED, TESTS]);\r\n\r\n  const circlesDataButtons = circlesData.map(circle => {\r\n    const isActive = circlesDataKey === circle.key;\r\n    return <Button key={circle.key} text={circle.title} type={`${circle.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }}\r\n      onClick={() => circleClicked(circle.key)} />\r\n  })\r\n\r\n  return (\r\n    <div className=\"map-options\">\r\n\r\n      <div className=\"main-options\">\r\n        <Button text=\"Circles\" textCondition={isCirclesShow} isBoolean={true}\r\n          onClick={onToggleIsCirclesShow} />\r\n        <Button text=\"Auto Focus\" textCondition={isAutoFocus} isBoolean={true}\r\n          onClick={onToggleIsAutoFocus} />\r\n        <Button text=\"Tooltip\" textCondition={isTooltipShow} isBoolean={true}\r\n          onClick={onToggleIsTooltipShow} />\r\n        <Button text=\"Graph\" textCondition={isGraphShow} isBoolean={true}\r\n          onClick={onToggleIsGraphShow} />\r\n        <Button text=\"Gradient\" textCondition={isGradient} isBoolean={true}\r\n          onClick={onToggleGradient} />\r\n      </div>\r\n\r\n      {isCirclesShow &&\r\n        <div className=\"circles-options\">\r\n          {circlesDataButtons}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapOptions;","import React from 'react';\r\nimport { numberWithCommas, orderDate } from '../../../services/UtilsService';\r\n\r\nfunction GraphColumnsPreview({ arr, maxHeight, graphRatio, graphDataType }) {\r\n\r\n  const calcLine = (item, idx) => {\r\n    const diff = (arr[idx + 1].value - item.value) / maxHeight * 100;\r\n    const colWidth = 1 / arr.length * 100 * graphRatio;\r\n    const calcSlant = Math.sqrt(diff * diff + colWidth * colWidth);\r\n    const tanAngle = Math.atan(diff / colWidth) * 180 / Math.PI;\r\n    return { angle: tanAngle, slant: calcSlant };\r\n  }\r\n\r\n  const list = arr.map((item, idx) => {\r\n    const width = 1 / arr.length * 100 + '%';\r\n    const height = item.value / maxHeight * 100 + '%';\r\n    const backgroundColor = graphDataType.colorHEX;\r\n    const line = arr[idx + 1] ? calcLine(item, idx) : 0;\r\n    const style = {\r\n      top: `-${line.slant * 2}px`,\r\n      transform: `rotate(${line.angle * -1}deg)`\r\n    }\r\n    return <li className=\"column\" key={item.date} style={{ width }}>\r\n      <div className=\"column-percent\" style={{ height, backgroundColor }}>\r\n        <div className=\"wrap-value\">\r\n          <span className=\"value\">{numberWithCommas(item.value)}</span>\r\n        </div>\r\n        <div className=\"hover-value\">\r\n          <span className=\"value\">{numberWithCommas(item.value)}</span>\r\n          <span className=\"date\">{orderDate(item.date)}</span>\r\n        </div>\r\n        {arr[idx + 1] && <span className=\"line\" style={style}></span>}\r\n      </div>\r\n    </li>\r\n  })\r\n\r\n  return (\r\n    <ul className=\"columns\">\r\n      {list}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default GraphColumnsPreview;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport Button from '../../elements/Button';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys, getDataKeyByKey } from '../../../constants/DataKeys';\r\nimport { orderDate } from '../../../services/UtilsService';\r\n\r\nimport GraphColumnsPreview from './GraphColumnsPreview';\r\n\r\nfunction GraphColumns({ selectedCountry }) {\r\n\r\n  const graphRef = useRef();\r\n  const [graphRatio, setGraphRatio] = useState();\r\n  const [graphType, setGraphType] = useState(CASES);\r\n\r\n  const typeClicked = key => {\r\n    if (graphType !== key) setGraphType(key);\r\n  }\r\n\r\n  const graphDataTypes = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n  const graphDataType = graphType === CASES\r\n    ? { ...getDataKeyByKey(graphType), color: 'teal', colorHEX: '#008080' }\r\n    : getDataKeyByKey(graphType);\r\n\r\n  const graphTypesButtons = graphDataTypes.map(type => {\r\n    const isActive = graphType === type.key;\r\n    return <Button key={type.key} text={type.title} type={`${type.color} ${isActive && 'active'}`}\r\n      style={{ fontSize: '0.8rem' }} onClick={() => typeClicked(type.key)} />\r\n  })\r\n\r\n  const historyObj = selectedCountry.history ? selectedCountry.history.timeline[graphType] : {};\r\n  const historyArr = Object.keys(historyObj).map(key => ({ date: key, value: historyObj[key] }));\r\n\r\n  const maxHeight = historyArr.length ? historyArr[historyArr.length - 1].value * 1.05 : 0;\r\n\r\n  useEffect(() => {\r\n    if (graphRef.current && !graphRatio) {\r\n      setGraphRatio(graphRef.current.clientWidth / graphRef.current.clientHeight);\r\n    }\r\n  }, [graphRef, graphRatio])\r\n\r\n  return (\r\n    <div className=\"graph-columns\" ref={graphRef}>\r\n      <div className=\"graph-options\">\r\n        <div className=\"graph-text\">\r\n          <p>\r\n            <span className=\"text\">{`From ${orderDate(historyArr[0].date)}`}</span>\r\n            <span className=\"text\">{`To ${orderDate(historyArr[historyArr.length - 1].date)}`}</span>\r\n          </p>\r\n        </div>\r\n        <div className=\"buttons-options flex-center\">\r\n          {graphTypesButtons}\r\n        </div>\r\n      </div>\r\n\r\n      {graphRef && graphRef.current &&\r\n        <GraphColumnsPreview arr={historyArr} maxHeight={maxHeight} graphRatio={graphRatio}\r\n          graphDataType={graphDataType} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphColumns;\r\n// export default React.memo(GraphColumns);\r\n\r\n","import React, { useMemo } from \"react\";\r\n\r\nimport SvgCountriesMap from './mapUtils/SvgCountriesMap';\r\nimport MapOptions from './mapUtils/MapOptions';\r\nimport GraphColumns from '../helpers/graphs/GraphColumns';\r\n\r\nfunction WorldDashboardMap({ settings, countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry, mapOptionsFunction }) {\r\n\r\n  const selectedCountry = useMemo(() => {\r\n    return selectedCountryIndex || selectedCountryIndex === 0\r\n      ? countries[selectedCountryIndex] : worldData;\r\n  }, [countries, selectedCountryIndex, worldData]);\r\n\r\n  const { isGraphShow } = settings;\r\n  return (\r\n    <div className=\"world-dashboard-map\">\r\n      <SvgCountriesMap countries={countries} settings={settings} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      <MapOptions settings={settings} {...mapOptionsFunction} />\r\n      {isGraphShow && selectedCountry.history &&\r\n        <div className=\"wrap-graph-columns\">\r\n          <GraphColumns selectedCountry={selectedCountry} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardMap;","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport VirusSVG from '../helpers/svg-icons/VirusSVG';\r\nimport { CASES, DEATHS, RECOVERED, ACTIVE, RANK, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardListItem({ country, selectedCountry, onSelectCountry, countryRef }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  const src = UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`);\r\n\r\n  const caterogies = getDataKeysByKeys([ACTIVE, CASES, DEATHS, RECOVERED]);\r\n\r\n  const categoryView = caterogies.map(category => {\r\n    const shortNum = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const commasNum = UtilsService.numberWithCommas(country[category.key]);\r\n    const APercent = (country[ACTIVE] / country[CASES] * 100).toFixed();\r\n    const activePercent = !isNaN(APercent) && APercent > 0 ? APercent + '%' : '';\r\n    return <div className=\"category flex-col\" key={category.key}\r\n      title={`${commasNum} ${category.title}`}>\r\n      <span className=\"title\">\r\n        {category.title}\r\n        {category.key === ACTIVE && <span className=\"title-percent\">\r\n          &nbsp;{activePercent}\r\n        </span>}\r\n      </span>\r\n      <span className=\"value\">{shortNum}</span>\r\n    </div>\r\n  })\r\n\r\n  return (\r\n    <li className={`country ${isSelected}`} ref={countryRef}\r\n      onClick={() => onSelectCountry(country)}>\r\n      <span className=\"numeric-code\" title={`Numeric Code ${country.numericCode}`}>\r\n        N-C {country.numericCode}\r\n      </span>\r\n      <div className=\"top-section\">\r\n        <div className=\"wrap-country-flag\">\r\n          <img className=\"country-flag\" src={src} alt=\"Flag\" title={country.name} />\r\n        </div>\r\n        <div className=\"wrap-country-status\">\r\n          <h3 className=\"country-name\">{country.name}</h3>\r\n          <div className=\"status-details\">\r\n            <span className=\"rank\" title={`Rank ${country[RANK] + 1}`}>\r\n              <span className=\"rank-icon\">❱❱</span>\r\n              {country[RANK] + 1}\r\n            </span>\r\n            <div className=\"cases\" title={`Today Cases ${UtilsService.numberWithCommas(country.todayCases)}`}>\r\n              <div className=\"wrap-icon-svg\"><VirusSVG /></div>\r\n              <span className=\"cases-value\">+{UtilsService.numberWithCommas(country.todayCases)}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"bottom-section\">\r\n        {categoryView}\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardListItem;\r\n","import React from 'react';\r\nimport FilterInput from '../helpers/FilterInput';\r\nimport WorldDashboardListItem from './WorldDashboardListItem';\r\n\r\nfunction WorldDashboardList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  // console.log('WorldDashboardList');\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const [filteredCountries, setFilteredCountries] = React.useState(countries.filter((item, idx) => idx < 40));\r\n  const [isFiltered, setIsFiltered] = React.useState(false);\r\n  const [isScroll, setIsScroll] = React.useState(false);\r\n\r\n  const selectedCountryRef = React.useRef(null);\r\n\r\n  const list = filteredCountries.map((country, idx) => {\r\n    const countryRef = selectedCountry.alpha2 === country.alpha2 ? selectedCountryRef : null;\r\n    return (isScroll || isFiltered || idx < 10)\r\n      ? <WorldDashboardListItem key={country.id} countryRef={countryRef}\r\n        country={country} selectedCountry={selectedCountry}\r\n        onSelectCountry={onSelectCountry} />\r\n      : <li key={idx} ref={countryRef} style={{ height: '6.5rem' }}></li>\r\n  })\r\n\r\n  const handleScroll = ev => {\r\n    setIsScroll(true);\r\n    if (isFiltered) return;\r\n    const scrollEnd = ev.target.scrollTop + 100 >= ev.target.scrollHeight - ev.target.clientHeight;\r\n    if (scrollEnd) setFilteredCountries(countries);\r\n  }\r\n\r\n  const filterCountries = filteredList => {\r\n    if (filteredList) {\r\n      setFilteredCountries(filteredList);\r\n      setIsFiltered(true);\r\n    } else {\r\n      setFilteredCountries(countries.filter((item, idx) => idx < 40));\r\n    }\r\n  }\r\n\r\n  const handleUserKeyPress = React.useCallback((ev) => {\r\n    ev.preventDefault();\r\n    const arrowUpOrDown = ev.code === 'ArrowDown' ? 1 : ev.code === 'ArrowUp' ? -1 : 0;\r\n    if (!arrowUpOrDown) return;\r\n    let nextIndex = selectedCountryIndex + arrowUpOrDown;\r\n    if (nextIndex < 0) nextIndex = filteredCountries.length - 1;\r\n    if (nextIndex > countries.length - 1) nextIndex = 0;\r\n    if (filteredCountries[nextIndex]) {\r\n      onSelectCountry(filteredCountries[nextIndex]);\r\n    } else {\r\n      setFilteredCountries(countries);\r\n    }\r\n    selectedCountryRef.current.scrollIntoView({ block: 'center' });\r\n  }, [filteredCountries, selectedCountryIndex, onSelectCountry, countries])\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener('keyup', handleUserKeyPress);\r\n    return (() => window.removeEventListener('keyup', handleUserKeyPress));\r\n  }, [handleUserKeyPress])\r\n\r\n  React.useEffect(() => {\r\n    setTimeout(() => {\r\n      if (selectedCountryRef.current) selectedCountryRef.current.scrollIntoView({ block: 'center' });\r\n    }, 0)\r\n  }, [selectedCountryRef])\r\n\r\n  return (\r\n    <div className=\"world-dashboard-list flex-col\">\r\n      <div className=\"custom-filter-input\">\r\n        <FilterInput list={countries} filterKeys={['name']} placeholder=\"Search Country\"\r\n          onFilter={filterCountries} />\r\n      </div>\r\n      <ul className=\"countries\" onScroll={handleScroll}>\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardList;\r\n","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport { CASES, DEATHS, RECOVERED, getDataKeysByKeys } from '../../constants/DataKeys';\r\n\r\nfunction WorldDashboardWorldData({ worldData, onSelectCountry }) {\r\n\r\n  const data = getDataKeysByKeys([CASES, DEATHS, RECOVERED]);\r\n\r\n  const list = data.map(category => (\r\n    <li className=\"world-detail flex-col\" key={category.key} onClick={() => onSelectCountry()}>\r\n      <span className=\"pseudo-border\"></span>\r\n      <p>{category.title}</p>\r\n      <p>{UtilsService.numberWithCommas(worldData[category.key])}</p>\r\n\r\n      {category.dividBy &&\r\n        <span className=\"wrap-precent\">\r\n          <span className=\"precent\">\r\n            {(worldData[category.key] / worldData[category.dividBy] * 100).toFixed()}%\r\n          </span>\r\n        </span>\r\n      }\r\n    </li>\r\n  ))\r\n\r\n  return (\r\n    <div className=\"world-dashboard-world-details\">\r\n      <h2 className=\"title\">World</h2>\r\n      <ul className=\"world-details\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardWorldData;\r\n","import React from 'react';\r\n\r\nfunction VirusLogoSVG() {\r\n  return (\r\n    <svg role=\"img\" viewBox=\"0 0 50 50\">\r\n      <path fill=\"currentColor\" d=\"M 25 3 C 12.867715 3 3 12.867715 3 25 C 3 29.006019 4.0814389 32.738815 5.9296875 35.96875 L 3.5839844 35.251953 A 2.0002 2.0002 0 1 0 2.4160156 39.076172 L 12.138672 42.046875 L 13.490234 32.035156 A 2.0002 2.0002 0 0 0 11.550781 29.740234 A 2.0002 2.0002 0 0 0 9.5273438 31.5 L 9.2304688 33.699219 C 7.8172419 31.125736 7 28.181418 7 25 C 7 15.026285 15.026285 7 25 7 L 27 7 L 27 3 L 25 3 z M 31.720703 3.9511719 L 30.160156 7.640625 L 32.009766 8.4199219 L 32.009766 8.4101562 C 33.849766 9.1891562 32.010609 8.4104063 33.849609 9.1914062 L 35.410156 5.5117188 L 31.720703 3.9511719 z M 37.861328 7.953125 L 36.509766 17.964844 A 2.0002 2.0002 0 1 0 40.472656 18.5 L 40.769531 16.300781 C 42.182758 18.874264 43 21.818582 43 25 C 43 34.973715 34.973715 43 25 43 L 23 43 L 23 47 L 25 47 C 37.132285 47 47 37.132285 47 25 C 47 20.993981 45.918561 17.261185 44.070312 14.03125 L 46.416016 14.748047 A 2.0002 2.0002 0 1 0 47.583984 10.923828 L 37.861328 7.953125 z M 16.150391 40.810547 L 14.589844 44.490234 L 16.429688 45.269531 C 18.279688 46.049531 16.43025 45.269828 18.28125 46.048828 L 19.830078 42.359375 L 17.990234 41.580078 L 17.990234 41.589844 L 16.150391 40.810547 z\" />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default VirusLogoSVG;\r\n","import React, { useState } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport * as DataKeys from '../../../constants/DataKeys';\r\nimport ReplaceSVG from '../svg-icons/ReplaceSVG';\r\nimport Button from '../../elements/Button';\r\n\r\nfunction GraphRows({ countries, onSelectCountry }) {\r\n\r\n  const [rowsAmount, setRowsAmount] = useState(10);\r\n  const [graphBy, setGraphBy] = useState(DataKeys.TODAY_DEATHS);\r\n  const graphDataKey = DataKeys.getDataKeyByKey(graphBy);\r\n\r\n  const top10 = [...countries].sort((b, a) => (a[graphBy] > b[graphBy]) ? 1 : ((b[graphBy] > a[graphBy]) ? -1 : 0))\r\n    .slice(0, rowsAmount);\r\n  // .filter((item, idx) => idx < rowsAmount);\r\n\r\n  const list = top10.map(country => {\r\n    const width = country[graphBy] / top10[0][graphBy] * 100 + '%';\r\n    const backgroundColor = graphDataKey.colorHEX + '80';\r\n    return <li className=\"row\" key={country.alpha2} style={{ width, backgroundColor }}>\r\n      <span className=\"name\" onClick={() => onSelectCountry(country)}>{country.name}</span>\r\n      <span className=\"amount\">&nbsp;{UtilsService.numberWithCommas(country[graphBy])}</span>\r\n    </li>\r\n  })\r\n\r\n  const toggleGraph = () => {\r\n    if (graphBy === DataKeys.TODAY_DEATHS) setGraphBy(DataKeys.DEATHS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.DEATHS_PER_ONE_MILLION) setGraphBy(DataKeys.DEATHS);\r\n    if (graphBy === DataKeys.DEATHS) setGraphBy(DataKeys.TODAY_CASES);\r\n    if (graphBy === DataKeys.TODAY_CASES) setGraphBy(DataKeys.CASES_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.CASES_PER_ONE_MILLION) setGraphBy(DataKeys.CASES);\r\n    if (graphBy === DataKeys.CASES) setGraphBy(DataKeys.TESTS_PER_ONE_MILLION);\r\n    if (graphBy === DataKeys.TESTS_PER_ONE_MILLION) setGraphBy(DataKeys.CRITICAL);\r\n    if (graphBy === DataKeys.CRITICAL) setGraphBy(DataKeys.RECOVERED);\r\n    if (graphBy === DataKeys.RECOVERED) setGraphBy(DataKeys.ACTIVE);\r\n    if (graphBy === DataKeys.ACTIVE) setGraphBy(DataKeys.TODAY_DEATHS);\r\n  }\r\n\r\n  const diff = 5;\r\n  return (\r\n    <div className=\"graph-rows\">\r\n      <div className=\"wrap-title\" onClick={toggleGraph}>\r\n        <div className=\"wrap-icon-svg\"><ReplaceSVG /></div>\r\n        <h3 className=\"title\">{graphDataKey.title}</h3>\r\n        <div className=\"wrap-icon-svg\" style={{ color: graphDataKey.color }}>{graphDataKey.svgIcon}</div>\r\n      </div>\r\n      <ul className=\"rows\">\r\n        {list}\r\n        <li className=\"flex-evenly\">\r\n          {rowsAmount > diff &&\r\n            <Button text={`− ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount - diff)} />\r\n          }\r\n          {rowsAmount < diff * 10 &&\r\n            <Button text={`+ ${diff}`} style={{ fontWeight: 'bold', width: '2.5rem' }}\r\n              onClick={() => setRowsAmount(rowsAmount + diff)} />\r\n          }\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GraphRows;\r\n","import React from 'react';\r\nimport GraphRows from '../helpers/graphs/GraphRows';\r\nimport CountryDetails from '../helpers/countryDetails';\r\n\r\nfunction WorldDashboardDetails({ countriesStore: { countries, selectedCountryIndex, worldData },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : worldData;\r\n\r\n  return (\r\n    <div className=\"world-dashboard-details flex-col\">\r\n      <CountryDetails country={selectedCountry}/>\r\n      <GraphRows countries={countries} onSelectCountry={onSelectCountry} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WorldDashboardDetails;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport { WORLD_DASHBOARD } from '../constants/RouterPaths';\r\n\r\nimport WorldDashboardMap from '../cmps/worldDashboard/WorldDashboardMap';\r\nimport WorldDashboardList from '../cmps/worldDashboard/WorldDashboardList';\r\nimport WorldDashboardWorldData from '../cmps/worldDashboard/WorldDashboardWorldData';\r\nimport WorldDashboardDetails from '../cmps/worldDashboard/WorldDashboardDetails';\r\n\r\nfunction WorldDashboard() {\r\n\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!countriesStore) return;\r\n    const { countries, selectedCountryIndex } = countriesStore;\r\n    const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n    const isParamsInUrlWithCountry = params.alpha2 && !isSelectedCountry;\r\n    if (isParamsInUrlWithCountry) {\r\n      const country = countries.find(country => country.alpha2 === params.alpha2);\r\n      dispatch(actions.selectCountry(country));\r\n    }\r\n    const isUrlCmpUnmount = !params.alpha2 && isSelectedCountry;\r\n    if (isUrlCmpUnmount) {\r\n      history.push(`/${WORLD_DASHBOARD}/${countries[selectedCountryIndex].alpha2}`);\r\n    }\r\n  }, [dispatch, countriesStore, params, history]);\r\n\r\n  // TODO: clean code!\r\n  const selectCountry = (country = null) => {\r\n    if (!country && !isSelectedCountry) return;\r\n    const isSameCountry = country && country.alpha2 === selectedCountry.alpha2;\r\n    const alpha2ToPush = country && !isSameCountry ? country.alpha2 : '';\r\n    history.push(`/${WORLD_DASHBOARD}/${alpha2ToPush}`);\r\n    dispatch(actions.selectCountry(country ? country : {}));\r\n  }\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n  const selectedCountry = isSelectedCountry\r\n    ? countriesStore.countries[selectedCountryIndex]\r\n    : countriesStore ? countriesStore.worldData : {};\r\n\r\n  const mapOptionsFunction = {\r\n    onToggleIsCirclesShow: () => dispatch(actions.toggleIsCirclesShow()),\r\n    onToggleIsAutoFocus: () => dispatch(actions.toggleIsAutoFocus()),\r\n    onSetCirclesDataKey: dataKey => dispatch(actions.setCirclesDataKey(dataKey)),\r\n    onToggleIsTooltipShow: () => dispatch(actions.toggleIsTooltipShow()),\r\n    onToggleGradient: () => dispatch(actions.toggleGradient()),\r\n    onToggleIsGraphShow: () => dispatch(actions.toggleIsGraphShow()),\r\n  }\r\n\r\n  return (\r\n    <>{countriesStore && settingsStore && <>\r\n      <div className=\"world-dashboard\">\r\n        <div className=\"wrap-worldData-and-list flex-col overflow-hidden\">\r\n          <WorldDashboardWorldData worldData={countriesStore.worldData} onSelectCountry={selectCountry} />\r\n          <WorldDashboardList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        </div>\r\n        <WorldDashboardMap countriesStore={countriesStore} settings={settingsStore.worldMap}\r\n          onSelectCountry={selectCountry} mapOptionsFunction={mapOptionsFunction} />\r\n        <WorldDashboardDetails countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default WorldDashboard;\r\n"],"sourceRoot":""}