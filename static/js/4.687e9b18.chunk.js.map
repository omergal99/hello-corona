{"version":3,"sources":["cmps/helpers/mapHelpers/SvgDefsFilterShadow.js","cmps/helpers/FilterInput.js","cmps/helpers/countryDetails/CountryDetailsTitle.js","cmps/helpers/countryDetails/CountryDetailsList.js","cmps/helpers/countryDetails/index.js","cmps/countryView/CountryViewListItem.js","cmps/countryView/CountryViewList.js","cmps/countryView/CountryViewPresentation.js","cmps/countryView/CountryViewDetails.js","cmps/countryView/CountryViewBottom.js","pages/CountryView.js"],"names":["SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","type","slope","x","y","width","floodColor","floodOpacity","in2","operator","FilterInput","list","filterKeys","placeholder","onFilter","useState","filterValue","setFilterValue","className","value","onChange","ev","target","toLowerCase","filteredList","filter","item","some","key","includes","CountryDetailsTitle","country","sounds","isWorld","name","countryIcon","autoPlay","loop","muted","playsInline","loading","src","UtilsService","getSrc","alt","title","getImgSrc","alpha2","useEffect","isCountryVoice","msg","SpeechSynthesisUtterance","text","speechSynthesis","speak","continent","CountryDetailsList","categoriesToAddIcon","CASES","DEATHS","RECOVERED","ACTIVE","CRITICAL","TESTS","coronaDetails","getCoronaDataKeys","map","category","isWishIcon","numberWithCommas","dividBy","POPULATION","percent","style","color","colorHEX","svgIcon","toFixed","Number","populationDetails","populationData","getDataKeyByKey","CountryDetails","settingsStore","useSelector","state","CountryViewListItem","selectedCountry","onSelectCountry","isSelected","onClick","CountryViewList","countriesStore","countries","selectedCountryIndex","filteredCountries","setFilteredCountries","CountryViewPresentation","countryRef","useRef","initStroke","dynamicRatio","setDynamicRatio","viewBox","setViewBox","bBox","current","getBBox","abs","Math","max","bBoxX","bBoxY","d","ref","strokeWidth","CountryViewDetails","CountryViewBottom","r","CountryView","dispatch","useDispatch","history","useHistory","params","useParams","isSelectedCountry","find","actions","selectCountry","push","COUNTRY_VIEW","worldData","alpha2ToPush"],"mappings":"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","file":"static/js/4.687e9b18.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <filter id=\"dropshadow\" height=\"130%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n          <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n          <feComponentTransfer>\r\n            <feFuncA type=\"linear\" slope=\"0.5\" />\r\n          </feComponentTransfer>\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <defs>\r\n        <filter id=\"dropshadow-color\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\r\n          <feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offsetBlur\" />\r\n          <feFlood floodColor=\"var(--color2-border)\" floodOpacity=\"0.6\" result=\"offsetColor\" />\r\n          <feComposite in=\"offsetColor\" in2=\"offsetBlur\" operator=\"in\" result=\"offsetBlur\" />\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState } from 'react';\r\n\r\nfunction FilterInput({ list = [], filterKeys = [], placeholder = 'Search',\r\n  onFilter }) {\r\n\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const updateFilterValue = ev => {\r\n    setFilterValue(ev.target.value);\r\n    const value = ev.target.value.toLowerCase();\r\n    if (!value) onFilter(list);\r\n    else {\r\n      const filteredList = list.filter(item => filterKeys.some(key => item[key].toLowerCase().includes(value)));\r\n      onFilter(filteredList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <input className=\"filter-input\" type=\"text\" placeholder={placeholder}\r\n      value={filterValue} onChange={updateFilterValue} />\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React, { useEffect } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction CountryDetailsTitle({ country, sounds }) {\r\n\r\n  const isWorld = country.name === 'World';\r\n\r\n  const countryIcon = (() => {\r\n    return isWorld\r\n      // ? <img className=\"country-flag\" src={UtilsService.getSrc(`earth.gif`)} alt=\"Earth\" />\r\n      ? <video className=\"country-earth\" autoPlay loop muted playsInline loading=\"lazy\">\r\n        <source src={UtilsService.getSrc(`earth.mp4`)} type=\"video/mp4\" />\r\n      </video>\r\n      : <img className=\"country-flag\" alt=\"Flag\" title={country.name}\r\n        src={UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`)} />\r\n  })()\r\n\r\n  useEffect(() => {\r\n    if (sounds.isCountryVoice && !isWorld) {\r\n      const msg = new SpeechSynthesisUtterance();\r\n      msg.text = country.name;\r\n      // const voices = window.speechSynthesis.getVoices();\r\n      // msg.voice = voices[10];\r\n      // msg.voiceURI = \"native\";\r\n      // msg.volume = 1;\r\n      // msg.rate = 1;\r\n      // msg.pitch = 0.8;\r\n      // msg.lang = 'en-US';\r\n      speechSynthesis.speak(msg);\r\n    }\r\n  }, [country, sounds, isWorld])\r\n\r\n  return (\r\n    <div className=\"country-details-title\">\r\n      <div className={`wrap-country-icon ${isWorld ? 'earth' : 'flag'}`}>\r\n        {countryIcon}\r\n      </div>\r\n      <div className=\"wrap-country-title\">\r\n        <h2>{country.name}</h2>\r\n        <span className=\"continent\">{country.continent}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsTitle;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport {\r\n  POPULATION, CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS,\r\n  getCoronaDataKeys, getDataKeyByKey\r\n} from '../../../constants/DataKeys';\r\n\r\nfunction CountryDetailsList({ country }) {\r\n\r\n  const categoriesToAddIcon = [CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS];\r\n  const coronaDetails = getCoronaDataKeys().map(category => {\r\n    const isWishIcon = categoriesToAddIcon.some(key => key === category.key);\r\n    const value = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const dividBy = category.key === CASES ? POPULATION : category.dividBy;\r\n    const percent = country[category.key] / country[dividBy] * 100;\r\n    return <li className=\"country-details-item\" key={category.key} style={{ color: category.colorHEX }}>\r\n      <span className=\"title\">\r\n        {category.title}:&nbsp;\r\n        {isWishIcon && <div className=\"wrap-icon-svg\">{category.svgIcon}</div>}\r\n      </span>\r\n      <span className=\"value\" title={value}>{value}</span>\r\n      {dividBy && !!country[category.key] &&\r\n        <span className=\"percent\" title={percent.toFixed(2)}>\r\n          {Number(percent.toFixed(0)) !== 0 ? percent.toFixed(0) : percent.toFixed(2)}\r\n          %\r\n        </span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  const populationDetails = (() => {\r\n    const populationData = getDataKeyByKey(POPULATION);\r\n    const value = UtilsService.numberWithCommas(country[populationData.key]);\r\n    return <li className=\"country-details-item\">\r\n      <span className=\"title\">{populationData.title}:&nbsp;</span>\r\n      <span className=\"value population\" title={value}>{value}</span>\r\n    </li>\r\n  })()\r\n\r\n  return (\r\n    <ul className=\"country-details-list\">\r\n      {populationDetails}\r\n      {coronaDetails}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport CountryDetailsTitle from './CountryDetailsTitle';\r\nimport CountryDetailsList from './CountryDetailsList';\r\n\r\nfunction CountryDetails({ country }) {\r\n\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n  const sounds = settingsStore ? settingsStore.sounds : { sounds: false };\r\n  return (\r\n    <div className=\"country-details flex-col\">\r\n      <CountryDetailsTitle country={country} sounds={sounds} />\r\n      <CountryDetailsList country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport { CASES, DEATHS, RECOVERED } from '../../constants/DataKeys';\r\nfunction CountryViewListItem({ country, selectedCountry,\r\n  onSelectCountry }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  return (\r\n    <li className=\"wrap-country\">\r\n      <div className={`country ${isSelected}`} onClick={() => onSelectCountry(country)}>\r\n        <div>\r\n          <span>{country.name}</span>\r\n        </div>\r\n        <div>\r\n          <span>Cases: </span>\r\n          <span>{UtilsService.numberWithCommas(country[CASES])}</span>\r\n        </div>\r\n        <div>\r\n          <span>Deaths: </span>\r\n          <span>{UtilsService.numberWithCommas(country[DEATHS])}</span>\r\n        </div>\r\n        <div>\r\n          <span>Recovered: </span>\r\n          <span>{UtilsService.numberWithCommas(country[RECOVERED])}</span>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default CountryViewListItem;\r\n","import React, { useState } from 'react';\r\n\r\nimport CountryViewListItem from './CountryViewListItem';\r\nimport FilterInput from '../helpers/FilterInput';\r\n\r\nfunction CountryViewList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const [filteredCountries, setFilteredCountries] = useState(countries);\r\n\r\n  const list = filteredCountries.map(country => (\r\n    <CountryViewListItem key={country.name} country={country} selectedCountry={selectedCountry}\r\n      onSelectCountry={onSelectCountry} />\r\n  ))\r\n\r\n  return (\r\n    <div className=\"country-view-list flex-col\">\r\n      <div className=\"custom-filter-input\">\r\n        <FilterInput list={countries} filterKeys={['name']} placeholder=\"Search Country\"\r\n          onFilter={setFilteredCountries} />\r\n      </div>\r\n      <ul className=\"countries\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewList;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport SvgDefsFilterShadow from '../helpers/mapHelpers/SvgDefsFilterShadow';\r\n\r\nfunction CountryViewPresentation({ selectedCountry }) {\r\n\r\n  const countryRef = useRef();\r\n\r\n  const initStroke = 200;\r\n  const [dynamicRatio, setDynamicRatio] = useState(initStroke / initStroke);\r\n  const [viewBox, setViewBox] = useState(`0 0 100 100`);\r\n\r\n  useEffect(() => {\r\n    const bBox = countryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    setViewBox(`${bBoxX - 2} ${bBoxY - 2} ${max + 4} ${max + 4}`);\r\n    setDynamicRatio(max / initStroke);\r\n  }, [selectedCountry])\r\n\r\n  return (\r\n    <div className=\"country-view-presentation\" key={selectedCountry.name}>\r\n      <svg className='svg-country-presentation' viewBox={viewBox}\r\n        style={{ filter: 'url(#dropshadow-color)' }}>\r\n        <SvgDefsFilterShadow />\r\n        <path className=\"country-path\" d={selectedCountry.d} ref={countryRef}\r\n          style={{ strokeWidth: `${dynamicRatio}px` }}>\r\n        </path>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewPresentation;\r\n","import React from 'react';\r\nimport CountryDetails from '../helpers/countryDetails';\r\n\r\nfunction CountryViewDetails({ selectedCountry }) {\r\n\r\n  return (\r\n    <div className=\"country-view-details flex-col\">\r\n      <CountryDetails country={selectedCountry} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewDetails;\r\n","import React from 'react';\r\n\r\nfunction CountryViewBottom() {\r\n\r\n  return (\r\n    <div className=\"country-view-bottom\">\r\n      <div className=\"wrap-loader-svg\">\r\n        <div className=\"lighter-1 lighter\"></div>\r\n        <div className=\"lighter-2 lighter\"></div>\r\n        <svg className=\"loader-svg\" viewBox=\"0 0 100 100\">\r\n          <g className=\"g-loader\">\r\n            <circle className=\"light-source\" r=\"15%\"/>\r\n            <circle className=\"spiner-1 spiner\" r=\"20%\" />\r\n            <circle className=\"spiner-2 spiner\" r=\"30%\" />\r\n            <circle className=\"spiner-3 spiner\" r=\"40%\" />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewBottom;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport { COUNTRY_VIEW } from '../constants/RouterPaths';\r\n\r\nimport CountryViewList from '../cmps/countryView/CountryViewList';\r\nimport CountryViewPresentation from '../cmps/countryView/CountryViewPresentation';\r\nimport CountryViewDetails from '../cmps/countryView/CountryViewDetails';\r\nimport CountryViewBottom from '../cmps/countryView/CountryViewBottom';\r\n\r\nfunction CountryView() {\r\n\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!countriesStore || !params) return;\r\n    const { countries, selectedCountryIndex } = countriesStore;\r\n    const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n    if (params.alpha2 && !isSelectedCountry) {\r\n      const country = countries.find(country => country.alpha2 === params.alpha2);\r\n      dispatch(actions.selectCountry(country));\r\n    }\r\n    if (!params.alpha2 && isSelectedCountry) {\r\n      history.push(`/${COUNTRY_VIEW}/${countries[selectedCountryIndex].alpha2}`);\r\n    }\r\n  }, [dispatch, countriesStore, params, history]);\r\n\r\n  const selectCountry = country => {\r\n    const alpha2ToPush = country.alpha2 === selectedCountry.alpha2 ? '' : country.alpha2;\r\n    history.push(`/${COUNTRY_VIEW}/${alpha2ToPush}`);\r\n    dispatch(actions.selectCountry(country));\r\n  }\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countriesStore.countries[selectedCountryIndex]\r\n    : countriesStore ? countriesStore.worldData : {};\r\n\r\n  return (\r\n    <>{countriesStore && <>\r\n      <div className=\"country-view\">\r\n        <CountryViewList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        <CountryViewPresentation selectedCountry={selectedCountry} />\r\n        <CountryViewDetails selectedCountry={selectedCountry} />\r\n        <CountryViewBottom />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default CountryView;\r\n"],"sourceRoot":""}