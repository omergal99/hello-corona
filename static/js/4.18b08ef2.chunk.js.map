{"version":3,"sources":["cmps/helpers/mapHelpers/SvgDefsFilterShadow.js","cmps/helpers/FilterInput.js","cmps/helpers/countryDetails/CountryDetailsTitle.js","cmps/helpers/countryDetails/CountryDetailsList.js","cmps/helpers/countryDetails/index.js","cmps/countryView/CountryViewListItem.js","cmps/countryView/CountryViewList.js","cmps/countryView/CountryViewPresentation.js","cmps/countryView/CountryViewDetails.js","cmps/countryView/CountryViewBottom.js","pages/CountryView.js"],"names":["SvgDefsFilterShadow","id","height","in","stdDeviation","dx","dy","result","type","slope","x","y","width","floodColor","floodOpacity","in2","operator","FilterInput","list","filterKeys","placeholder","onFilter","useState","filterValue","setFilterValue","updateFilterValue","ev","console","log","target","value","toLowerCase","filteredList","filter","item","some","key","includes","className","onChange","onClick","focusable","viewBox","d","CountryDetailsTitle","country","sounds","isWorld","name","isCountryVoice","countryIcon","autoPlay","loop","muted","playsInline","loading","src","UtilsService","getSrc","alt","title","getImgSrc","alpha2","useEffect","msg","SpeechSynthesisUtterance","text","voice","window","speechSynthesis","getVoices","voiceURI","volume","rate","pitch","lang","speak","continent","CountryDetailsList","categoriesToAddIcon","CASES","DEATHS","RECOVERED","ACTIVE","CRITICAL","TESTS","coronaDetails","getCoronaDataKeys","map","category","isWishIcon","numberWithCommas","dividBy","POPULATION","percent","style","color","colorHEX","svgIcon","toFixed","Number","populationDetails","populationData","getDataKeyByKey","fill","cx","cy","r","CountryDetails","settingsStore","useSelector","state","CountryViewListItem","selectedCountry","onSelectCountry","isSelected","CountryViewList","countriesStore","countries","selectedCountryIndex","filteredCountries","setFilteredCountries","CountryViewPresentation","countryRef","useRef","initStroke","dynamicRatio","setDynamicRatio","setViewBox","bBox","current","getBBox","abs","Math","max","bBoxX","bBoxY","ref","strokeWidth","CountryViewDetails","CountryViewBottom","CountryView","dispatch","useDispatch","history","useHistory","params","useParams","isSelectedCountry","find","actions","selectCountry","push","COUNTRY_VIEW","worldData","alpha2ToPush"],"mappings":"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","file":"static/js/4.18b08ef2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction SvgDefsFilterShadow() {\r\n  return (\r\n    <>\r\n      <defs>\r\n        <filter id=\"dropshadow\" height=\"130%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" />\r\n          <feOffset dx=\"2\" dy=\"2\" result=\"offsetblur\" />\r\n          <feComponentTransfer>\r\n            <feFuncA type=\"linear\" slope=\"0.5\" />\r\n          </feComponentTransfer>\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n      <defs>\r\n        <filter id=\"dropshadow-color\" x=\"0%\" y=\"0%\" width=\"100%\" height=\"100%\">\r\n          <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\" result=\"blur\" />\r\n          <feOffset in=\"blur\" dx=\"0\" dy=\"0\" result=\"offsetBlur\" />\r\n          <feFlood floodColor=\"var(--color2-border)\" floodOpacity=\"0.6\" result=\"offsetColor\" />\r\n          <feComposite in=\"offsetColor\" in2=\"offsetBlur\" operator=\"in\" result=\"offsetBlur\" />\r\n          <feMerge>\r\n            <feMergeNode />\r\n            <feMergeNode in=\"SourceGraphic\" />\r\n          </feMerge>\r\n        </filter>\r\n      </defs>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SvgDefsFilterShadow;","import React, { useState } from 'react';\r\n\r\nfunction FilterInput({ list = [], filterKeys = [], placeholder = 'Search',\r\n  onFilter }) {\r\n\r\n  const [filterValue, setFilterValue] = useState('');\r\n\r\n  const updateFilterValue = ev => {\r\n    console.log('updateFilterValue');\r\n    setFilterValue(ev.target.value);\r\n    const value = ev.target.value.toLowerCase();\r\n    if (!value) onFilter(null);\r\n    else {\r\n      const filteredList = list.filter(item => filterKeys.some(key => item[key].toLowerCase().includes(value)));\r\n      onFilter(filteredList);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <label className=\"text-filter\">\r\n      <input className=\"filter-input\" type=\"text\" placeholder={placeholder}\r\n        value={filterValue} onChange={updateFilterValue} />\r\n      {filterValue &&\r\n        <div className=\"clear-button\" onClick={() => updateFilterValue({ target: { value: '' } })}>\r\n          <svg className=\"clear-button-svg\" focusable=\"false\" viewBox=\"0 0 24 24\">\r\n            <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\r\n          </svg>\r\n        </div>\r\n      }\r\n      <span className=\"span-animation\"></span>\r\n    </label>\r\n  );\r\n}\r\n\r\nexport default FilterInput;\r\n","import React, { useEffect } from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\n\r\nfunction CountryDetailsTitle({ country, sounds }) {\r\n\r\n  const isWorld = country.name === 'World';\r\n  const { isCountryVoice } = sounds;\r\n\r\n  const countryIcon = (() => {\r\n    return isWorld\r\n      // ? <img className=\"country-flag\" src={UtilsService.getSrc(`earth.gif`)} alt=\"Earth\" />\r\n      ? <video className=\"country-earth\" autoPlay loop muted playsInline loading=\"lazy\">\r\n        <source src={UtilsService.getSrc(`earth.mp4`)} type=\"video/mp4\" />\r\n      </video>\r\n      : <img className=\"country-flag\" alt=\"Flag\" title={country.name}\r\n        src={UtilsService.getImgSrc(`flags/${country.alpha2.toLowerCase()}.png`)} />\r\n  })()\r\n\r\n  \r\n  useEffect(() => {\r\n    if (isCountryVoice && !isWorld) {\r\n      const msg = new SpeechSynthesisUtterance();\r\n      msg.text = country.name;\r\n      // const voices = window.speechSynthesis.getVoices();\r\n      // msg.voice = voices[1];\r\n      msg.voice = window.speechSynthesis.getVoices()[1];\r\n      msg.voiceURI = \"native\";\r\n      msg.volume = 1;\r\n      msg.rate = 1;\r\n      msg.pitch = 0.8;\r\n      msg.lang = 'en-US';\r\n      speechSynthesis.speak(msg);\r\n    }\r\n  }, [country, isCountryVoice, isWorld])\r\n\r\n  return (\r\n    <div className=\"country-details-title\">\r\n      <div className={`wrap-country-icon ${isWorld ? 'earth' : 'flag'}`}>\r\n        {countryIcon}\r\n      </div>\r\n      <div className=\"wrap-country-title\">\r\n        <h2>{country.name}</h2>\r\n        <span className=\"continent\">{country.continent}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsTitle;\r\n","import React from 'react';\r\nimport UtilsService from '../../../services/UtilsService';\r\nimport {\r\n  POPULATION, CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS,\r\n  getCoronaDataKeys, getDataKeyByKey\r\n} from '../../../constants/DataKeys';\r\n\r\nfunction CountryDetailsList({ country }) {\r\n\r\n  const categoriesToAddIcon = [CASES, DEATHS, RECOVERED, ACTIVE, CRITICAL, TESTS];\r\n  const coronaDetails = getCoronaDataKeys().map(category => {\r\n    const isWishIcon = categoriesToAddIcon.some(key => key === category.key);\r\n    const value = country[category.key] ? UtilsService.numberWithCommas(country[category.key]) : 'No Data';\r\n    const dividBy = category.key === CASES ? POPULATION : category.dividBy;\r\n    const percent = country[category.key] / country[dividBy] * 100;\r\n    return <li className=\"country-details-item\" key={category.key} style={{ color: category.colorHEX }}>\r\n      <span className=\"title\">\r\n        {category.title}:&nbsp;\r\n        {isWishIcon && <div className=\"wrap-icon-svg\">{category.svgIcon}</div>}\r\n      </span>\r\n      <span className=\"value\" title={value}>{value}</span>\r\n      {dividBy && !!country[category.key] &&\r\n        <span className=\"percent\" title={percent.toFixed(2)}>\r\n          {Number(percent.toFixed(0)) !== 0 ? percent.toFixed(0) : percent.toFixed(2)}\r\n          %\r\n        </span>\r\n      }\r\n    </li>\r\n  })\r\n\r\n  const populationDetails = (() => {\r\n    const populationData = getDataKeyByKey(POPULATION);\r\n    const value = UtilsService.numberWithCommas(country[populationData.key]);\r\n    return <li className=\"country-details-item\">\r\n      <span className=\"title\">{populationData.title}:&nbsp;</span>\r\n      <div className=\"value population\">\r\n        <span title={value}>{value}</span>\r\n        <span className=\"wrap-icon-svg\">\r\n          <svg viewBox=\"0 0 512 512\">\r\n            <circle fill=\"currentColor\" cx=\"256\" cy=\"378.5\" r=\"25\" />\r\n            <path fill=\"currentColor\" d=\"M256,0C114.516,0,0,114.497,0,256c0,141.484,114.497,256,256,256c141.484,0,256-114.497,256-256\r\n\t\t\t\tC512,114.516,397.503,0,256,0z M256,472c-119.377,0-216-96.607-216-216c0-119.377,96.607-216,216-216\r\n\t\t\t\tc119.377,0,216,96.607,216,216C472,375.377,375.393,472,256,472z\"/>\r\n            <path fill=\"currentColor\" d=\"M256,128.5c-44.112,0-80,35.888-80,80c0,11.046,8.954,20,20,20s20-8.954,20-20c0-22.056,17.944-40,40-40\r\n\t\t\t\tc22.056,0,40,17.944,40,40c0,22.056-17.944,40-40,40c-11.046,0-20,8.954-20,20v50c0,11.046,8.954,20,20,20\r\n\t\t\t\tc11.046,0,20-8.954,20-20v-32.531c34.466-8.903,60-40.26,60-77.469C336,164.388,300.112,128.5,256,128.5z\"/>\r\n          </svg>\r\n          <div className=\"population-info\">\r\n            <span>Population of 2020</span>\r\n          </div>\r\n        </span>\r\n      </div>\r\n    </li>\r\n  })()\r\n\r\n  return (\r\n    <ul className=\"country-details-list\">\r\n      {populationDetails}\r\n      {coronaDetails}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default CountryDetailsList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport CountryDetailsTitle from './CountryDetailsTitle';\r\nimport CountryDetailsList from './CountryDetailsList';\r\n\r\nfunction CountryDetails({ country }) {\r\n\r\n  const settingsStore = useSelector(state => state.settingsStore);\r\n  const sounds = settingsStore ? settingsStore.sounds : { sounds: false };\r\n  return (\r\n    <div className=\"country-details flex-col\">\r\n      <CountryDetailsTitle country={country} sounds={sounds} />\r\n      <CountryDetailsList country={country} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from 'react';\r\nimport UtilsService from '../../services/UtilsService';\r\nimport { CASES, DEATHS, RECOVERED } from '../../constants/DataKeys';\r\nfunction CountryViewListItem({ country, selectedCountry,\r\n  onSelectCountry }) {\r\n\r\n  const isSelected = country.name === selectedCountry.name ? 'selected' : '';\r\n  return (\r\n    <li className=\"wrap-country\">\r\n      <div className={`country ${isSelected}`} onClick={() => onSelectCountry(country)}>\r\n        <div>\r\n          <span>{country.name}</span>\r\n        </div>\r\n        <div>\r\n          <span>Cases: </span>\r\n          <span>{UtilsService.numberWithCommas(country[CASES])}</span>\r\n        </div>\r\n        <div>\r\n          <span>Deaths: </span>\r\n          <span>{UtilsService.numberWithCommas(country[DEATHS])}</span>\r\n        </div>\r\n        <div>\r\n          <span>Recovered: </span>\r\n          <span>{UtilsService.numberWithCommas(country[RECOVERED])}</span>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default CountryViewListItem;\r\n","import React, { useState } from 'react';\r\n\r\nimport CountryViewListItem from './CountryViewListItem';\r\nimport FilterInput from '../helpers/FilterInput';\r\n\r\nfunction CountryViewList({ countriesStore: { countries, selectedCountryIndex },\r\n  onSelectCountry }) {\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0 ? countries[selectedCountryIndex] : {};\r\n\r\n  const [filteredCountries, setFilteredCountries] = useState(countries);\r\n\r\n  const list = filteredCountries.map(country => (\r\n    <CountryViewListItem key={country.name} country={country} selectedCountry={selectedCountry}\r\n      onSelectCountry={onSelectCountry} />\r\n  ))\r\n\r\n  return (\r\n    <div className=\"country-view-list flex-col\">\r\n      <div className=\"custom-filter-input\">\r\n        <FilterInput list={countries} filterKeys={['name']} placeholder=\"Search Country\"\r\n          onFilter={setFilteredCountries} />\r\n      </div>\r\n      <ul className=\"countries\">\r\n        {list}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewList;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport SvgDefsFilterShadow from '../helpers/mapHelpers/SvgDefsFilterShadow';\r\n\r\nfunction CountryViewPresentation({ selectedCountry }) {\r\n\r\n  const countryRef = useRef();\r\n\r\n  const initStroke = 200;\r\n  const [dynamicRatio, setDynamicRatio] = useState(initStroke / initStroke);\r\n  const [viewBox, setViewBox] = useState(`0 0 100 100`);\r\n\r\n  useEffect(() => {\r\n    const bBox = countryRef.current.getBBox();\r\n    if (selectedCountry.name === 'United States') bBox.width = 265;\r\n    const abs = Math.abs(bBox.width - bBox.height) / 2;\r\n    const max = bBox.width > bBox.height ? bBox.width : bBox.height;\r\n    const bBoxX = bBox.width > bBox.height ? bBox.x : bBox.x - abs;\r\n    const bBoxY = bBox.width > bBox.height ? bBox.y - abs : bBox.y;\r\n    setViewBox(`${bBoxX - 2} ${bBoxY - 2} ${max + 4} ${max + 4}`);\r\n    setDynamicRatio(max / initStroke);\r\n  }, [selectedCountry])\r\n\r\n  return (\r\n    <div className=\"country-view-presentation\" key={selectedCountry.name}>\r\n      <svg className='svg-country-presentation' viewBox={viewBox}\r\n        style={{ filter: 'url(#dropshadow-color)' }}>\r\n        <SvgDefsFilterShadow />\r\n        <path className=\"country-path\" d={selectedCountry.d} ref={countryRef}\r\n          style={{ strokeWidth: `${dynamicRatio}px` }}>\r\n        </path>\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewPresentation;\r\n","import React from 'react';\r\nimport CountryDetails from '../helpers/countryDetails';\r\n\r\nfunction CountryViewDetails({ selectedCountry }) {\r\n\r\n  return (\r\n    <div className=\"country-view-details flex-col\">\r\n      <CountryDetails country={selectedCountry} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewDetails;\r\n","import React from 'react';\r\n\r\nfunction CountryViewBottom() {\r\n\r\n  return (\r\n    <div className=\"country-view-bottom\">\r\n      <div className=\"wrap-loader-svg\">\r\n        <div className=\"lighter-1 lighter\"></div>\r\n        <div className=\"lighter-2 lighter\"></div>\r\n        <svg className=\"loader-svg\" viewBox=\"0 0 100 100\">\r\n          <g className=\"g-loader\">\r\n            <circle className=\"light-source\" r=\"15%\"/>\r\n            <circle className=\"spiner-1 spiner\" r=\"20%\" />\r\n            <circle className=\"spiner-2 spiner\" r=\"30%\" />\r\n            <circle className=\"spiner-3 spiner\" r=\"40%\" />\r\n          </g>\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryViewBottom;\r\n","import React, { useEffect } from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport actions from '../store/actions';\r\nimport { COUNTRY_VIEW } from '../constants/RouterPaths';\r\n\r\nimport CountryViewList from '../cmps/countryView/CountryViewList';\r\nimport CountryViewPresentation from '../cmps/countryView/CountryViewPresentation';\r\nimport CountryViewDetails from '../cmps/countryView/CountryViewDetails';\r\nimport CountryViewBottom from '../cmps/countryView/CountryViewBottom';\r\n\r\nfunction CountryView() {\r\n\r\n  const countriesStore = useSelector(state => state.countriesStore);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const params = useParams();\r\n\r\n  useEffect(() => {\r\n    if (!countriesStore || !params) return;\r\n    const { countries, selectedCountryIndex } = countriesStore;\r\n    const isSelectedCountry = selectedCountryIndex || selectedCountryIndex === 0;\r\n    if (params.alpha2 && !isSelectedCountry) {\r\n      const country = countries.find(country => country.alpha2 === params.alpha2);\r\n      dispatch(actions.selectCountry(country));\r\n    }\r\n    if (!params.alpha2 && isSelectedCountry) {\r\n      history.push(`/${COUNTRY_VIEW}/${countries[selectedCountryIndex].alpha2}`);\r\n    }\r\n  }, [dispatch, countriesStore, params, history]);\r\n\r\n  const selectCountry = country => {\r\n    const alpha2ToPush = country.alpha2 === selectedCountry.alpha2 ? '' : country.alpha2;\r\n    history.push(`/${COUNTRY_VIEW}/${alpha2ToPush}`);\r\n    dispatch(actions.selectCountry(country));\r\n  }\r\n\r\n  const selectedCountryIndex = countriesStore && countriesStore.selectedCountryIndex;\r\n  const selectedCountry = selectedCountryIndex || selectedCountryIndex === 0\r\n    ? countriesStore.countries[selectedCountryIndex]\r\n    : countriesStore ? countriesStore.worldData : {};\r\n\r\n  return (\r\n    <>{countriesStore && <>\r\n      <div className=\"country-view\">\r\n        <CountryViewList countriesStore={countriesStore} onSelectCountry={selectCountry} />\r\n        <CountryViewPresentation selectedCountry={selectedCountry} />\r\n        <CountryViewDetails selectedCountry={selectedCountry} />\r\n        <CountryViewBottom />\r\n      </div>\r\n    </>}</>\r\n  );\r\n}\r\n\r\nexport default CountryView;\r\n"],"sourceRoot":""}